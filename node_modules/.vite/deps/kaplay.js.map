{
  "version": 3,
  "sources": ["../../kaplay/src/shared.ts", "../../kaplay/src/utils/dataURL.ts", "../../kaplay/src/data/gamepad.json", "../../kaplay/src/constants/general.ts", "../../kaplay/src/events/events.ts", "../../kaplay/src/math/clamp.ts", "../../kaplay/src/constants/colorMap.ts", "../../kaplay/src/math/lerpNumber.ts", "../../kaplay/src/math/color.ts", "../../kaplay/src/math/Vec2.ts", "../../kaplay/src/math/lerp.ts", "../../kaplay/src/math/math.ts", "../../kaplay/src/math/Mat4.ts", "../../kaplay/src/constants/math.ts", "../../kaplay/src/ecs/components/draw/color.ts", "../../kaplay/src/math/easings.ts", "../../kaplay/src/utils/numbers.ts", "../../kaplay/src/ecs/components/draw/opacity.ts", "../../kaplay/src/game/utils.ts", "../../kaplay/src/math/various.ts", "../../kaplay/src/types.ts", "../../kaplay/src/gfx/anchor.ts", "../../kaplay/src/gfx/stack.ts", "../../kaplay/src/utils/asserts.ts", "../../kaplay/src/utils/log.ts", "../../kaplay/src/assets/utils.ts", "../../kaplay/src/assets/shader.ts", "../../kaplay/src/gfx/draw/drawRaw.ts", "../../kaplay/src/gfx/draw/drawLine.ts", "../../kaplay/src/gfx/draw/drawPolygon.ts", "../../kaplay/src/gfx/draw/drawRect.ts", "../../kaplay/src/ecs/components/draw/rect.ts", "../../kaplay/src/ecs/components/transform/fixed.ts", "../../kaplay/src/ecs/entity/utils.ts", "../../kaplay/src/game/camera.ts", "../../kaplay/src/utils/deepEq.ts", "../../kaplay/src/gfx/gfx.ts", "../../kaplay/src/gfx/TexPacker.ts", "../../kaplay/src/assets/asset.ts", "../../kaplay/src/assets/sound.ts", "../../kaplay/src/assets/sprite.ts", "../../kaplay/src/audio/audio.ts", "../../kaplay/src/app/data.ts", "../../kaplay/src/assets/aseprite.ts", "../../kaplay/src/assets/font.ts", "../../kaplay/src/assets/bitmapFont.ts", "../../kaplay/src/assets/spriteAtlas.ts", "../../kaplay/src/audio/playMusic.ts", "../../kaplay/src/audio/play.ts", "../../kaplay/src/audio/burp.ts", "../../kaplay/src/audio/volume.ts", "../../kaplay/src/debug/record.ts", "../../kaplay/src/ecs/components/draw/blend.ts", "../../kaplay/src/gfx/draw/drawEllipse.ts", "../../kaplay/src/gfx/draw/drawCircle.ts", "../../kaplay/src/ecs/components/draw/circle.ts", "../../kaplay/src/ecs/components/draw/drawon.ts", "../../kaplay/src/ecs/components/draw/ellipse.ts", "../../kaplay/src/ecs/components/draw/fadeIn.ts", "../../kaplay/src/ecs/components/draw/mask.ts", "../../kaplay/src/ecs/components/draw/outline.ts", "../../kaplay/src/ecs/components/draw/particles.ts", "../../kaplay/src/gfx/draw/drawPicture.ts", "../../kaplay/src/ecs/components/draw/picture.ts", "../../kaplay/src/ecs/components/draw/polygon.ts", "../../kaplay/src/ecs/components/draw/raycast.ts", "../../kaplay/src/ecs/components/draw/shader.ts", "../../kaplay/src/utils/overload.ts", "../../kaplay/src/events/globalEvents.ts", "../../kaplay/src/gfx/draw/drawUVQuad.ts", "../../kaplay/src/gfx/draw/drawTexture.ts", "../../kaplay/src/ecs/components/draw/sprite.ts", "../../kaplay/src/gfx/draw/drawFormattedText.ts", "../../kaplay/src/utils/runes.ts", "../../kaplay/src/gfx/formatText.ts", "../../kaplay/src/ecs/components/draw/text.ts", "../../kaplay/src/ecs/components/draw/uvquad.ts", "../../kaplay/src/ecs/components/draw/video.ts", "../../kaplay/src/ecs/components/level/agent.ts", "../../kaplay/src/utils/binaryheap.ts", "../../kaplay/src/ecs/entity/prefab.ts", "../../kaplay/src/ecs/components/transform/pos.ts", "../../kaplay/src/ecs/components/level/tile.ts", "../../kaplay/src/ecs/components/level/level.ts", "../../kaplay/src/math/navigation.ts", "../../kaplay/src/ecs/components/level/pathfinder.ts", "../../kaplay/src/ecs/components/level/patrol.ts", "../../kaplay/src/ecs/components/level/sentry.ts", "../../kaplay/src/ecs/components/misc/animate.ts", "../../kaplay/src/ecs/components/misc/fakeMouse.ts", "../../kaplay/src/ecs/components/misc/health.ts", "../../kaplay/src/ecs/components/misc/lifespan.ts", "../../kaplay/src/ecs/components/misc/named.ts", "../../kaplay/src/ecs/components/misc/state.ts", "../../kaplay/src/ecs/components/misc/stay.ts", "../../kaplay/src/ecs/components/misc/textInput.ts", "../../kaplay/src/ecs/components/misc/timer.ts", "../../kaplay/src/ecs/components/physics/area.ts", "../../kaplay/src/game/gravity.ts", "../../kaplay/src/ecs/components/physics/body.ts", "../../kaplay/src/ecs/components/physics/doubleJump.ts", "../../kaplay/src/ecs/components/physics/effectors.ts", "../../kaplay/src/ecs/components/transform/anchor.ts", "../../kaplay/src/ecs/systems/systems.ts", "../../kaplay/src/ecs/components/transform/constraint.ts", "../../kaplay/src/ecs/components/transform/follow.ts", "../../kaplay/src/ecs/components/transform/layer.ts", "../../kaplay/src/ecs/components/transform/move.ts", "../../kaplay/src/ecs/components/transform/offscreen.ts", "../../kaplay/src/ecs/components/transform/rotate.ts", "../../kaplay/src/ecs/components/transform/scale.ts", "../../kaplay/src/ecs/components/transform/skew.ts", "../../kaplay/src/ecs/components/transform/z.ts", "../../kaplay/src/gfx/draw/drawText.ts", "../../kaplay/src/gfx/draw/drawUnscaled.ts", "../../kaplay/src/core/errors.ts", "../../kaplay/src/gfx/draw/drawStenciled.ts", "../../kaplay/src/gfx/draw/drawMasked.ts", "../../kaplay/src/gfx/draw/drawSubstracted.ts", "../../kaplay/src/gfx/FrameBuffer.ts", "../../kaplay/src/ecs/entity/make.ts", "../../kaplay/src/ecs/entity/GameObjRaw.ts", "../../kaplay/src/ecs/components/misc/boom.ts", "../../kaplay/src/ecs/entity/premade/addKaboom.ts", "../../kaplay/src/ecs/entity/premade/addLevel.ts", "../../kaplay/src/ecs/systems/Collision.ts", "../../kaplay/src/game/layers.ts", "../../kaplay/src/gfx/viewport.ts", "../../kaplay/src/app/appEvents.ts", "../../kaplay/src/game/scenes.ts", "../../kaplay/src/gfx/bg.ts", "../../kaplay/src/gfx/canvasBuffer.ts", "../../kaplay/src/gfx/draw/drawCurve.ts", "../../kaplay/src/gfx/draw/drawBezier.ts", "../../kaplay/src/gfx/draw/drawCanvas.ts", "../../kaplay/src/gfx/draw/drawSprite.ts", "../../kaplay/src/gfx/draw/drawTriangle.ts", "../../kaplay/src/math/ai/decisiontree.ts", "../../kaplay/src/math/ai/rulesystem.ts", "../../kaplay/src/math/ai/statemachine.ts", "../../kaplay/src/math/gjk.ts", "../../kaplay/src/math/navigationmesh.ts", "../../kaplay/src/math/sort.ts", "../../kaplay/src/core/plug.ts", "../../kaplay/src/core/quit.ts", "../../kaplay/src/core/context.ts", "../../kaplay/src/utils/sets.ts", "../../kaplay/src/app/buttons.ts", "../../kaplay/src/app/inputBindings.ts", "../../kaplay/src/app/app.ts", "../../kaplay/src/debug/debug.ts", "../../kaplay/src/game/game.ts", "../../kaplay/src/gfx/canvas.ts", "../../kaplay/src/gfx/gfxApp.ts", "../../kaplay/src/gfx/draw/drawInspectText.ts", "../../kaplay/src/gfx/draw/drawDebug.ts", "../../kaplay/src/gfx/draw/drawFrame.ts", "../../kaplay/src/gfx/draw/drawLoadingScreen.ts", "../../kaplay/src/core/engineLoop.ts", "../../kaplay/src/core/fontCache.ts", "../../kaplay/src/core/frameRendering.ts", "../../kaplay/src/core/engine.ts", "../../kaplay/src/math/minkowski.ts", "../../kaplay/src/math/sat.ts", "../../kaplay/src/math/spatial/sweepandprune.ts", "../../kaplay/src/ecs/systems/createCollisionSystem.ts", "../../kaplay/src/kaplay.ts"],
  "sourcesContent": ["import type { Engine } from \"./core/engine\";\n\n/**\n * KAPLAY.js internal data\n *\n * @ignore\n */\nexport let _k: Engine;\n\n/** @ignore */\nexport function updateEngine(e: Engine) {\n    _k = e;\n}\n", "export function base64ToArrayBuffer(base64: string): ArrayBuffer {\n    const binstr = window.atob(base64);\n    const len = binstr.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n        bytes[i] = binstr.charCodeAt(i);\n    }\n    return bytes.buffer;\n}\n\nexport function dataURLToArrayBuffer(url: string): ArrayBuffer {\n    return base64ToArrayBuffer(url.split(\",\")[1]);\n}\n\nexport function download(filename: string, url: string) {\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename;\n    a.click();\n}\n\nexport function downloadText(filename: string, text: string) {\n    download(filename, \"data:text/plain;charset=utf-8,\" + text);\n}\n\nexport function downloadJSON(filename: string, data: any) {\n    downloadText(filename, JSON.stringify(data));\n}\n\nexport function downloadBlob(filename: string, blob: Blob) {\n    const url = URL.createObjectURL(blob);\n    download(filename, url);\n    URL.revokeObjectURL(url);\n}\n\nexport const isDataURL = (str: string) => str.match(/^data:\\w+\\/\\w+;base64,.+/);\n\nexport const getFileName = (p: string) => p.split(\".\").slice(0, -1).join(\".\");\n", "{\n  \"Joy-Con L+R (STANDARD GAMEPAD Vendor: 057e Product: 200e)\": {\n    \"buttons\": {\n      \"0\": \"south\",\n      \"1\": \"east\",\n      \"2\": \"west\",\n      \"3\": \"north\",\n      \"4\": \"lshoulder\",\n      \"5\": \"rshoulder\",\n      \"6\": \"ltrigger\",\n      \"7\": \"rtrigger\",\n      \"8\": \"select\",\n      \"9\": \"start\",\n      \"10\": \"lstick\",\n      \"11\": \"rstick\",\n      \"12\": \"dpad-up\",\n      \"13\": \"dpad-down\",\n      \"14\": \"dpad-left\",\n      \"15\": \"dpad-right\",\n      \"16\": \"home\",\n      \"17\": \"capture\"\n    },\n    \"sticks\": {\n      \"left\": { \"x\": 0, \"y\": 1 },\n      \"right\": { \"x\": 2, \"y\": 3 }\n    }\n  },\n  \"Joy-Con (L) (STANDARD GAMEPAD Vendor: 057e Product: 2006)\": {\n    \"buttons\": {\n      \"0\": \"south\",\n      \"1\": \"east\",\n      \"2\": \"west\",\n      \"3\": \"north\",\n      \"4\": \"lshoulder\",\n      \"5\": \"rshoulder\",\n      \"9\": \"select\",\n      \"10\": \"lstick\",\n      \"16\": \"start\"\n    },\n    \"sticks\": {\n      \"left\": { \"x\": 0, \"y\": 1 }\n    }\n  },\n  \"Joy-Con (R) (STANDARD GAMEPAD Vendor: 057e Product: 2007)\": {\n    \"buttons\": {\n      \"0\": \"south\",\n      \"1\": \"east\",\n      \"2\": \"west\",\n      \"3\": \"north\",\n      \"4\": \"lshoulder\",\n      \"5\": \"rshoulder\",\n      \"9\": \"start\",\n      \"10\": \"lstick\",\n      \"16\": \"select\"\n    },\n    \"sticks\": {\n      \"left\": { \"x\": 0, \"y\": 1 }\n    }\n  },\n  \"Pro Controller (STANDARD GAMEPAD Vendor: 057e Product: 2009)\": {\n    \"buttons\": {\n      \"0\": \"south\",\n      \"1\": \"east\",\n      \"2\": \"west\",\n      \"3\": \"north\",\n      \"4\": \"lshoulder\",\n      \"5\": \"rshoulder\",\n      \"6\": \"ltrigger\",\n      \"7\": \"rtrigger\",\n      \"8\": \"select\",\n      \"9\": \"start\",\n      \"10\": \"lstick\",\n      \"11\": \"rstick\",\n      \"12\": \"dpad-up\",\n      \"13\": \"dpad-down\",\n      \"14\": \"dpad-left\",\n      \"15\": \"dpad-right\",\n      \"16\": \"home\",\n      \"17\": \"capture\"\n    },\n    \"sticks\": {\n      \"left\": { \"x\": 0, \"y\": 1 },\n      \"right\": { \"x\": 2, \"y\": 3 }\n    }\n  },\n  \"DualSense Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 0ce6)\": {\n    \"buttons\": {\n      \"0\": \"south\",\n      \"1\": \"east\",\n      \"2\": \"west\",\n      \"3\": \"north\",\n      \"4\": \"lshoulder\",\n      \"5\": \"rshoulder\",\n      \"6\": \"ltrigger\",\n      \"7\": \"rtrigger\",\n      \"8\": \"select\",\n      \"9\": \"start\",\n      \"10\": \"lstick\",\n      \"11\": \"rstick\",\n      \"12\": \"dpad-up\",\n      \"13\": \"dpad-down\",\n      \"14\": \"dpad-left\",\n      \"15\": \"dpad-right\",\n      \"16\": \"home\",\n      \"17\": \"touchpad\"\n    },\n    \"sticks\": {\n      \"left\": { \"x\": 0, \"y\": 1 },\n      \"right\": { \"x\": 2, \"y\": 3 }\n    }\n  },\n  \"default\": {\n    \"buttons\": {\n      \"0\": \"south\",\n      \"1\": \"east\",\n      \"2\": \"west\",\n      \"3\": \"north\",\n      \"4\": \"lshoulder\",\n      \"5\": \"rshoulder\",\n      \"6\": \"ltrigger\",\n      \"7\": \"rtrigger\",\n      \"8\": \"select\",\n      \"9\": \"start\",\n      \"10\": \"lstick\",\n      \"11\": \"rstick\",\n      \"12\": \"dpad-up\",\n      \"13\": \"dpad-down\",\n      \"14\": \"dpad-left\",\n      \"15\": \"dpad-right\",\n      \"16\": \"home\"\n    },\n    \"sticks\": {\n      \"left\": { \"x\": 0, \"y\": 1 },\n      \"right\": { \"x\": 2, \"y\": 3 }\n    }\n  }\n}\n", "/*\nAs KAPLAY support creating and destroying context, we really need to track all\nour global constants not being dependent on the context. If it's a constant, it\nnever should depend on the context. If it does, should be a variable of Engine\n(app, game, gfx, etc)\n\nConstants should be SNAKE_CASE\n*/\n\nimport GAMEPAD_MAP from \"../data/gamepad.json\" assert { type: \"json\" };\n\n// some default charsets for loading bitmap fonts\nexport const ASCII_CHARS =\n    \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\nexport const DEF_ANCHOR = \"topleft\";\nexport const BG_GRID_SIZE = 64;\nexport const DEF_FONT = \"monospace\";\nexport const DBG_FONT = \"monospace\";\nexport const DEF_TEXT_SIZE = 36;\nexport const DEF_TEXT_CACHE_SIZE = 64;\nexport const MAX_TEXT_CACHE_SIZE = 256;\nexport const FONT_ATLAS_WIDTH = 2048;\nexport const FONT_ATLAS_HEIGHT = 2048;\nexport const SPRITE_ATLAS_WIDTH = 2048;\nexport const SPRITE_ATLAS_HEIGHT = 2048;\n// 0.1 pixel padding to texture coordinates to prevent artifact\nexport const UV_PAD = 0.1;\nexport const DEF_HASH_GRID_SIZE = 64;\nexport const DEF_FONT_FILTER = \"linear\";\nexport const LOG_MAX = 8;\nexport const LOG_TIME = 4;\nexport const VERTEX_FORMAT = [\n    { name: \"a_pos\", size: 2 },\n    { name: \"a_uv\", size: 2 },\n    { name: \"a_color\", size: 4 },\n];\nconst STRIDE = VERTEX_FORMAT.reduce((sum, f) => sum + f.size, 0);\nconst MAX_BATCHED_QUAD = 2048;\nexport const MAX_BATCHED_VERTS = MAX_BATCHED_QUAD * 4 * STRIDE;\nexport const MAX_BATCHED_INDICES = MAX_BATCHED_QUAD * 6;\n// vertex shader template, replace {{user}} with user vertex shader code\nexport const VERT_TEMPLATE =\n    `attribute vec2 a_pos;attribute vec2 a_uv;attribute vec4 a_color;varying vec2 v_pos;varying vec2 v_uv;varying vec4 v_color;uniform float width;uniform float height;uniform mat4 camera;uniform mat4 transform;vec4 def_vert(){vec4 pos=camera*transform*vec4(a_pos,0.0,1.0);return vec4(pos.x/width*2.0-1.0,pos.y/-height*2.0+1.0,pos.z,pos.w);}{{user}}void main(){vec4 pos=vert(a_pos,a_uv,a_color);v_pos=a_pos;v_uv=a_uv;v_color=a_color;gl_Position=pos;}`;\nexport const FRAG_TEMPLATE =\n    `precision mediump float;varying vec2 v_pos;varying vec2 v_uv;varying vec4 v_color;uniform sampler2D u_tex;vec4 def_frag(){vec4 texColor=texture2D(u_tex,v_uv);return vec4((v_color.rgb*texColor.rgb),texColor.a)*v_color.a;}{{user}}void main(){gl_FragColor=frag(v_pos,v_uv,v_color,u_tex);if(gl_FragColor.a==0.0){discard;}}`;\nexport const DEF_VERT =\n    `vec4 vert(vec2 pos,vec2 uv,vec4 color){return def_vert();}`;\nexport const DEF_FRAG =\n    `vec4 frag(vec2 pos,vec2 uv,vec4 color,sampler2D tex){return def_frag();}`;\n\nexport const DEF_OFFSCREEN_DIS = 200;\n// maximum y velocity with body()\nexport const DEF_JUMP_FORCE = 640;\nexport const MAX_VEL = 65536;\nexport const EVENT_CANCEL_SYMBOL = Symbol.for(\"kaplay.cancel\");\n\nexport const GP_MAP = GAMEPAD_MAP as unknown as Record<string, string>;\n\nexport const MAX_TRIES = 20;\n", "import { EVENT_CANCEL_SYMBOL } from \"../constants/general\";\n\n/**\n * @group Events\n */\nexport class Registry<T> extends Map<number, T> {\n    private lastID: number = 0;\n    push(v: T): number {\n        const id = this.lastID;\n        this.set(id, v);\n        this.lastID++;\n        return id;\n    }\n    pushd(v: T): () => void {\n        const id = this.push(v);\n        return () => this.delete(id);\n    }\n}\n\n/**\n * A controller for all events in KAPLAY.\n *\n * @example\n * ```js\n * // Create a new event\n * const logHi = onUpdate(() => {\n *    debug.log(\"hi\");\n * });\n *\n * // Pause the event\n * logHi.paused = true;\n *\n * // Cancel the event\n * logHi.cancel();\n *\n * ```\n *\n * @group Events\n */\nexport class KEventController {\n    /** If the event is paused */\n    paused: boolean = false;\n    /** Cancel the event */\n    cancel: () => void;\n\n    constructor(cancel: () => void) {\n        this.cancel = cancel;\n    }\n    static join(events: KEventController[]): KEventController {\n        const ev = new KEventController(() =>\n            events.forEach((e) => e.cancel())\n        );\n        Object.defineProperty(ev, \"paused\", {\n            get: () => events[0].paused,\n            set: (p: boolean) => events.forEach((e) => e.paused = p),\n        });\n        ev.paused = false;\n        return ev;\n    }\n    static replace(oldEv: KEventController, newEv: KEventController) {\n        oldEv.cancel = () => newEv.cancel();\n        newEv.paused = oldEv.paused;\n        Object.defineProperty(oldEv, \"paused\", {\n            get: () => newEv.paused,\n            set: (p: boolean) => newEv.paused = p,\n        });\n\n        return oldEv;\n    }\n}\n\nexport class KEvent<Args extends any[] = any[]> {\n    private cancellers: WeakMap<(...args: Args) => unknown, () => void> =\n        new WeakMap();\n    private handlers: Registry<(...args: Args) => unknown> = new Registry();\n\n    add(action: (...args: Args) => unknown): KEventController {\n        function handler(...args: Args) {\n            if (ev.paused) return;\n            return action(...args);\n        }\n\n        const cancel = this.handlers.pushd(handler);\n        const ev = new KEventController(cancel);\n        this.cancellers.set(handler, cancel);\n        return ev;\n    }\n    addOnce(\n        action: (...args: (Args | PromiseLike<Args>)[]) => void,\n    ): KEventController {\n        const ev = this.add((...args) => {\n            ev.cancel();\n            action(...args);\n        });\n        return ev;\n    }\n    next(): Promise<Args> {\n        return new Promise((res) => this.addOnce(res));\n    }\n    trigger(...args: Args) {\n        this.handlers.forEach((action) => {\n            const result = action(...args);\n            let cancel;\n\n            if (\n                result === EVENT_CANCEL_SYMBOL\n                && (cancel = this.cancellers.get(action))\n            ) {\n                cancel();\n            }\n        });\n    }\n    numListeners(): number {\n        return this.handlers.size;\n    }\n    clear() {\n        this.handlers.clear();\n    }\n}\n\n// TODO: only accept one argument?\nexport class KEventHandler<EventMap extends Record<string, any[]>> {\n    private handlers: Partial<\n        {\n            [Name in keyof EventMap]: KEvent<EventMap[Name]>;\n        }\n    > = {};\n    registers: Partial<\n        {\n            [Name in keyof EventMap]: Registry<\n                (...args: EventMap[Name]) => void\n            >;\n        }\n    > = {};\n    on<Name extends keyof EventMap>(\n        name: Name,\n        action: (...args: EventMap[Name]) => void,\n    ): KEventController {\n        if (!this.handlers[name]) {\n            this.handlers[name] = new KEvent<EventMap[Name]>();\n        }\n        return this.handlers[name].add(action);\n    }\n    onOnce<Name extends keyof EventMap>(\n        name: Name,\n        action: (...args: EventMap[Name]) => void,\n    ): KEventController {\n        const ev = this.on(name, (...args) => {\n            ev.cancel();\n            action(...args);\n        });\n        return ev;\n    }\n    next<Name extends keyof EventMap>(name: Name): Promise<unknown> {\n        return new Promise((res) => {\n            // TODO: can only pass 1 val to resolve()\n            this.onOnce(name, (...args: EventMap[Name]) => res(args[0]));\n        });\n    }\n    trigger<Name extends keyof EventMap>(name: Name, ...args: EventMap[Name]) {\n        if (this.handlers[name]) {\n            this.handlers[name].trigger(...args);\n        }\n    }\n    remove<Name extends keyof EventMap>(name: Name) {\n        delete this.handlers[name];\n    }\n    clear() {\n        this.handlers = {};\n    }\n    numListeners<Name extends keyof EventMap>(name: Name): number {\n        return this.handlers[name]?.numListeners() ?? 0;\n    }\n}\n", "export const clamp = (\n    val: number,\n    min: number,\n    max: number,\n): number => {\n    if (min > max) {\n        return clamp(val, max, min);\n    }\n    return Math.min(Math.max(val, min), max);\n};\n", "// For using color(\"gray\"), color(\"red\")\nexport const CSS_COLOR_MAP = {\n    black: \"#000000\",\n    silver: \"#c0c0c0\",\n    gray: \"#808080\",\n    white: \"#ffffff\",\n    maroon: \"#800000\",\n    red: \"#ff0000\",\n    purple: \"#800080\",\n    fuchsia: \"#ff00ff\",\n    green: \"#008000\",\n    lime: \"#00ff00\",\n    olive: \"#808000\",\n    yellow: \"#ffff00\",\n    navy: \"#000080\",\n    blue: \"#0000ff\",\n    teal: \"#008080\",\n    aqua: \"#00ffff\",\n    aliceblue: \"#f0f8ff\",\n    antiquewhite: \"#faebd7\",\n    aquamarine: \"#7fffd4\",\n    azure: \"#f0ffff\",\n    beige: \"#f5f5dc\",\n    bisque: \"#ffe4c4\",\n    blanchedalmond: \"#ffebcd\",\n    blueviolet: \"#8a2be2\",\n    brown: \"#a52a2a\",\n    burlywood: \"#deb887\",\n    cadetblue: \"#5f9ea0\",\n    chartreuse: \"#7fff00\",\n    chocolate: \"#d2691e\",\n    coral: \"#ff7f50\",\n    cornflowerblue: \"#6495ed\",\n    cornsilk: \"#fff8dc\",\n    crimson: \"#dc143c\",\n    cyan: \"#00ffff\",\n    darkblue: \"#00008b\",\n    darkcyan: \"#008b8b\",\n    darkgoldenrod: \"#b8860b\",\n    darkgray: \"#a9a9a9\",\n    darkgreen: \"#006400\",\n    darkkhaki: \"#bdb76b\",\n    darkmagenta: \"#8b008b\",\n    darkolivegreen: \"#556b2f\",\n    darkorange: \"#ff8c00\",\n    darkorchid: \"#9932cc\",\n    darkred: \"#8b0000\",\n    darksalmon: \"#e9967a\",\n    darkseagreen: \"#8fbc8f\",\n    darkslateblue: \"#483d8b\",\n    darkslategray: \"#2f4f4f\",\n    darkturquoise: \"#00ced1\",\n    darkviolet: \"#9400d3\",\n    deeppink: \"#ff1493\",\n    deepskyblue: \"#00bfff\",\n    dimgray: \"#696969\",\n    dodgerblue: \"#1e90ff\",\n    firebrick: \"#b22222\",\n    floralwhite: \"#fffaf0\",\n    forestgreen: \"#228b22\",\n    gainsboro: \"#dcdcdc\",\n    ghostwhite: \"#f8f8ff\",\n    gold: \"#ffd700\",\n    goldenrod: \"#daa520\",\n    greenyellow: \"#adff2f\",\n    honeydew: \"#f0fff0\",\n    hotpink: \"#ff69b4\",\n    indianred: \"#cd5c5c\",\n    indigo: \"#4b0082\",\n    ivory: \"#fffff0\",\n    khaki: \"#f0e68c\",\n    lavender: \"#e6e6fa\",\n    lavenderblush: \"#fff0f5\",\n    lawngreen: \"#7cfc00\",\n    lemonchiffon: \"#fffacd\",\n    lightblue: \"#add8e6\",\n    lightcoral: \"#f08080\",\n    lightcyan: \"#e0ffff\",\n    lightgoldenrodyellow: \"#fafad2\",\n    lightgray: \"#d3d3d3\",\n    lightgreen: \"#90ee90\",\n    lightpink: \"#ffb6c1\",\n    lightsalmon: \"#ffa07a\",\n    lightseagreen: \"#20b2aa\",\n    lightskyblue: \"#87cefa\",\n    lightslategray: \"#778899\",\n    lightsteelblue: \"#b0c4de\",\n    lightyellow: \"#ffffe0\",\n    limegreen: \"#32cd32\",\n    linen: \"#faf0e6\",\n    mediumaquamarine: \"#66cdaa\",\n    mediumblue: \"#0000cd\",\n    mediumorchid: \"#ba55d3\",\n    mediumpurple: \"#9370db\",\n    mediumseagreen: \"#3cb371\",\n    mediumslateblue: \"#7b68ee\",\n    mediumspringgreen: \"#00fa9a\",\n    mediumturquoise: \"#48d1cc\",\n    mediumvioletred: \"#c71585\",\n    midnightblue: \"#191970\",\n    mintcream: \"#f5fffa\",\n    mistyrose: \"#ffe4e1\",\n    moccasin: \"#ffe4b5\",\n    navajowhite: \"#ffdead\",\n    oldlace: \"#fdf5e6\",\n    olivedrab: \"#6b8e23\",\n    orange: \"#ffa500\",\n    orangered: \"#ff4500\",\n    orchid: \"#da70d6\",\n    palegoldenrod: \"#eee8aa\",\n    palegreen: \"#98fb98\",\n    paleturquoise: \"#afeeee\",\n    palevioletred: \"#db7093\",\n    papayawhip: \"#ffefd5\",\n    peachpuff: \"#ffdab9\",\n    peru: \"#cd853f\",\n    pink: \"#ffc0cb\",\n    plum: \"#dda0dd\",\n    powderblue: \"#b0e0e6\",\n    rebeccapurple: \"#663399\",\n    rosybrown: \"#bc8f8f\",\n    royalblue: \"#4169e1\",\n    saddlebrown: \"#8b4513\",\n    salmon: \"#fa8072\",\n    sandybrown: \"#f4a460\",\n    seagreen: \"#2e8b57\",\n    seashell: \"#fff5ee\",\n    sienna: \"#a0522d\",\n    skyblue: \"#87ceeb\",\n    slateblue: \"#6a5acd\",\n    slategray: \"#708090\",\n    snow: \"#fffafa\",\n    springgreen: \"#00ff7f\",\n    steelblue: \"#4682b4\",\n    tan: \"#d2b48c\",\n    thistle: \"#d8bfd8\",\n    tomato: \"#ff6347\",\n    turquoise: \"#40e0d0\",\n    violet: \"#ee82ee\",\n    wheat: \"#f5deb3\",\n    whitesmoke: \"#f5f5f5\",\n    yellowgreen: \"#9acd32\",\n};\n", "export function lerpNumber(\n    a: number,\n    b: number,\n    t: number,\n) {\n    return a + (b - a) * t;\n}\n", "import { CSS_COLOR_MAP } from \"../constants/colorMap\";\nimport { _k } from \"../shared\";\nimport { clamp } from \"./clamp\";\nimport { lerpNumber } from \"./lerpNumber\";\n\n/**\n * @group Math\n * @subgroup Colors\n */\nexport type RGBValue = [number, number, number];\n\n/**\n * @group Math\n * @subgroup Colors\n */\nexport type RGBAValue = [number, number, number, number];\n\n/**\n * @group Math\n * @subgroup Colors\n */\nexport type CSSColorKeywords = keyof typeof CSS_COLOR_MAP;\n\n/**\n * A serialized color.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedColor {\n    r: number;\n    g: number;\n    b: number;\n}\n\n/**\n * 0-255 RGBA color.\n *\n * @group Math\n * @subgroup Colors\n */\nexport class Color {\n    /** Red (0-255. */\n    r: number = 255;\n    /** Green (0-255). */\n    g: number = 255;\n    /** Blue (0-255). */\n    b: number = 255;\n\n    constructor(r: number, g: number, b: number) {\n        this.r = clamp(r, 0, 255);\n        this.g = clamp(g, 0, 255);\n        this.b = clamp(b, 0, 255);\n    }\n\n    static fromArray(arr: [number, number, number]) {\n        return new Color(arr[0], arr[1], arr[2]);\n    }\n\n    /**\n     * Create color from hex string or literal.\n     *\n     * @example\n     * ```js\n     * Color.fromHex(0xfcef8d)\n     * Color.fromHex(\"#5ba675\")\n     * Color.fromHex(\"d46eb3\")\n     * ```\n     *\n     * @since v3000.0\n     */\n    static fromHex(hex: string | number) {\n        if (typeof hex === \"number\") {\n            return new Color(\n                (hex >> 16) & 0xff,\n                (hex >> 8) & 0xff,\n                (hex >> 0) & 0xff,\n            );\n        }\n        else if (typeof hex === \"string\") {\n            const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(\n                hex,\n            );\n\n            if (!result) throw new Error(\"Invalid hex color format\");\n\n            return new Color(\n                parseInt(result[1], 16),\n                parseInt(result[2], 16),\n                parseInt(result[3], 16),\n            );\n        }\n        else {\n            throw new Error(\"Invalid hex color format\");\n        }\n    }\n\n    // TODO: use range of [0, 360] [0, 100] [0, 100]?\n    static fromHSL(h: number, s: number, l: number) {\n        if (s == 0) {\n            return new Color(255 * l, 255 * l, 255 * l);\n        }\n\n        const hue2rgb = (p: number, q: number, t: number) => {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        const r = hue2rgb(p, q, h + 1 / 3);\n        const g = hue2rgb(p, q, h);\n        const b = hue2rgb(p, q, h - 1 / 3);\n\n        return new Color(\n            Math.round(r * 255),\n            Math.round(g * 255),\n            Math.round(b * 255),\n        );\n    }\n\n    /**\n     * Create a color from a CSS color name\n     *\n     * @param cssColor - The color name.\n     *\n     * @example\n     * ```js\n     * loadHappy();\n     *\n     * add([\n     *     rect(512, 512, {\n     *         radius: [0, 96, 96, 96]\n     *     }),\n     *     color(\"#663399\"),\n     *     pos(40, 40),\n     * ]);\n     *\n     * add([\n     *     text(\"css\", { size: 192, font: \"happy\" }),\n     *     pos(90, 310)\n     * ]);\n     * ```\n     *\n     * @static\n     * @returns The color.\n     * @experimental This feature is in experimental phase, it will be fully released in v3001.1.0\n     */\n    static fromCSS(cssColor: CSSColorKeywords) {\n        const color = CSS_COLOR_MAP[cssColor];\n        // for js users\n        if (!color) throw new Error(\"Can't use an invalid CSS color\");\n\n        return Color.fromHex(color);\n    }\n\n    static RED = new Color(255, 0, 0);\n    static GREEN = new Color(0, 255, 0);\n    static BLUE = new Color(0, 0, 255);\n    static YELLOW = new Color(255, 255, 0);\n    static MAGENTA = new Color(255, 0, 255);\n    static CYAN = new Color(0, 255, 255);\n    static WHITE = new Color(255, 255, 255);\n    static BLACK = new Color(0, 0, 0);\n\n    clone(): Color {\n        return new Color(this.r, this.g, this.b);\n    }\n\n    /** Lighten the color (adds RGB by n). */\n    lighten(a: number): Color {\n        return new Color(this.r + a, this.g + a, this.b + a);\n    }\n\n    /** Darkens the color (subtracts RGB by n). */\n    darken(a: number): Color {\n        return this.lighten(-a);\n    }\n\n    invert(): Color {\n        return new Color(255 - this.r, 255 - this.g, 255 - this.b);\n    }\n\n    mult(other: Color): Color {\n        return new Color(\n            this.r * other.r / 255,\n            this.g * other.g / 255,\n            this.b * other.b / 255,\n        );\n    }\n\n    /**\n     * Linear interpolate to a destination color.\n     *\n     * @since v3000.0\n     */\n    lerp(dest: Color, t: number): Color {\n        return new Color(\n            lerpNumber(this.r, dest.r, t),\n            lerpNumber(this.g, dest.g, t),\n            lerpNumber(this.b, dest.b, t),\n        );\n    }\n\n    /**\n     * Convert color into HSL format.\n     *\n     * @since v3001.0\n     */\n    toHSL(): [number, number, number] {\n        const r = this.r / 255;\n        const g = this.g / 255;\n        const b = this.b / 255;\n        const max = Math.max(r, g, b), min = Math.min(r, g, b);\n        let h = (max + min) / 2;\n        let s = h;\n        const l = h;\n        if (max == min) {\n            h = s = 0;\n        }\n        else {\n            const d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n            h /= 6;\n        }\n        return [h, s, l];\n    }\n\n    eq(other: Color): boolean {\n        return this.r === other.r\n            && this.g === other.g\n            && this.b === other.b;\n    }\n\n    toString(): string {\n        return `rgb(${this.r}, ${this.g}, ${this.b})`;\n    }\n\n    /**\n     * Return the hex string of color.\n     *\n     * @since v3000.0\n     */\n    toHex(): string {\n        return \"#\"\n            + ((1 << 24) + (this.r << 16) + (this.g << 8) + this.b).toString(16)\n                .slice(1);\n    }\n\n    /**\n     * Return the color converted to an array.\n     *\n     * @since v3001.0\n     */\n    toArray(): Array<number> {\n        return [this.r, this.g, this.b];\n    }\n\n    serialize(): { r: number; g: number; b: number } {\n        return { r: this.r, g: this.g, b: this.b };\n    }\n\n    static deserialize(data: { r: number; g: number; b: number }): Color {\n        return new Color(data.r, data.g, data.b);\n    }\n}\n\n/**\n * Possible color arguments for various functions.\n *\n * @group Math\n * @subgroup Colors\n */\nexport type ColorArgs =\n    // rgb(new Color(255, 255, 255))\n    | [Color]\n    /**\n     * rgb(new Color(255, 255, 255), 1)\n     *\n     * This is only used to parse directly the color of background. This\n     * syntax shouldn't be used to set opacity. Use `opacity()` comp instead.\n     */\n    | [Color, number]\n    // rgb(255, 255, 255)\n    | RGBValue\n    /**\n     * rgb(255, 255, 255, 1)\n     *\n     * This is only used to parse directly the color of background. This\n     * syntax shouldn't be used to set opacity. Use `opacity()` comp instead.\n     */\n    | RGBAValue\n    // rgb(\"#ffffff\")\n    | [string]\n    | [number[]]\n    | []\n    | [CSSColorKeywords & (string & {})]\n    | [number];\n\nexport function rgb(...args: ColorArgs): Color {\n    if (args.length === 0) {\n        return new Color(255, 255, 255);\n    }\n    else if (args.length === 1) {\n        const cl = args[0];\n\n        if (cl instanceof Color) {\n            // rgb(new Color(255, 255, 255))\n            return cl.clone();\n        }\n        else if (typeof cl === \"string\") {\n            if (cl[0] != \"#\" && CSS_COLOR_MAP[cl as CSSColorKeywords]) {\n                return Color.fromCSS(cl as CSSColorKeywords);\n            }\n\n            return Color.fromHex(args[0]);\n        }\n        else if (typeof cl === \"number\") {\n            return Color.fromHex(cl);\n        }\n        else if (Array.isArray(args[0]) && args[0].length === 3) {\n            // rgb([255, 255, 255])\n            return Color.fromArray(args[0] as [number, number, number]);\n        }\n    }\n    else if (args.length === 2) {\n        if (args[0] instanceof Color) {\n            return args[0].clone();\n        }\n    }\n    else if (args.length === 3 || args.length === 4) {\n        return new Color(args[0], args[1], args[2]);\n    }\n\n    throw new Error(\"Invalid color arguments\");\n}\n\nexport const hsl2rgb = (h: number, s: number, l: number) =>\n    Color.fromHSL(h, s, l);\n", "import { _k } from \"../shared\";\nimport { lerpNumber } from \"./lerpNumber\";\nimport type { Mat4 } from \"./Mat4\";\nimport { deg2rad, rad2deg, Rect, vec2, type Vec2Args } from \"./math\";\n\n/**\n * A serialized 2d vector.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedVec2 {\n    x: number;\n    y: number;\n}\n\n/**\n * A 2D vector.\n *\n * @group Math\n */\nexport class Vec2 {\n    /** The x coordinate */\n    x: number = 0;\n    /** The y coordinate */\n    y: number = 0;\n\n    constructor(x: number = 0, y: number = x) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /** Set the X and Y of this vector */\n    set(x: number, y: number): Vec2 {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n    /** Create a new Vec2 from an angle in degrees */\n    static fromAngle(deg: number) {\n        const angle = deg2rad(deg);\n        return new Vec2(Math.cos(angle), Math.sin(angle));\n    }\n\n    /** Create a new Vec2 from an array */\n    static fromArray(arr: Array<number>) {\n        return new Vec2(arr[0], arr[1]);\n    }\n\n    /** An empty vector. (0, 0) */\n    static ZERO = new Vec2(0, 0);\n    /** A vector with both components of 1. (1, 1) */\n    static ONE = new Vec2(1, 1);\n    /** A vector signaling to the left. (-1, 0) */\n    static LEFT = new Vec2(-1, 0);\n    /** A vector signaling to the right. (1, 0) */\n    static RIGHT = new Vec2(1, 0);\n    /** A vector signaling up. (0, -1) */\n    static UP = new Vec2(0, -1);\n    /** A vector signaling down. (0, 1) */\n    static DOWN = new Vec2(0, 1);\n\n    /** Closest orthogonal direction: LEFT, RIGHT, UP, or DOWN */\n    toAxis(): Vec2 {\n        return Math.abs(this.x) > Math.abs(this.y)\n            ? this.x < 0 ? Vec2.LEFT : Vec2.RIGHT\n            : this.y < 0\n            ? Vec2.UP\n            : Vec2.DOWN;\n    }\n\n    /** Clone the vector */\n    clone(): Vec2 {\n        return new Vec2(this.x, this.y);\n    }\n\n    static copy(v: Vec2, out: Vec2): Vec2 {\n        out.x = v.x;\n        out.y = v.y;\n        return out;\n    }\n\n    /** Returns the sum with another vector. */\n    add(...args: Vec2Args): Vec2 {\n        const p2 = vec2(...args);\n        return new Vec2(this.x + p2.x, this.y + p2.y);\n    }\n\n    static addScaled(v: Vec2, other: Vec2, s: number, out: Vec2): Vec2 {\n        out.x = v.x + other.x * s;\n        out.y = v.y + other.y * s;\n        return out;\n    }\n\n    /**\n     * Calculates the sum of the vectors\n     * @param v - The first term\n     * @param x - The x of the second term\n     * @param y - The y of the second term\n     * @param out - The vector sum\n     *\n     * @returns The sum of the vectors\n     */\n    static addc(v: Vec2, x: number, y: number, out: Vec2): Vec2 {\n        out.x = v.x + x;\n        out.y = v.y + y;\n        return out;\n    }\n\n    /**\n     * Calculates the sum of the vectors\n     * @param v - The first term\n     * @param other - The second term\n     * @param out - The vector sum\n     *\n     * @returns The sum of the vectors\n     */\n    static add(v: Vec2, other: Vec2, out: Vec2): Vec2 {\n        out.x = v.x + other.x;\n        out.y = v.y + other.y;\n        return out;\n    }\n\n    /** Returns the difference with another vector. */\n    sub(...args: Vec2Args): Vec2 {\n        const p2 = vec2(...args);\n        return new Vec2(this.x - p2.x, this.y - p2.y);\n    }\n\n    /**\n     * Calculates the difference of the vectors\n     * @param v - The first term\n     * @param x - The x of the second term\n     * @param y - The y of the second term\n     * @param out - The vector difference\n     *\n     * @returns The difference of the vectors\n     */\n    static subc(v: Vec2, x: number, y: number, out: Vec2): Vec2 {\n        out.x = v.x - x;\n        out.y = v.y - y;\n        return out;\n    }\n\n    /**\n     * Calculates the difference of the vectors\n     * @param v - The first term\n     * @param other - The second term\n     * @param out - The vector difference\n     *\n     * @returns The difference of the vectors\n     */\n    static sub(v: Vec2, other: Vec2, out: Vec2): Vec2 {\n        out.x = v.x - other.x;\n        out.y = v.y - other.y;\n        return out;\n    }\n\n    /** Scale by another vector. or a single number */\n    scale(...args: Vec2Args): Vec2 {\n        const s = vec2(...args);\n        return new Vec2(this.x * s.x, this.y * s.y);\n    }\n\n    /**\n     * Calculates the scale of the vector\n     * @param v - The vector\n     * @param x - The x scale\n     * @param y - The y scale\n     * @param out - The scaled vector\n     *\n     * @returns The scale of the vector\n     */\n    static scale(v: Vec2, s: number, out: Vec2): Vec2 {\n        out.x = v.x * s;\n        out.y = v.y * s;\n        return out;\n    }\n\n    /**\n     * Calculates the scale of the vector\n     * @param v - The vector\n     * @param x - The x scale\n     * @param y - The y scale\n     * @param out - The scaled vector\n     *\n     * @returns The scale of the vector\n     */\n    static scalec(v: Vec2, x: number, y: number, out: Vec2): Vec2 {\n        out.x = v.x * x;\n        out.y = v.y * y;\n        return out;\n    }\n\n    /**\n     * Calculates the scale of the vector\n     * @param v - The vector\n     * @param other - The scale\n     * @param out - The scaled vector\n     *\n     * @returns The scale of the vector\n     */\n    static scalev(v: Vec2, other: Vec2, out: Vec2): Vec2 {\n        out.x = v.x * other.x;\n        out.y = v.y * other.y;\n        return out;\n    }\n\n    /** Scale by the inverse of another vector. or a single number */\n    invScale(...args: Vec2Args): Vec2 {\n        const s = vec2(...args);\n        return new Vec2(this.x / s.x, this.y / s.y);\n    }\n\n    /** Get distance between another vector */\n    dist(...args: Vec2Args): number {\n        const p2 = vec2(...args);\n        return this.sub(p2).len();\n    }\n\n    /**\n     * Calculates the distance between the vectors\n     * @param v - The vector\n     * @param other - The other vector\n     *\n     * @returns The between the vectors\n     */\n    static dist(v: Vec2, other: Vec2): number {\n        const x = v.x - other.x;\n        const y = v.y - other.y;\n        return Math.sqrt(x * x + y * y);\n    }\n\n    /** Get squared distance between another vector */\n    sdist(...args: Vec2Args): number {\n        const p2 = vec2(...args);\n        return this.sub(p2).slen();\n    }\n\n    /**\n     * Calculates the squared distance between the vectors\n     * @param v - The vector\n     * @param other - The other vector\n     *\n     * @returns The distance between the vectors\n     */\n    static sdist(v: Vec2, other: Vec2): number {\n        const x = v.x - other.x;\n        const y = v.y - other.y;\n        return x * x + y * y;\n    }\n\n    /**\n     * Get length of the vector\n     *\n     * @since v3000.0\n     */\n    len(): number {\n        return Math.sqrt(this.dot(this));\n    }\n\n    /**\n     * Calculates the length of the vector\n     * @param v - The vector\n     *\n     * @returns The length of the vector\n     */\n    static len(v: Vec2) {\n        return Math.sqrt(v.x * v.x + v.y * v.y);\n    }\n\n    /**\n     * Get squared length of the vector\n     *\n     * @since v3000.0\n     */\n    slen(): number {\n        return this.dot(this);\n    }\n\n    /**\n     * Calculates the squared length of the vector\n     * @param v - The vector\n     *\n     * @returns The squared length of the vector\n     */\n    static slen(v: Vec2) {\n        return v.x * v.x + v.y * v.y;\n    }\n\n    /**\n     * Get the unit vector (length of 1).\n     */\n    unit(): Vec2 {\n        const len = this.len();\n        return len === 0 ? new Vec2(0) : this.scale(1 / len);\n    }\n\n    static unit(v: Vec2, out: Vec2): Vec2 {\n        const len = Vec2.len(v);\n        if (len === 0) {\n            out.x = 0;\n            out.y = 0;\n            return out;\n        }\n        out.x = v.x / len;\n        out.y = v.y / len;\n        return out;\n    }\n\n    /**\n     * Get the perpendicular vector.\n     */\n    normal(): Vec2 {\n        return new Vec2(this.y, -this.x);\n    }\n\n    static normal(v: Vec2, out: Vec2): Vec2 {\n        out.x = v.y;\n        out.y = -v.x;\n        return out;\n    }\n\n    /**\n     * Get the reflection of a vector with a normal.\n     *\n     * @since v3000.0\n     */\n    reflect(normal: Vec2) {\n        return this.sub(normal.scale(2 * this.dot(normal)));\n    }\n\n    /**\n     * Get the projection of a vector onto another vector.\n     *\n     * @since v3000.0\n     */\n    project(on: Vec2) {\n        return on.scale(on.dot(this) / on.len());\n    }\n\n    /**\n     * Get the rejection of a vector onto another vector.\n     *\n     * @since v3000.0\n     */\n    reject(on: Vec2) {\n        return this.sub(this.project(on));\n    }\n\n    rotate(vecOrAngle: Vec2 | number) {\n        if (vecOrAngle instanceof Vec2) {\n            return new Vec2(\n                this.x * vecOrAngle.x - this.y * vecOrAngle.y,\n                this.x * vecOrAngle.y + this.y * vecOrAngle.x,\n            );\n        }\n        else {\n            const angle = deg2rad(vecOrAngle);\n            const c = Math.cos(angle);\n            const s = Math.sin(angle);\n            return new Vec2(\n                this.x * c - this.y * s,\n                this.x * s + this.y * c,\n            );\n        }\n    }\n\n    /**\n     * Calculates the rotated vector\n     * @param v - The vector\n     * @param dir - The rotation vector\n     * @param out - The rotated vector\n     *\n     * @returns The rotated vector\n     */\n    static rotate(v: Vec2, dir: Vec2, out: Vec2): Vec2 {\n        const tmp = v.x;\n        out.x = v.x * dir.x - v.y * dir.y;\n        out.y = tmp * dir.y + v.y * dir.x;\n        return out;\n    }\n\n    /**\n     * Calculates the rotated vector\n     * @param v - The vector\n     * @param angle - The angle in radians\n     * @param out - The rotated vector\n     *\n     * @returns The rotated vector\n     */\n    static rotateByAngle(v: Vec2, angle: number, out: Vec2): Vec2 {\n        const c = Math.cos(angle);\n        const s = Math.sin(angle);\n        const tmp = v.x;\n        out.x = v.x * c - v.y * s;\n        out.y = tmp * s + v.y * c;\n        return out;\n    }\n\n    invRotate(vecOrAngle: Vec2 | number) {\n        if (vecOrAngle instanceof Vec2) {\n            return this.rotate(new Vec2(vecOrAngle.x, -vecOrAngle.y));\n        }\n        else {\n            return this.rotate(-vecOrAngle);\n        }\n    }\n\n    /**\n     * Calculates the inverse rotated vector\n     * @param v - The vector\n     * @param dir - The rotation vector\n     * @param out - The rotated vector\n     *\n     * @returns The rotated vector\n     */\n    static inverseRotate(v: Vec2, dir: Vec2, out: Vec2): Vec2 {\n        const tmp = v.x;\n        out.x = v.x * dir.x + v.y * dir.y;\n        out.y = -tmp * dir.y + v.y * dir.x;\n        return out;\n    }\n\n    /**\n     * Get the dot product with another vector.\n     */\n    dot(p2: Vec2): number {\n        return this.x * p2.x + this.y * p2.y;\n    }\n\n    /**\n     * Get the dot product between 2 vectors.\n     *\n     * @since v3000.0\n     */\n    static dot(v: Vec2, other: Vec2): number {\n        return v.x * other.x + v.y * other.y;\n    }\n\n    /**\n     * Get the cross product with another vector.\n     *\n     * @since v3000.0\n     */\n    cross(p2: Vec2): number {\n        return this.x * p2.y - this.y * p2.x;\n    }\n\n    /**\n     * Get the cross product between 2 vectors.\n     *\n     * @since v3000.0\n     */\n    static cross(v: Vec2, other: Vec2): number {\n        return v.x * other.y - v.y * other.x;\n    }\n\n    /**\n     * Get the angle of the vector in degrees.\n     */\n    angle(...args: Vec2Args): number {\n        const p2 = vec2(...args);\n        return rad2deg(Math.atan2(this.y - p2.y, this.x - p2.x));\n    }\n\n    /**\n     * Calculates the angle represented by the vector in radians\n     * @param v - The vector\n     *\n     * @returns Angle represented by the vector in radians\n     */\n    static toAngle(v: Vec2) {\n        return Math.atan2(v.y, v.x);\n    }\n\n    /**\n     * Get the angle between this vector and another vector.\n     *\n     * @since v3000.0\n     */\n    angleBetween(...args: Vec2Args): number {\n        const p2 = vec2(...args);\n        return rad2deg(Math.atan2(this.cross(p2), this.dot(p2)));\n    }\n\n    /**\n     * Calculates the angle between the vectors in radians\n     * @param v - First vector\n     * @param other - Second vector\n     *\n     * @returns Angle between the vectors in radians\n     */\n    static angleBetween(v: Vec2, other: Vec2) {\n        return Math.atan2(Vec2.cross(v, other), Vec2.dot(v, other));\n    }\n\n    /**\n     * Linear interpolate to a destination vector (for positions).\n     */\n    lerp(dest: Vec2, t: number): Vec2 {\n        return new Vec2(\n            lerpNumber(this.x, dest.x, t),\n            lerpNumber(this.y, dest.y, t),\n        );\n    }\n\n    /**\n     * Linear interpolate src and dst by t\n     * @param src - First vector\n     * @param dst - Second vector\n     * @param t - Percentage\n     * @param out - The linear interpolation between src and dst by t\n     *\n     * @returns The linear interpolation between src and dst by t\n     */\n    static lerp(src: Vec2, dst: Vec2, t: number, out: Vec2): Vec2 {\n        out.x = src.x * (dst.x - src.x) * t;\n        out.y = src.y * (dst.y - src.y) * t;\n        return out;\n    }\n\n    /**\n     * Spherical linear interpolate to a destination vector (for rotations).\n     *\n     * @since v3000.0\n     */\n    slerp(dest: Vec2, t: number): Vec2 {\n        const cos = this.dot(dest);\n        const sin = this.cross(dest);\n        const angle = Math.atan2(sin, cos);\n        return this\n            .scale(Math.sin((1 - t) * angle))\n            .add(dest.scale(Math.sin(t * angle)))\n            .scale(1 / sin);\n    }\n\n    /**\n     * Spherical interpolate src and dst by t\n     * @param src - First vector\n     * @param dst - Second vector\n     * @param t - Percentage\n     * @param out - The spherical interpolation between src and dst by t\n     *\n     * @returns The spherical interpolation between src and dst by t\n     */\n    static slerp(src: Vec2, dst: Vec2, t: number, out: Vec2): Vec2 {\n        const cos = Vec2.dot(src, dst);\n        const sin = Vec2.cross(src, dst);\n        const angle = Math.atan2(sin, cos);\n        const t1 = Math.sin((1 - t) * angle);\n        const t2 = Math.sin(t * angle);\n        const invSin = 1 / sin;\n        out.x = (src.x * t1 + dst.x * t2) * invSin;\n        out.y = (src.y * t1 + dst.y * t2) * invSin;\n        return out;\n    }\n\n    /**\n     * If the vector (x, y) is zero.\n     *\n     * @since v3000.0\n     */\n    isZero(): boolean {\n        return this.x === 0 && this.y === 0;\n    }\n\n    /**\n     * To n precision floating point.\n     */\n    toFixed(n: number): Vec2 {\n        return new Vec2(Number(this.x.toFixed(n)), Number(this.y.toFixed(n)));\n    }\n\n    /**\n     * Multiply by a Mat4.\n     *\n     * @since v3000.0\n     */\n    transform(m: Mat4): Vec2 {\n        return m.multVec2(this);\n    }\n\n    /**\n     * See if one vector is equal to another.\n     *\n     * @since v3000.0\n     */\n    eq(other: Vec2): boolean {\n        return this.x === other.x && this.y === other.y;\n    }\n\n    /** Converts the vector to a {@link Rect `Rect()`} with the vector as the origin.\n     * @since v3000.0.\n     */\n    bbox(): Rect {\n        return new Rect(this, 0, 0);\n    }\n\n    /** Converts the vector to a readable string. */\n    toString(): string {\n        return `vec2(${this.x.toFixed(2)}, ${this.y.toFixed(2)})`;\n    }\n\n    /** Converts the vector to an array.\n     * @since v3001.0\n     */\n    toArray(): Array<number> {\n        return [this.x, this.y];\n    }\n\n    serialize(): SerializedVec2 {\n        return { x: this.x, y: this.y };\n    }\n\n    static deserialize(data: SerializedVec2): Vec2 {\n        return vec2(data.x, data.y);\n    }\n}\n", "import { Color } from \"./color\";\nimport { Vec2 } from \"./Vec2\";\n\n/**\n * A valid value for lerp.\n *\n * @group Math\n * @subgroup Tween\n */\nexport type LerpValue = number | Vec2 | Color;\n\nexport function lerp<V extends LerpValue>(\n    a: V,\n    b: V,\n    t: number,\n): V {\n    if (typeof a === \"number\" && typeof b === \"number\") {\n        // we don't call lerpNumber just for performance, but should be the same\n        return a + (b - a) * t as V;\n    }\n    // check for Vec2\n    else if (a instanceof Vec2 && b instanceof Vec2) {\n        return a.lerp(b, t) as V;\n    }\n    else if (a instanceof Color && b instanceof Color) {\n        return a.lerp(b, t) as V;\n    }\n\n    throw new Error(\n        `Bad value for lerp(): ${a}, ${b}. Only number, Vec2 and Color is supported.`,\n    );\n}\n", "// TODO: A lot\n// - move RNG to it's own file\n// - move Vec2 to it's own file\n\nimport { _k } from \"../shared\";\nimport type { GameObj, RNGValue, Shape } from \"../types\";\nimport { clamp } from \"./clamp\";\nimport { Color, rgb } from \"./color\";\nimport { lerp, type LerpValue } from \"./lerp\";\nimport { Vec2 } from \"./Vec2\";\n\n/**\n * Possible arguments for a Vec2.\n *\n * @group Math\n * @subgroup Vectors\n */\nexport type Vec2Args =\n    | [number, number]\n    | [number]\n    | [Vec2]\n    | [number | Vec2]\n    | [];\n\nexport function deg2rad(deg: number): number {\n    return deg * Math.PI / 180;\n}\n\nexport function rad2deg(rad: number): number {\n    return rad * 180 / Math.PI;\n}\n\nexport function map(\n    v: number,\n    l1: number,\n    h1: number,\n    l2: number,\n    h2: number,\n): number {\n    return l2 + (v - l1) / (h1 - l1) * (h2 - l2);\n}\n\nexport function mapc(\n    v: number,\n    l1: number,\n    h1: number,\n    l2: number,\n    h2: number,\n): number {\n    return clamp(map(v, l1, h1, l2, h2), l2, h2);\n}\n\nexport function step(edge: number, x: number) {\n    return x < edge ? 0 : 1;\n}\n\nexport function smoothstep(edge0: number, edge1: number, x: number) {\n    x = clamp((x - edge0) / (edge1 - edge0), 0, 1);\n    return x * x * (3.0 - 2.0 * x);\n}\n\nexport function vec2(...args: Vec2Args): Vec2 {\n    if (args.length === 1) {\n        if (args[0] instanceof Vec2) {\n            return new Vec2(args[0].x, args[0].y);\n        }\n        else if (Array.isArray(args[0]) && args[0].length === 2) {\n            return new Vec2(...args[0]);\n        }\n    }\n    // @ts-ignore\n    return new Vec2(...args);\n}\n\n/**\n * @group Math\n * @subgroup Advanced\n */\nexport class Quad {\n    x: number = 0;\n    y: number = 0;\n    w: number = 1;\n    h: number = 1;\n    constructor(x: number, y: number, w: number, h: number) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n    }\n    scale(other: Quad): Quad {\n        return new Quad(\n            this.x + this.w * other.x,\n            this.y + this.h * other.y,\n            this.w * other.w,\n            this.h * other.h,\n        );\n    }\n    pos() {\n        return new Vec2(this.x, this.y);\n    }\n    clone(): Quad {\n        return new Quad(this.x, this.y, this.w, this.h);\n    }\n    eq(other: Quad): boolean {\n        return this.x === other.x\n            && this.y === other.y\n            && this.w === other.w\n            && this.h === other.h;\n    }\n    toString(): string {\n        return `quad(${this.x}, ${this.y}, ${this.w}, ${this.h})`;\n    }\n}\n\nexport function quad(x: number, y: number, w: number, h: number): Quad {\n    return new Quad(x, y, w, h);\n}\n\n/**\n * @group Math\n * @subgroup Advanced\n */\nexport class Mat2 {\n    // 2x2 matrix\n    a: number;\n    b: number;\n    c: number;\n    d: number;\n\n    constructor(a: number, b: number, c: number, d: number) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n    }\n\n    mul(other: Mat2) {\n        return new Mat2(\n            this.a * other.a + this.b * other.c,\n            this.a * other.b + this.b * other.d,\n            this.c * other.a + this.d * other.c,\n            this.c * other.b + this.d * other.d,\n        );\n    }\n\n    transform(point: Vec2): Vec2 {\n        return vec2(\n            this.a * point.x + this.b * point.y,\n            this.c * point.x + this.d * point.y,\n        );\n    }\n\n    get inverse() {\n        const det = this.det;\n        return new Mat2(\n            this.d / det,\n            -this.b / det,\n            -this.c / det,\n            this.a / det,\n        );\n    }\n\n    get transpose() {\n        return new Mat2(\n            this.a,\n            this.c,\n            this.b,\n            this.d,\n        );\n    }\n\n    get eigenvalues() {\n        const m = this.trace / 2;\n        const d = this.det;\n        const e1 = m + Math.sqrt(m * m - d);\n        const e2 = m - Math.sqrt(m * m - d);\n        return [e1, e2];\n    }\n\n    eigenvectors(e1: number, e2: number) {\n        if (this.c != 0) {\n            return [[e1 - this.d, this.c], [e2 - this.d, this.c]];\n        }\n        else if (this.b != 0) {\n            return [[this.b, e1 - this.a], [this.b, e2 - this.a]];\n        }\n        else {\n            if (Math.abs(this.transform(vec2(1, 0)).x - e1) < Number.EPSILON) {\n                return [[1, 0], [0, 1]];\n            }\n            else {\n                return [[0, 1], [1, 0]];\n            }\n        }\n    }\n\n    get det() {\n        return this.a * this.d - this.b * this.c;\n    }\n\n    get trace() {\n        return this.a + this.d;\n    }\n\n    static rotation(radians: number) {\n        const c = Math.cos(radians);\n        const s = Math.sin(radians);\n        return new Mat2(\n            c,\n            s,\n            -s,\n            c,\n        );\n    }\n\n    static scale(x: number, y: number) {\n        return new Mat2(x, 0, 0, y);\n    }\n}\n\nexport class Mat23 {\n    // 2x3 matrix, 2 rows and 3 columns, since the last row is always (0, 0, 1)\n    // | a c e |\n    // | b d f |\n    // | 0 0 1 |\n    // Actually would like a Mat2 + Vec2, but that would be 3 objects for 1 matrix\n    a: number;\n    b: number;\n    c: number;\n    d: number;\n    e: number;\n    f: number;\n    _inverse: Mat23 | null = null;\n    constructor(\n        a: number = 1,\n        b: number = 0,\n        c: number = 0,\n        d: number = 1,\n        e: number = 0,\n        f: number = 0,\n    ) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.e = e;\n        this.f = f;\n    }\n    static fromMat2(m: Mat2) {\n        return new Mat23(\n            m.a,\n            m.b,\n            m.c,\n            m.d,\n            0,\n            0,\n        );\n    }\n    toMat2() {\n        return new Mat2(\n            this.a,\n            this.b,\n            this.c,\n            this.d,\n        );\n    }\n    // | 1 0 x |\n    // | 0 1 y |\n    // | 0 0 1 |\n    static fromTranslation(t: Vec2) {\n        return new Mat23(\n            1,\n            0,\n            0,\n            1,\n            t.x,\n            t.y,\n        );\n    }\n    // | c -s 0 |\n    // | s  c 0 |\n    // | 0 0 1 |\n    static fromRotation(radians: number) {\n        const c = Math.cos(radians);\n        const s = Math.sin(radians);\n        return new Mat23(\n            c,\n            s,\n            -s,\n            c,\n            0,\n            0,\n        );\n    }\n    // | x 0 0 |\n    // | 0 y 0 |\n    // | 0 0 1 |\n    static fromScale(s: Vec2): Mat23 {\n        return new Mat23(\n            s.x,\n            0,\n            0,\n            s.y,\n            0,\n            0,\n        );\n    }\n    // | 1 x 0 |\n    // | y 1 0 |\n    // | 0 0 1 |\n    static fromSkew(s: Vec2): Mat23 {\n        const x = Math.tan(s.x);\n        const y = Math.tan(s.y);\n        return new Mat23(\n            1,\n            y,\n            x,\n            1,\n            0,\n            0,\n        );\n    }\n    clone() {\n        return new Mat23(\n            this.a,\n            this.b,\n            this.c,\n            this.d,\n            this.e,\n            this.f,\n        );\n    }\n    setMat23(m: Mat23) {\n        this.a = m.a;\n        this.b = m.b;\n        this.c = m.c;\n        this.d = m.d;\n        this.e = m.e;\n        this.f = m.f;\n        this._inverse = m._inverse;\n        return this;\n    }\n    // | 1 0 0 |\n    // | 0 1 0 |\n    // | 0 0 1 |\n    setIdentity() {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.e = 0;\n        this.f = 0;\n        this._inverse = null;\n        return this;\n    }\n    setTRS(x: number, y: number, angle: number, sx: number, sy: number) {\n        const radians = angle * Math.PI / 180;\n        const c = Math.cos(radians);\n        const s = Math.sin(radians);\n        this.a = c * sx;\n        this.b = s * sx;\n        this.c = -s * sy;\n        this.d = c * sy;\n        this.e = x;\n        this.f = y;\n    }\n    mul(other: Mat23): Mat23 {\n        return new Mat23(\n            other.a * this.a + other.b * this.c,\n            other.a * this.b + other.b * this.d,\n            other.c * this.a + other.d * this.c,\n            other.c * this.b + other.d * this.d,\n            other.e * this.a + other.f * this.c + this.e,\n            other.e * this.b + other.f * this.d + this.f,\n        );\n    }\n    // | a c e |   | 1 0 x |\n    // | b d f | * | 0 1 y |\n    // | 0 0 1 |   | 0 0 1 |\n    translateSelfV(t: Vec2): Mat23 {\n        this.e += t.x * this.a + t.y * this.c;\n        this.f += t.x * this.b + t.y * this.d;\n        this._inverse = null;\n        return this;\n    }\n    // | a c e |   | 1 0 x |\n    // | b d f | * | 0 1 y |\n    // | 0 0 1 |   | 0 0 1 |\n    translateSelf(x: number, y: number): Mat23 {\n        this.e += x * this.a + y * this.c;\n        this.f += x * this.b + y * this.d;\n        this._inverse = null;\n        return this;\n    }\n    // | a c e |   | c -s 0 |\n    // | b d f | * | s  c 0 |\n    // | 0 0 1 |   | 0  0 1 |\n    rotateSelf(degrees: number): Mat23 {\n        const radians = deg2rad(degrees);\n        const c = Math.cos(radians);\n        const s = Math.sin(radians);\n        const oldA = this.a;\n        const oldB = this.b;\n        this.a = c * this.a + s * this.c;\n        this.b = c * this.b + s * this.d;\n        this.c = c * this.c - s * oldA;\n        this.d = c * this.d - s * oldB;\n        this._inverse = null;\n        return this;\n    }\n    // | a c e |   | x 0 0 |\n    // | b d f | * | 0 y 0 |\n    // | 0 0 1 |   | 0 0 1 |\n    scaleSelfV(s: Vec2): Mat23 {\n        this.a *= s.x;\n        this.b *= s.x;\n        this.c *= s.y;\n        this.d *= s.y;\n        this._inverse = null;\n        return this;\n    }\n    // | a c e |   | x 0 0 |\n    // | b d f | * | 0 y 0 |\n    // | 0 0 1 |   | 0 0 1 |\n    scaleSelf(x: number, y: number): Mat23 {\n        this.a *= x;\n        this.b *= x;\n        this.c *= y;\n        this.d *= y;\n        this._inverse = null;\n        return this;\n    }\n    // | a c e |   | 1 x 0 |\n    // | b d f | * | y 1 0 |\n    // | 0 0 1 |   | 0 0 1 |\n    skewSelfV(s: Vec2): Mat23 {\n        const x = Math.tan(deg2rad(s.x));\n        const y = Math.tan(deg2rad(s.y));\n        const oldA = this.a;\n        const oldB = this.b;\n        this.a += this.c * y;\n        this.b += this.d * y;\n        this.c += oldA * x;\n        this.d += oldB * x;\n        this._inverse = null;\n        return this;\n    }\n    // | a c e |   | 1 x 0 |\n    // | b d f | * | y 1 0 |\n    // | 0 0 1 |   | 0 0 1 |\n    skewSelf(x: number, y: number): Mat23 {\n        x = Math.tan(deg2rad(x));\n        y = Math.tan(deg2rad(y));\n        const oldA = this.a;\n        const oldB = this.b;\n        this.a += this.c * y;\n        this.b += this.d * y;\n        this.c += oldA * x;\n        this.d += oldB * x;\n        this._inverse = null;\n        return this;\n    }\n    mulSelf(other: Mat23): Mat23 {\n        const a = other.a * this.a + other.b * this.c;\n        const b = other.a * this.b + other.b * this.d;\n        const c = other.c * this.a + other.d * this.c;\n        const d = other.c * this.b + other.d * this.d;\n        const e = other.e * this.a + other.f * this.c + this.e;\n        const f = other.e * this.b + other.f * this.d + this.f;\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.e = e;\n        this.f = f;\n        this._inverse = null;\n        return this;\n    }\n    // | a c e |   | x |\n    // | b d f | * | y |\n    // | 0 0 1 |   | 1 |\n    transform(p: Vec2) {\n        return vec2(\n            this.a * p.x + this.c * p.y + this.e,\n            this.b * p.x + this.d * p.y + this.f,\n        );\n    }\n    // | a c e |   | x |\n    // | b d f | * | y |\n    // | 0 0 1 |   | 1 |\n    transformPointV(p: Vec2, o: Vec2): Vec2 {\n        const tmp = p.x;\n        o.x = this.a * p.x + this.c * p.y + this.e;\n        o.y = this.b * tmp + this.d * p.y + this.f;\n        return o;\n    }\n    // | a c e |   | x |\n    // | b d f | * | y |\n    // | 0 0 1 |   | 0 |\n    transformVectorV(v: Vec2, o: Vec2): Vec2 {\n        const tmp = v.x;\n        o.x = this.a * v.x + this.c * v.y;\n        o.y = this.b * tmp + this.d * v.y;\n        return o;\n    }\n    // | a c e |   | x |\n    // | b d f | * | y |\n    // | 0 0 1 |   | 1 |\n    transformPoint(x: number, y: number, o: Vec2): Vec2 {\n        const tmp = x;\n        o.x = this.a * x + this.c * y + this.e;\n        o.y = this.b * tmp + this.d * y + this.f;\n        return o;\n    }\n    // | a c e |   | x |\n    // | b d f | * | y |\n    // | 0 0 1 |   | 0 |\n    transformVector(x: number, y: number, o: Vec2): Vec2 {\n        const tmp = x;\n        o.x = this.a * x + this.c * y;\n        o.y = this.b * tmp + this.d * y;\n        return o;\n    }\n\n    get det() {\n        return this.a * this.d - this.b * this.c;\n    }\n\n    get inverse() {\n        if (this._inverse) return this._inverse;\n        const det = this.det;\n        this._inverse = new Mat23(\n            this.d / det,\n            -this.b / det,\n            -this.c / det,\n            this.a / det,\n            (this.c * this.f - this.d * this.e) / det,\n            (this.b * this.e - this.a * this.f) / det,\n        );\n        return this._inverse;\n    }\n    // The translation is directly accessible\n    getTranslation() {\n        return new Vec2(this.e, this.f);\n    }\n    // Using atan2(y, x) = angle\n    // since a = sx * cos(angle)\n    //       b = sx * sin(angle)\n    // and atan2 does y / x, thus sx is eliminated\n    getRotation() {\n        if (this.a || this.b) {\n            return rad2deg(\n                Math.atan2(this.b, this.a),\n            );\n        }\n        else {\n            return 90 - rad2deg(\n                Math.atan2(this.d, this.c),\n            );\n        }\n    }\n    // Using cos^2 + sin^2 = 1, thus sqrt(a^2 + b^2) contains the scale\n    // since a = sx * cos(angle)\n    //       b = sx * sin(angle)\n    getScale() {\n        return new Vec2(\n            Math.sqrt(this.a * this.a + this.b * this.b),\n            Math.sqrt(this.c * this.c + this.d * this.d),\n        );\n    }\n    getSkew() {\n        if (this.a || this.b) {\n            return new Vec2(\n                rad2deg(\n                    Math.atan2(\n                        this.a * this.c + this.b * this.d,\n                        this.a * this.a + this.b * this.b,\n                    ),\n                ),\n                0,\n            );\n        }\n        else {\n            return new Vec2(\n                0,\n                rad2deg(\n                    Math.atan2(\n                        this.a * this.c + this.b * this.d,\n                        this.c * this.c + this.d * this.d,\n                    ),\n                ),\n            );\n        }\n    }\n}\n\nclass Mat3 {\n    // m11 m12 m13\n    // m21 m22 m23\n    // m31 m32 m33\n    m11: number;\n    m12: number;\n    m13: number;\n    m21: number;\n    m22: number;\n    m23: number;\n    m31: number;\n    m32: number;\n    m33: number;\n\n    constructor(\n        m11: number,\n        m12: number,\n        m13: number,\n        m21: number,\n        m22: number,\n        m23: number,\n        m31: number,\n        m32: number,\n        m33: number,\n    ) {\n        this.m11 = m11;\n        this.m12 = m12;\n        this.m13 = m13;\n        this.m21 = m21;\n        this.m22 = m22;\n        this.m23 = m23;\n        this.m31 = m31;\n        this.m32 = m32;\n        this.m33 = m33;\n    }\n\n    static fromMat2(m: Mat2) {\n        return new Mat3(\n            m.a,\n            m.b,\n            0,\n            m.c,\n            m.d,\n            0,\n            0,\n            0,\n            1,\n        );\n    }\n\n    toMat2() {\n        return new Mat2(\n            this.m11,\n            this.m12,\n            this.m21,\n            this.m22,\n        );\n    }\n\n    mul(other: Mat3): Mat3 {\n        return new Mat3(\n            this.m11 * other.m11 + this.m12 * other.m21 + this.m13 * other.m31,\n            this.m11 * other.m12 + this.m12 * other.m22 + this.m13 * other.m32,\n            this.m11 * other.m13 + this.m12 * other.m23 + this.m13 * other.m33,\n            this.m21 * other.m11 + this.m22 * other.m21 + this.m23 * other.m31,\n            this.m21 * other.m12 + this.m22 * other.m22 + this.m23 * other.m32,\n            this.m21 * other.m13 + this.m22 * other.m23 + this.m23 * other.m33,\n            this.m31 * other.m11 + this.m32 * other.m21 + this.m33 * other.m31,\n            this.m31 * other.m12 + this.m32 * other.m22 + this.m33 * other.m32,\n            this.m31 * other.m13 + this.m32 * other.m23 + this.m33 * other.m33,\n        );\n    }\n\n    get det(): number {\n        return this.m11 * this.m22 * this.m33 + this.m12 * this.m23 * this.m31\n            + this.m13 * this.m21 * this.m32 - this.m13 * this.m22 * this.m31\n            - this.m12 * this.m21 * this.m33 - this.m11 * this.m23 * this.m32;\n    }\n\n    rotate(radians: number) {\n        const c = Math.cos(radians);\n        const s = Math.sin(radians);\n        const oldA = this.m11;\n        const oldB = this.m12;\n        this.m11 = c * this.m11 + s * this.m21;\n        this.m12 = c * this.m12 + s * this.m22;\n        this.m21 = c * this.m21 - s * oldA;\n        this.m22 = c * this.m22 - s * oldB;\n        return this;\n    }\n\n    scale(x: number, y: number) {\n        this.m11 *= x;\n        this.m12 *= x;\n        this.m21 *= y;\n        this.m22 *= y;\n        return this;\n    }\n\n    get inverse(): Mat3 {\n        const det = this.det;\n        return new Mat3(\n            (this.m22 * this.m33 - this.m23 * this.m32) / det,\n            (this.m13 * this.m32 - this.m12 * this.m33) / det,\n            (this.m12 * this.m23 - this.m13 * this.m22) / det,\n            (this.m23 * this.m31 - this.m21 * this.m33) / det,\n            (this.m11 * this.m33 - this.m13 * this.m31) / det,\n            (this.m13 * this.m21 - this.m11 * this.m23) / det,\n            (this.m21 * this.m32 - this.m22 * this.m31) / det,\n            (this.m12 * this.m31 - this.m11 * this.m32) / det,\n            (this.m11 * this.m22 - this.m12 * this.m21) / det,\n        );\n    }\n\n    get transpose(): Mat3 {\n        return new Mat3(\n            this.m11,\n            this.m21,\n            this.m31,\n            this.m12,\n            this.m22,\n            this.m32,\n            this.m13,\n            this.m23,\n            this.m33,\n        );\n    }\n}\n\nexport function wave<V extends LerpValue>(\n    lo: V,\n    hi: V,\n    t: number,\n    f = (t: number) => -Math.cos(t),\n): V {\n    return lerp(lo, hi, (f(t) + 1) / 2);\n}\n\n// basic ANSI C LCG\nexport const A = 1103515245;\nexport const C = 12345;\nexport const M = 2147483648;\n\n/**\n * A random number generator using the linear congruential generator algorithm.\n *\n * @group Math\n * @subgroup Random\n */\nexport class RNG {\n    /**\n     * The current seed value used by the random number generator.\n     */\n    seed: number;\n    constructor(seed: number) {\n        this.seed = seed;\n    }\n\n    /**\n     * Generate a random number between 0 and 1.\n     *\n     * @example\n     * ```js\n     * const rng = new RNG(Date.now())\n     * const value = rng.gen() // Returns number between 0-1\n     * ```\n     *\n     * @returns A number between 0 and 1.\n     */\n    gen(): number {\n        this.seed = (A * this.seed + C) % M;\n        return this.seed / M;\n    }\n\n    /**\n     * Generate a random number between two values.\n     *\n     * @param a - The minimum value.\n     * @param b - The maximum value.\n     *\n     * @example\n     * ```js\n     * const rng = new RNG(Date.now())\n     * const value = rng.genNumber(10, 20) // Returns number between 10-20\n     * ```\n     *\n     * @returns A number between a and b.\n     */\n    genNumber(a: number, b: number): number {\n        return a + this.gen() * (b - a);\n    }\n    /**\n     * Generate a random 2D vector between two vectors.\n     *\n     * @param a - The minimum vector.\n     * @param b - The maximum vector.\n     *\n     * @example\n     * ```js\n     * const rng = new RNG(Date.now())\n     * const vec = rng.genVec2(vec2(0,0), vec2(100,100))\n     * ```\n     *\n     * @returns A vector between vectors a and b.\n     */\n    genVec2(a: Vec2, b: Vec2): Vec2 {\n        return new Vec2(this.genNumber(a.x, b.x), this.genNumber(a.y, b.y));\n    }\n\n    /**\n     * Generate a random color between two colors.\n     *\n     * @param a - The first color.\n     * @param b - The second color.\n     *\n     * @example\n     * ```js\n     * const rng = new RNG(Date.now())\n     * const color = rng.genColor(rgb(0,0,0), rgb(255,255,255))\n     * ```\n     *\n     * @returns A color between colors a and b.\n     */\n    genColor(a: Color, b: Color): Color {\n        return new Color(\n            this.genNumber(a.r, b.r),\n            this.genNumber(a.g, b.g),\n            this.genNumber(a.b, b.b),\n        );\n    }\n\n    /**\n     * Generate a random value of a specific type.\n     *\n     * @param args - No args for [0-1], one arg for [0-arg], or two args for [arg1-arg2].\n     *\n     * @example\n     * ```js\n     * const rng = new RNG(Date.now())\n     * const val = rng.genAny(0, 100) // Number between 0-100\n     * const vec = rng.genAny(vec2(0,0), vec2(100,100)) // Vec2\n     * const col = rng.genAny(rgb(0,0,0), rgb(255,255,255)) // Color\n     * ```\n     *\n     * @returns A random value.\n     */\n    genAny<T = RNGValue>(...args: [] | [T] | [T, T]): T {\n        if (args.length === 0) {\n            return this.gen() as T;\n        }\n        else if (args.length === 1) {\n            if (typeof args[0] === \"number\") {\n                return this.genNumber(0, args[0]) as T;\n            }\n            else if (args[0] instanceof Vec2) {\n                return this.genVec2(vec2(0, 0), args[0]) as T;\n            }\n            else if (args[0] instanceof Color) {\n                return this.genColor(rgb(0, 0, 0), args[0]) as T;\n            }\n        }\n        else if (args.length === 2) {\n            if (typeof args[0] === \"number\" && typeof args[1] === \"number\") {\n                return this.genNumber(args[0], args[1]) as T;\n            }\n            else if (args[0] instanceof Vec2 && args[1] instanceof Vec2) {\n                return this.genVec2(args[0], args[1]) as T;\n            }\n            else if (args[0] instanceof Color && args[1] instanceof Color) {\n                return this.genColor(args[0], args[1]) as T;\n            }\n        }\n\n        throw new Error(\"More than 2 arguments not supported\");\n    }\n}\n\nexport function randSeed(seed?: number): number {\n    if (seed != null) {\n        _k.game.defRNG.seed = seed;\n    }\n    return _k.game.defRNG.seed;\n}\n\nexport function rand<T = number>(...args: [] | [T] | [T, T]) {\n    return _k.game.defRNG.genAny(...args);\n}\n\nexport function randi(...args: [] | [number] | [number, number]) {\n    return Math.floor(rand(...(args.length > 0 ? args : [2])));\n}\n\nexport function chance(p: number): boolean {\n    return rand() <= p;\n}\n\nexport function shuffle<T>(list: T[]): T[] {\n    for (let i = list.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [list[i], list[j]] = [list[j], list[i]];\n    }\n    return list;\n}\n\nexport function chooseMultiple<T>(list: T[], count: number): T[] {\n    return list.length <= count\n        ? list.slice()\n        : shuffle(list.slice()).slice(0, count);\n}\n\nexport function choose<T>(list: T[]): T {\n    return list[randi(list.length)];\n}\n\n// TODO: better name\nexport function testRectRect2(r1: Rect, r2: Rect): boolean {\n    return r1.pos.x + r1.width >= r2.pos.x\n        && r1.pos.x <= r2.pos.x + r2.width\n        && r1.pos.y + r1.height >= r2.pos.y\n        && r1.pos.y <= r2.pos.y + r2.height;\n}\n\nexport function testRectRect(r1: Rect, r2: Rect): boolean {\n    return r1.pos.x + r1.width > r2.pos.x\n        && r1.pos.x < r2.pos.x + r2.width\n        && r1.pos.y + r1.height > r2.pos.y\n        && r1.pos.y < r2.pos.y + r2.height;\n}\n\n// TODO: better name\nexport function testLineLineT(l1: Line, l2: Line): number | null {\n    if (\n        (l1.p1.x === l1.p2.x && l1.p1.y === l1.p2.y)\n        || (l2.p1.x === l2.p2.x && l2.p1.y === l2.p2.y)\n    ) {\n        return null;\n    }\n\n    const denom = (l2.p2.y - l2.p1.y) * (l1.p2.x - l1.p1.x)\n        - (l2.p2.x - l2.p1.x) * (l1.p2.y - l1.p1.y);\n\n    // parallel\n    if (denom === 0) {\n        return null;\n    }\n\n    const ua = ((l2.p2.x - l2.p1.x) * (l1.p1.y - l2.p1.y)\n        - (l2.p2.y - l2.p1.y) * (l1.p1.x - l2.p1.x)) / denom;\n    const ub = ((l1.p2.x - l1.p1.x) * (l1.p1.y - l2.p1.y)\n        - (l1.p2.y - l1.p1.y) * (l1.p1.x - l2.p1.x)) / denom;\n\n    // is the intersection on the segments\n    if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n        return null;\n    }\n\n    return ua;\n}\n\nexport function testLineLine(l1: Line, l2: Line): Vec2 | null {\n    const t = testLineLineT(l1, l2);\n    if (!t) return null;\n    return vec2(\n        l1.p1.x + t * (l1.p2.x - l1.p1.x),\n        l1.p1.y + t * (l1.p2.y - l1.p1.y),\n    );\n}\n\nexport function clipLineToRect(r: Rect, l: Line, result: Line): boolean {\n    const dir = l.p2.sub(l.p1);\n    let tmin = Number.NEGATIVE_INFINITY, tmax = Number.POSITIVE_INFINITY;\n\n    if (dir.x != 0.0) {\n        const tx1 = (r.pos.x - l.p1.x) / dir.x;\n        const tx2 = (r.pos.x + r.width - l.p1.x) / dir.x;\n\n        tmin = Math.max(tmin, Math.min(tx1, tx2));\n        tmax = Math.min(tmax, Math.max(tx1, tx2));\n    }\n    else {\n        if (l.p1.x < r.pos.x || l.p1.x > r.pos.x + r.width) {\n            return false;\n        }\n    }\n\n    if (dir.y != 0.0) {\n        const ty1 = (r.pos.y - l.p1.y) / dir.y;\n        const ty2 = (r.pos.y + r.height - l.p1.y) / dir.y;\n\n        tmin = Math.max(tmin, Math.min(ty1, ty2));\n        tmax = Math.min(tmax, Math.max(ty1, ty2));\n    }\n    else {\n        if (l.p1.y < r.pos.y || l.p1.y > r.pos.y + r.height) {\n            return false;\n        }\n    }\n\n    if (tmax >= tmin && tmax >= 0 && tmin <= 1) {\n        Vec2.addScaled(l.p1, dir, Math.max(tmin, 0), result.p1);\n        Vec2.addScaled(l.p1, dir, Math.min(tmax, 1), result.p2);\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function testRectLine(r: Rect, l: Line): boolean {\n    const dir = l.p2.sub(l.p1);\n    let tmin = Number.NEGATIVE_INFINITY, tmax = Number.POSITIVE_INFINITY;\n\n    if (dir.x != 0.0) {\n        const tx1 = (r.pos.x - l.p1.x) / dir.x;\n        const tx2 = (r.pos.x + r.width - l.p1.x) / dir.x;\n\n        tmin = Math.max(tmin, Math.min(tx1, tx2));\n        tmax = Math.min(tmax, Math.max(tx1, tx2));\n    }\n    else {\n        if (l.p1.x < r.pos.x || l.p1.x > r.pos.x + r.width) {\n            return false;\n        }\n    }\n\n    if (dir.y != 0.0) {\n        const ty1 = (r.pos.y - l.p1.y) / dir.y;\n        const ty2 = (r.pos.y + r.height - l.p1.y) / dir.y;\n\n        tmin = Math.max(tmin, Math.min(ty1, ty2));\n        tmax = Math.min(tmax, Math.max(ty1, ty2));\n    }\n    else {\n        if (l.p1.y < r.pos.y || l.p1.y > r.pos.y + r.height) {\n            return false;\n        }\n    }\n\n    return tmax >= tmin && tmax >= 0 && tmin <= 1;\n}\n\nexport function testRectPoint2(r: Rect, pt: Vec2): boolean {\n    return pt.x >= r.pos.x\n        && pt.x <= r.pos.x + r.width\n        && pt.y >= r.pos.y\n        && pt.y <= r.pos.y + r.height;\n}\n\nexport function testRectPoint(r: Rect, pt: Vec2): boolean {\n    return pt.x > r.pos.x\n        && pt.x < r.pos.x + r.width\n        && pt.y > r.pos.y\n        && pt.y < r.pos.y + r.height;\n}\n\nexport function testRectCircle(r: Rect, c: Circle): boolean {\n    const nx = Math.max(r.pos.x, Math.min(c.center.x, r.pos.x + r.width));\n    const ny = Math.max(r.pos.y, Math.min(c.center.y, r.pos.y + r.height));\n    const nearestPoint = vec2(nx, ny);\n    return nearestPoint.sdist(c.center) <= c.radius * c.radius;\n}\n\nexport function testRectPolygon(r: Rect, p: Polygon): boolean {\n    return testPolygonPolygon(p, new Polygon(r.points()));\n}\n\nexport function testLinePoint(l: Line, pt: Vec2): boolean {\n    const v1 = pt.sub(l.p1);\n    const v2 = l.p2.sub(l.p1);\n\n    // Check if sine is 0, in that case lines are parallel.\n    // If not parallel, the point cannot lie on the line.\n    if (Math.abs(v1.cross(v2)) > Number.EPSILON) {\n        return false;\n    }\n\n    // Scalar projection of v1 on v2\n    const t = v1.dot(v2) / v2.dot(v2);\n    // Since t is percentual distance of pt from line.p1 on the line,\n    // it should be between 0% and 100%\n    return t >= 0 && t <= 1;\n}\n\nexport function clipLineToCircle(\n    circle: Circle,\n    l: Line,\n    result: Line,\n): boolean {\n    const v = l.p2.sub(l.p1);\n    const a = v.dot(v);\n    const centerToOrigin = l.p1.sub(circle.center);\n    const b = 2 * v.dot(centerToOrigin);\n    const c = centerToOrigin.dot(centerToOrigin)\n        - circle.radius * circle.radius;\n    // Calculate the discriminant of ax^2 + bx + c\n    const dis = b * b - 4 * a * c;\n\n    // No root\n    if ((a <= Number.EPSILON) || (dis < 0)) {\n        return false;\n    }\n    // One possible root\n    else if (dis == 0) {\n        const t = -b / (2 * a);\n        if (t >= 0 && t <= 1) {\n            if (testCirclePoint(circle, l.p1)) {\n                Vec2.copy(l.p1, result.p1);\n                Vec2.addScaled(l.p1, v, t, result.p2);\n            }\n            else {\n                Vec2.addScaled(l.p1, v, t, result.p1);\n                Vec2.copy(l.p2, result.p2);\n            }\n            return true;\n        }\n    }\n    // Two possible roots\n    else {\n        const t1 = (-b + Math.sqrt(dis)) / (2 * a);\n        const t2 = (-b - Math.sqrt(dis)) / (2 * a);\n        const b1 = t1 >= 0 && t1 <= 1;\n        const b2 = t2 >= 0 && t2 <= 1;\n        if (b1 && b2) {\n            Vec2.addScaled(l.p1, v, t1, result.p1);\n            Vec2.addScaled(l.p1, v, t2, result.p2);\n            return true;\n        }\n        else if (b1 || b2) {\n            const t = b1 ? t1 : t2;\n            if (testCirclePoint(circle, l.p1)) {\n                Vec2.copy(l.p1, result.p1);\n                Vec2.addScaled(l.p1, v, t, result.p2);\n            }\n            else {\n                Vec2.addScaled(l.p1, v, t, result.p1);\n                Vec2.copy(l.p2, result.p2);\n            }\n            return true;\n        }\n    }\n\n    // Check if line is completely within the circle\n    // We only need to check one point, since the line didn't cross the circle\n    if (testCirclePoint(circle, l.p1)) {\n        Vec2.copy(l.p1, result.p1);\n        Vec2.copy(l.p2, result.p2);\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function testLineCircle(l: Line, circle: Circle): boolean {\n    const v = l.p2.sub(l.p1);\n    const a = v.dot(v);\n    const centerToOrigin = l.p1.sub(circle.center);\n    const b = 2 * v.dot(centerToOrigin);\n    const c = centerToOrigin.dot(centerToOrigin)\n        - circle.radius * circle.radius;\n    // Calculate the discriminant of ax^2 + bx + c\n    const dis = b * b - 4 * a * c;\n\n    // No root\n    if ((a <= Number.EPSILON) || (dis < 0)) {\n        return false;\n    }\n    // One possible root\n    else if (dis == 0) {\n        const t = -b / (2 * a);\n        if (t >= 0 && t <= 1) {\n            return true;\n        }\n    }\n    // Two possible roots\n    else {\n        const t1 = (-b + Math.sqrt(dis)) / (2 * a);\n        const t2 = (-b - Math.sqrt(dis)) / (2 * a);\n        if ((t1 >= 0 && t1 <= 1) || (t2 >= 0 && t2 <= 1)) {\n            return true;\n        }\n    }\n\n    // Check if line is completely within the circle\n    // We only need to check one point, since the line didn't cross the circle\n    return testCirclePoint(circle, l.p1);\n}\n\nexport function testLinePolygon(l: Line, p: Polygon): boolean {\n    // test if line is inside\n    if (testPolygonPoint(p, l.p1) || testPolygonPoint(p, l.p2)) {\n        return true;\n    }\n\n    // test each line\n    for (let i = 0; i < p.pts.length; i++) {\n        const p1 = p.pts[i];\n        const p2 = p.pts[(i + 1) % p.pts.length];\n        if (testLineLine(l, new Line(p1, p2))) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function testCirclePoint(c: Circle, p: Vec2): boolean {\n    return c.center.sdist(p) < c.radius * c.radius;\n}\n\nexport function testCircleCircle(c1: Circle, c2: Circle): boolean {\n    return c1.center.sdist(c2.center)\n        < (c1.radius + c2.radius) * (c1.radius + c2.radius);\n}\n\nexport function testCirclePolygon(c: Circle, p: Polygon): boolean {\n    // For each edge check for intersection\n    let prev = p.pts[p.pts.length - 1];\n    for (const cur of p.pts) {\n        if (testLineCircle(new Line(prev, cur), c)) {\n            return true;\n        }\n        prev = cur;\n    }\n\n    // Check if the polygon is completely within the circle\n    // We only need to check one point, since the polygon didn't cross the circle\n    if (testCirclePoint(c, p.pts[0])) {\n        return true;\n    }\n\n    // Check if the circle is completely within the polygon\n    return testPolygonPoint(p, c.center);\n}\n\nexport function testPolygonPolygon(p1: Polygon, p2: Polygon): boolean {\n    for (let i = 0; i < p1.pts.length; i++) {\n        if (\n            testLinePolygon(\n                new Line(p1.pts[i], p1.pts[(i + 1) % p1.pts.length]),\n                p2,\n            )\n        ) {\n            return true;\n        }\n    }\n    // Check if any of the points of the polygon lie in the other polygon\n    if (\n        p1.pts.some(p => testPolygonPoint(p2, p))\n        || p2.pts.some(p => testPolygonPoint(p1, p))\n    ) {\n        return true;\n    }\n    return false;\n}\n\n// https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html\nexport function testPolygonPoint(poly: Polygon, pt: Vec2): boolean {\n    let c = false;\n    const p = poly.pts;\n\n    for (let i = 0, j = p.length - 1; i < p.length; j = i++) {\n        if (\n            ((p[i].y > pt.y) != (p[j].y > pt.y))\n            && (pt.x\n                < (p[j].x - p[i].x) * (pt.y - p[i].y) / (p[j].y - p[i].y)\n                    + p[i].x)\n        ) {\n            c = !c;\n        }\n    }\n\n    return c;\n}\n\nexport function testEllipsePoint(ellipse: Ellipse, pt: Vec2): boolean {\n    // Transform the point into the ellipse's unrotated coordinate system at the origin\n    pt = pt.sub(ellipse.center);\n    const angle = deg2rad(ellipse.angle);\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n    const vx = pt.x * c + pt.y * s;\n    const vy = -pt.x * s + pt.y * c;\n    return vx * vx / (ellipse.radiusX * ellipse.radiusX)\n            + vy * vy / (ellipse.radiusY * ellipse.radiusY) < 1;\n}\n\nexport function testEllipseCircle(ellipse: Ellipse, circle: Circle): boolean {\n    // This is an approximation, because the parallel curve of an ellipse is an octic algebraic curve, not just a larger ellipse.\n    // Transform the circle's center into the ellipse's unrotated coordinate system at the origin\n    const center = circle.center.sub(ellipse.center);\n    const angle = deg2rad(ellipse.angle);\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n    const cx = center.x * c + center.y * s;\n    const cy = -center.x * s + center.y * c;\n    // Test with an approximate Minkowski sum of the ellipse and the circle\n    return testEllipsePoint(\n        new Ellipse(\n            vec2(),\n            ellipse.radiusX + circle.radius,\n            ellipse.radiusY + circle.radius,\n            0,\n        ),\n        vec2(cx, cy),\n    );\n}\n\nexport function testEllipseLine(ellipse: Ellipse, line: Line): boolean {\n    // Transform the line to the coordinate system where the ellipse is a unit circle\n    const T = ellipse.toMat2().inverse;\n    line = new Line(\n        T.transform(line.p1.sub(ellipse.center)),\n        T.transform(line.p2.sub(ellipse.center)),\n    );\n    return testLineCircle(line, new Circle(vec2(), 1));\n}\n\nexport function testEllipseEllipse(\n    ellipse1: Ellipse,\n    ellipse2: Ellipse,\n): boolean {\n    // First check if one of the ellipses isn't secretly a circle\n    if (ellipse1.radiusX === ellipse1.radiusY) {\n        return testEllipseCircle(\n            ellipse2,\n            new Circle(ellipse1.center, ellipse1.radiusX),\n        );\n    }\n    else if (ellipse2.radiusX === ellipse2.radiusY) {\n        return testEllipseCircle(\n            ellipse1,\n            new Circle(ellipse2.center, ellipse2.radiusX),\n        );\n    }\n    // No luck, we need to solve the equation\n    /*\n    Etayo, Fernando, Laureano Gonzalez-Vega, and Natalia del Rio. \"A new approach to characterizing the relative position of two ellipses depending on one parameter.\" Computer aided geometric design 23, no. 4 (2006): 324-350.\n    */\n    const A1 = new Mat3(\n        1 / ellipse1.radiusX ** 2,\n        0,\n        0,\n        0,\n        1 / ellipse1.radiusY ** 2,\n        0,\n        0,\n        0,\n        -1,\n    );\n    const A2 = new Mat3(\n        1 / ellipse2.radiusX ** 2,\n        0,\n        0,\n        0,\n        1 / ellipse2.radiusY ** 2,\n        0,\n        0,\n        0,\n        -1,\n    );\n\n    const x1 = ellipse1.center.x;\n    const y1 = ellipse1.center.y;\n    const x2 = ellipse2.center.x;\n    const y2 = ellipse2.center.y;\n    const theta1 = deg2rad(ellipse1.angle);\n    const theta2 = deg2rad(ellipse2.angle);\n\n    const M1 = new Mat3(\n        Math.cos(theta1),\n        -Math.sin(theta1),\n        x1,\n        Math.sin(theta1),\n        Math.cos(theta1),\n        y1,\n        0,\n        0,\n        1,\n    );\n    const M2 = new Mat3(\n        Math.cos(theta2),\n        -Math.sin(theta2),\n        x2,\n        Math.sin(theta2),\n        Math.cos(theta2),\n        y2,\n        0,\n        0,\n        1,\n    );\n    const M1inv = M1.inverse;\n    const M2inv = M2.inverse;\n\n    const A = M1inv.transpose.mul(A1).mul(M1inv);\n    const B = M2inv.transpose.mul(A2).mul(M2inv);\n\n    const a11 = A.m11;\n    const a12 = A.m12;\n    const a13 = A.m13;\n    const a21 = A.m21;\n    const a22 = A.m22;\n    const a23 = A.m23;\n    const a31 = A.m31;\n    const a32 = A.m32;\n    const a33 = A.m33;\n\n    const b11 = B.m11;\n    const b12 = B.m12;\n    const b13 = B.m13;\n    const b21 = B.m21;\n    const b22 = B.m22;\n    const b23 = B.m23;\n    const b31 = B.m31;\n    const b32 = B.m32;\n    const b33 = B.m33;\n\n    const factor = a11 * a22 * a33 - a11 * a23 * a32 - a12 * a21 * a33\n        + a12 * a23 * a31 + a13 * a21 * a32 - a13 * a22 * a31;\n    const a =\n        (a11 * a22 * b33 - a11 * a23 * b32 - a11 * a32 * b23 + a11 * a33 * b22\n            - a12 * a21 * b33 + a12 * a23 * b31 + a12 * a31 * b23\n            - a12 * a33 * b21 + a13 * a21 * b32 - a13 * a22 * b31\n            - a13 * a31 * b22 + a13 * a32 * b21 + a21 * a32 * b13\n            - a21 * a33 * b12 - a22 * a31 * b13 + a22 * a33 * b11\n            + a23 * a31 * b12 - a23 * a32 * b11) / factor;\n    const b =\n        (a11 * b22 * b33 - a11 * b23 * b32 - a12 * b21 * b33 + a12 * b23 * b31\n            + a13 * b21 * b32 - a13 * b22 * b31 - a21 * b12 * b33\n            + a21 * b13 * b32 + a22 * b11 * b33 - a22 * b13 * b31\n            - a23 * b11 * b32 + a23 * b12 * b31 + a31 * b12 * b23\n            - a31 * b13 * b22 - a32 * b11 * b23 + a32 * b13 * b21\n            + a33 * b11 * b22 - a33 * b12 * b21) / factor;\n    const c =\n        (b11 * b22 * b33 - b11 * b23 * b32 - b12 * b21 * b33 + b12 * b23 * b31\n            + b13 * b21 * b32 - b13 * b22 * b31) / factor;\n\n    if (a >= 0) {\n        const condition1 = -3 * b + a ** 2;\n        const condition2 = 3 * a * c + b * a ** 2 - 4 * b ** 2;\n        const condition3 = -27 * c ** 2 + 18 * c * a * b + a ** 2 * b ** 2\n            - 4 * a ** 3 * c - 4 * b ** 3;\n        if (condition1 > 0 && condition2 < 0 && condition3 > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    else {\n        const condition1 = -3 * b + a ** 2;\n        const condition2 = -27 * c ** 2 + 18 * c * a * b + a ** 2 * b ** 2\n            - 4 * a ** 3 * c - 4 * b ** 3;\n        if (condition1 > 0 && condition2 > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n}\n\nexport function testEllipseRect(ellipse: Ellipse, rect: Rect): boolean {\n    return testEllipsePolygon(ellipse, new Polygon(rect.points()));\n}\n\nexport function testEllipsePolygon(ellipse: Ellipse, poly: Polygon): boolean {\n    // Transform the polygon to the coordinate system where the ellipse is a unit circle\n    const T = ellipse.toMat2().inverse;\n    poly = new Polygon(poly.pts.map(p => T.transform(p.sub(ellipse.center))));\n    return testCirclePolygon(new Circle(vec2(), 1), poly);\n}\n\nexport function testPointPoint(p1: Vec2, p2: Vec2): boolean {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n/**\n * @group Math\n * @subgroup Shapes\n */\nexport type ShapeType = Point | Circle | Line | Rect | Polygon | Ellipse;\n\nexport function testPointShape(point: Point, shape: ShapeType): boolean {\n    if (shape instanceof Vec2) {\n        return testPointPoint(shape as Vec2, point.pt);\n    }\n    else if (shape instanceof Circle) {\n        return testCirclePoint(shape as Circle, point.pt);\n    }\n    else if (shape instanceof Line) {\n        return testLinePoint(shape as Line, point.pt);\n    }\n    else if (shape instanceof Rect) {\n        return testRectPoint(shape as Rect, point.pt);\n    }\n    else if (shape instanceof Polygon) {\n        return testPolygonPoint(shape as Polygon, point.pt);\n    }\n    else if (shape instanceof Ellipse) {\n        return testEllipsePoint(shape as Ellipse, point.pt);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function testLineShape(line: Line, shape: ShapeType | Vec2): boolean {\n    if (shape instanceof Vec2) {\n        return testLinePoint(line, shape as Vec2);\n    }\n    else if (shape instanceof Circle) {\n        return testLineCircle(line, shape as Circle);\n    }\n    else if (shape instanceof Line) {\n        return testLineLine(line, shape as Line) != null;\n    }\n    else if (shape instanceof Rect) {\n        return testRectLine(shape as Rect, line);\n    }\n    else if (shape instanceof Polygon) {\n        return testLinePolygon(line, shape as Polygon);\n    }\n    else if (shape instanceof Ellipse) {\n        return testEllipseLine(shape as Ellipse, line);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function testCircleShape(\n    circle: Circle,\n    shape: ShapeType | Vec2,\n): boolean {\n    if (shape instanceof Vec2) {\n        return testCirclePoint(circle, shape as Vec2);\n    }\n    else if (shape instanceof Circle) {\n        return testCircleCircle(circle, shape as Circle);\n    }\n    else if (shape instanceof Line) {\n        return testLineCircle(shape as Line, circle);\n    }\n    else if (shape instanceof Rect) {\n        return testRectCircle(shape as Rect, circle);\n    }\n    else if (shape instanceof Polygon) {\n        return testCirclePolygon(circle, shape as Polygon);\n    }\n    else if (shape instanceof Ellipse) {\n        return testEllipseCircle(shape as Ellipse, circle);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function testRectShape(rect: Rect, shape: ShapeType | Vec2): boolean {\n    if (shape instanceof Vec2) {\n        return testRectPoint(rect, shape as Vec2);\n    }\n    else if (shape instanceof Circle) {\n        return testRectCircle(rect, shape as Circle);\n    }\n    else if (shape instanceof Line) {\n        return testRectLine(rect, shape as Line);\n    }\n    else if (shape instanceof Rect) {\n        return testRectRect(rect, shape as Rect);\n    }\n    else if (shape instanceof Polygon) {\n        return testRectPolygon(rect, shape as Polygon);\n    }\n    else if (shape instanceof Ellipse) {\n        return testEllipseRect(shape as Ellipse, rect);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function testPolygonShape(\n    polygon: Polygon,\n    shape: ShapeType | Vec2,\n): boolean {\n    if (shape instanceof Vec2) {\n        return testPolygonPoint(polygon, shape as Vec2);\n    }\n    else if (shape instanceof Circle) {\n        return testCirclePolygon(shape as Circle, polygon);\n    }\n    else if (shape instanceof Line) {\n        return testLinePolygon(shape as Line, polygon);\n    }\n    else if (shape instanceof Rect) {\n        return testRectPolygon(shape as Rect, polygon);\n    }\n    else if (shape instanceof Polygon) {\n        return testPolygonPolygon(shape as Polygon, polygon);\n    }\n    else if (shape instanceof Ellipse) {\n        return testEllipsePolygon(shape as Ellipse, polygon);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function testEllipseShape(ellipse: Ellipse, shape: ShapeType): boolean {\n    if (shape instanceof Vec2) {\n        return testEllipsePoint(ellipse, shape as Vec2);\n    }\n    else if (shape instanceof Circle) {\n        return testEllipseCircle(ellipse, shape as Circle);\n    }\n    else if (shape instanceof Line) {\n        return testEllipseLine(ellipse, shape as Line);\n    }\n    else if (shape instanceof Rect) {\n        return testEllipseRect(ellipse, shape as Rect);\n    }\n    else if (shape instanceof Polygon) {\n        return testEllipsePolygon(ellipse, shape as Polygon);\n    }\n    else if (shape instanceof Ellipse) {\n        return testEllipseEllipse(shape as Ellipse, ellipse);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function testShapeShape(shape1: ShapeType, shape2: ShapeType): boolean {\n    if (shape1 instanceof Vec2) {\n        return testPointShape(new Point(shape1), shape2);\n    }\n    else if (shape1 instanceof Circle) {\n        return testCircleShape(shape1 as Circle, shape2);\n    }\n    else if (shape1 instanceof Line) {\n        return testLineShape(shape1 as Line, shape2);\n    }\n    else if (shape1 instanceof Rect) {\n        return testRectShape(shape1 as Rect, shape2);\n    }\n    else if (shape1 instanceof Polygon) {\n        return testPolygonShape(shape1 as Polygon, shape2);\n    }\n    else if (shape1 instanceof Ellipse) {\n        return testEllipseShape(shape1 as Ellipse, shape2);\n    }\n    else {\n        return false;\n    }\n}\n\n/**\n * @group Math\n * @subgroup Raycast\n */\nexport type RaycastHit = {\n    fraction: number;\n    normal: Vec2;\n    point: Vec2;\n    gridPos?: Vec2;\n    object?: GameObj;\n};\n\n/**\n * @group Math\n * @subgroup Raycast\n */\nexport type RaycastResult = RaycastHit | null;\n\nfunction raycastLine(origin: Vec2, direction: Vec2, line: Line): RaycastResult {\n    const a = origin;\n    const c = line.p1;\n    const d = line.p2;\n    const ab = direction;\n    const cd = d.sub(c);\n    const abxcd = ab.cross(cd);\n    // If parallel, no intersection\n    if (Math.abs(abxcd) < Number.EPSILON) {\n        return null;\n    }\n    const ac = c.sub(a);\n    const s = ac.cross(cd) / abxcd;\n    // Outside the ray\n    if (s <= 0 || s >= 1) {\n        return null;\n    }\n    // Outside the line\n    const t = ac.cross(ab) / abxcd;\n    if (t <= 0 || t >= 1) {\n        return null;\n    }\n\n    const normal = cd.normal().unit();\n    if (direction.dot(normal) > 0) {\n        normal.x *= -1;\n        normal.y *= -1;\n    }\n\n    return {\n        point: a.add(ab.scale(s)),\n        normal: normal,\n        fraction: s,\n    };\n}\n\nfunction raycastRect(origin: Vec2, direction: Vec2, rect: Rect) {\n    let tmin = Number.NEGATIVE_INFINITY, tmax = Number.POSITIVE_INFINITY;\n    let normal;\n\n    if (origin.x != 0.0) {\n        const tx1 = (rect.pos.x - origin.x) / direction.x;\n        const tx2 = (rect.pos.x + rect.width - origin.x) / direction.x;\n\n        normal = vec2(-Math.sign(direction.x), 0);\n\n        tmin = Math.max(tmin, Math.min(tx1, tx2));\n        tmax = Math.min(tmax, Math.max(tx1, tx2));\n    }\n\n    if (origin.y != 0.0) {\n        const ty1 = (rect.pos.y - origin.y) / direction.y;\n        const ty2 = (rect.pos.y + rect.height - origin.y) / direction.y;\n\n        if (Math.min(ty1, ty2) > tmin) {\n            normal = vec2(0, -Math.sign(direction.y));\n        }\n\n        tmin = Math.max(tmin, Math.min(ty1, ty2));\n        tmax = Math.min(tmax, Math.max(ty1, ty2));\n    }\n\n    if (tmax >= tmin && tmin >= 0 && tmin <= 1) {\n        const point = origin.add(direction.scale(tmin));\n\n        return {\n            point: point,\n            normal: normal,\n            fraction: tmin,\n        };\n    }\n    else {\n        return null;\n    }\n}\n\nfunction raycastCircle(\n    origin: Vec2,\n    direction: Vec2,\n    circle: Circle,\n): RaycastResult {\n    const a = origin;\n    const c = circle.center;\n    const ab = direction;\n    const A = ab.dot(ab);\n    const centerToOrigin = a.sub(c);\n    const B = 2 * ab.dot(centerToOrigin);\n    const C = centerToOrigin.dot(centerToOrigin)\n        - circle.radius * circle.radius;\n    // Calculate the discriminant of ax^2 + bx + c\n    const disc = B * B - 4 * A * C;\n    // No root\n    if ((A <= Number.EPSILON) || (disc < 0)) {\n        return null;\n    }\n    // One possible root\n    else if (disc == 0) {\n        const t = -B / (2 * A);\n        if (t >= 0 && t <= 1) {\n            const point = a.add(ab.scale(t));\n            return {\n                point: point,\n                normal: point.sub(c),\n                fraction: t,\n            };\n        }\n    }\n    // Two possible roots\n    else {\n        const t1 = (-B + Math.sqrt(disc)) / (2 * A);\n        const t2 = (-B - Math.sqrt(disc)) / (2 * A);\n        let t = null;\n        if (t1 >= 0 && t1 <= 1) {\n            t = t1;\n        }\n        if (t2 >= 0 && t2 <= 1) {\n            t = Math.min(t2, t ?? t2);\n        }\n        if (t != null) {\n            const point = a.add(ab.scale(t));\n            return {\n                point: point,\n                normal: point.sub(c).unit(),\n                fraction: t,\n            };\n        }\n    }\n\n    return null;\n}\n\nfunction raycastPolygon(\n    origin: Vec2,\n    direction: Vec2,\n    polygon: Polygon,\n): RaycastResult {\n    const points = polygon.pts;\n    let minHit = null;\n\n    let prev = points[points.length - 1];\n    for (let i = 0; i < points.length; i++) {\n        const cur = points[i];\n        const hit = raycastLine(origin, direction, new Line(prev, cur));\n        if (hit && (!minHit || minHit.fraction > hit.fraction)) {\n            minHit = hit;\n        }\n        prev = cur;\n    }\n\n    return minHit;\n}\n\nfunction raycastEllipse(\n    origin: Vec2,\n    direction: Vec2,\n    ellipse: Ellipse,\n): RaycastResult {\n    // Transforms from unit circle to rotated ellipse\n    const T = ellipse.toMat2();\n    // Transforms from rotated ellipse to unit circle\n    const TI = T.inverse;\n    // Transform both origin and direction into the unit circle coordinate system\n    const Torigin = TI.transform(origin.sub(ellipse.center));\n    const Tdirection = TI.transform(direction);\n    // Raycast as if we have a circle\n    const result = raycastCircle(Torigin, Tdirection, new Circle(vec2(), 1));\n    if (result) {\n        const R = Mat2.rotation(deg2rad(-ellipse.angle));\n        const S = Mat2.scale(ellipse.radiusX, ellipse.radiusY);\n        // Scale the point so we have a point on the unrotated ellipse\n        const p = S.transform(result.point);\n        // transform the result point to the coordinate system of the rotated ellipse\n        const point = T.transform(result.point).add(ellipse.center);\n        const fraction = point.dist(origin) / direction.len();\n        return {\n            point: point,\n            // Calculate the normal at the unrotated ellipse, then rotate the normal to the rotated ellipse\n            normal: R.transform(\n                vec2(ellipse.radiusY ** 2 * p.x, ellipse.radiusX ** 2 * p.y),\n            ).unit(),\n            fraction,\n        };\n    }\n    return result;\n}\n\nexport function raycastGrid(\n    origin: Vec2,\n    direction: Vec2,\n    gridPosHit: (gridPos: Vec2) => boolean | RaycastResult,\n    maxDistance: number = 64,\n): RaycastResult | null {\n    const pos = origin;\n    const len = direction.len();\n    const dir = direction.scale(1 / len);\n    let t = 0;\n    const gridPos = vec2(Math.floor(origin.x), Math.floor(origin.y));\n    const step = vec2(dir.x > 0 ? 1 : -1, dir.y > 0 ? 1 : -1);\n    const tDelta = vec2(Math.abs(1 / dir.x), Math.abs(1 / dir.y));\n    const dist = vec2(\n        (step.x > 0) ? (gridPos.x + 1 - origin.x) : (origin.x - gridPos.x),\n        (step.y > 0) ? (gridPos.y + 1 - origin.y) : (origin.y - gridPos.y),\n    );\n    const tMax = vec2(\n        (tDelta.x < Infinity) ? tDelta.x * dist.x : Infinity,\n        (tDelta.y < Infinity) ? tDelta.y * dist.y : Infinity,\n    );\n    let steppedIndex = -1;\n    while (t <= maxDistance) {\n        const hit = gridPosHit(gridPos);\n        if (hit === true) {\n            return {\n                point: pos.add(dir.scale(t)),\n                normal: vec2(\n                    steppedIndex === 0 ? -step.x : 0,\n                    steppedIndex === 1 ? -step.y : 0,\n                ),\n                fraction: t / len, // Since dir is normalized, t is len times too large\n                gridPos,\n            };\n        }\n        else if (hit) {\n            return hit;\n        }\n        if (tMax.x < tMax.y) {\n            gridPos.x += step.x;\n            t = tMax.x;\n            tMax.x += tDelta.x;\n            steppedIndex = 0;\n        }\n        else {\n            gridPos.y += step.y;\n            t = tMax.y;\n            tMax.y += tDelta.y;\n            steppedIndex = 1;\n        }\n    }\n\n    return null;\n}\n\nexport class Point {\n    pt: Vec2;\n    constructor(pt: Vec2) {\n        this.pt = pt.clone();\n    }\n    transform(m: Mat23, s?: Shape): Point {\n        if (s && s instanceof Point) {\n            m.transformPointV(this.pt, s.pt);\n            return s;\n        }\n        return new Point(m.transformPointV(this.pt, vec2()));\n    }\n    bbox(): Rect {\n        return new Rect(this.pt, 0, 0);\n    }\n    area(): number {\n        return 0;\n    }\n    clone(): Point {\n        return new Point(this.pt);\n    }\n    collides(shape: ShapeType): boolean {\n        return testPointShape(this, shape);\n    }\n    contains(point: Vec2): boolean {\n        return this.pt.eq(point);\n    }\n    raycast(origin: Vec2, direction: Vec2): RaycastResult {\n        return null;\n    }\n    random(): Vec2 {\n        return this.pt.clone();\n    }\n    serialize(): any {\n        return { \"Point\": { pt: this.pt.serialize() } };\n    }\n    support(direction: Vec2): Vec2 {\n        return this.pt;\n    }\n    get gjkCenter(): Vec2 {\n        return this.pt;\n    }\n}\n\nexport class Line {\n    p1: Vec2;\n    p2: Vec2;\n    constructor(p1: Vec2, p2: Vec2) {\n        this.p1 = p1.clone();\n        this.p2 = p2.clone();\n    }\n    transform(m: Mat23, s?: Shape): Line {\n        if (s && s instanceof Line) {\n            m.transformPointV(this.p1, s.p1);\n            m.transformPointV(this.p2, s.p2);\n            return s;\n        }\n        return new Line(\n            m.transformPointV(this.p1, vec2()),\n            m.transformPointV(this.p2, vec2()),\n        );\n    }\n    bbox(): Rect {\n        return Rect.fromPoints(this.p1, this.p2);\n    }\n    area(): number {\n        return this.p1.dist(this.p2);\n    }\n    clone(): Line {\n        return new Line(this.p1, this.p2);\n    }\n    collides(shape: ShapeType | Vec2): boolean {\n        return testLineShape(this, shape);\n    }\n    contains(point: Vec2): boolean {\n        return this.collides(point);\n    }\n    raycast(origin: Vec2, direction: Vec2): RaycastResult {\n        return raycastLine(origin, direction, this);\n    }\n    random(): Vec2 {\n        return this.p1.add(this.p2.sub(this.p1).scale(rand(1)));\n    }\n    serialize(): any {\n        return { Line: { p1: this.p1.serialize(), p2: this.p2.serialize() } };\n    }\n    support(direction: Vec2): Vec2 {\n        return this.p1.dot(direction) > this.p2.dot(direction)\n            ? this.p1\n            : this.p2;\n    }\n    get gjkCenter(): Vec2 {\n        return new Vec2(\n            (this.p1.x + this.p2.x) / 2,\n            (this.p1.y + this.p2.y) / 2,\n        );\n    }\n}\n\n// TODO: use x: number y: number (x, y, width, height)\n/**\n * @group Math\n */\nexport class Rect {\n    pos: Vec2;\n    width: number;\n    height: number;\n    constructor(pos: Vec2, width: number, height: number) {\n        this.pos = pos.clone();\n        this.width = width;\n        this.height = height;\n    }\n    static fromPoints(p1: Vec2, p2: Vec2): Rect {\n        return new Rect(p1.clone(), p2.x - p1.x, p2.y - p1.y);\n    }\n    center(): Vec2 {\n        return new Vec2(\n            this.pos.x + this.width / 2,\n            this.pos.y + this.height / 2,\n        );\n    }\n    points(): [Vec2, Vec2, Vec2, Vec2] {\n        return [\n            this.pos,\n            this.pos.add(this.width, 0),\n            this.pos.add(this.width, this.height),\n            this.pos.add(0, this.height),\n        ];\n    }\n    transform(m: Mat23, s?: Shape): Polygon {\n        // TODO: resize existing pts array?\n        const p = (s && s instanceof Polygon && s.pts.length == 4)\n            ? s\n            : new Polygon([new Vec2(), new Vec2(), new Vec2(), new Vec2()]);\n        p.pts[0] = m.transformPointV(this.pos, p.pts[0]);\n        p.pts[1] = m.transformPoint(\n            this.pos.x + this.width,\n            this.pos.y,\n            p.pts[1],\n        );\n        p.pts[2] = m.transformPoint(\n            this.pos.x + this.width,\n            this.pos.y + this.height,\n            p.pts[2],\n        );\n        p.pts[3] = m.transformPoint(\n            this.pos.x,\n            this.pos.y + this.height,\n            p.pts[3],\n        );\n        return p;\n    }\n    bbox(): Rect {\n        return this.clone();\n    }\n    area(): number {\n        return this.width * this.height;\n    }\n    clone(): Rect {\n        return new Rect(this.pos.clone(), this.width, this.height);\n    }\n    distToPoint(p: Vec2): number {\n        return Math.sqrt(this.sdistToPoint(p));\n    }\n    sdistToPoint(p: Vec2): number {\n        const min = this.pos;\n        const max = this.pos.add(this.width, this.height);\n        const dx = Math.max(min.x - p.x, 0, p.x - max.x);\n        const dy = Math.max(min.y - p.y, 0, p.y - max.y);\n        return dx * dx + dy * dy;\n    }\n    collides(shape: ShapeType | Vec2): boolean {\n        return testRectShape(this, shape);\n    }\n    contains(point: Vec2): boolean {\n        return this.collides(point);\n    }\n    raycast(origin: Vec2, direction: Vec2): RaycastResult {\n        // Further type checking is needed here @mflerackers\n        // @ts-ignore\n        return raycastRect(origin, direction, this);\n    }\n    random(): Vec2 {\n        return this.pos.add(rand(this.width), rand(this.height));\n    }\n    serialize(): any {\n        return {\n            Rect: {\n                pos: this.pos.serialize(),\n                width: this.width,\n                height: this.height,\n            },\n        };\n    }\n    support(direction: Vec2): Vec2 {\n        const pts = this.points();\n        let maxPoint = this.points()[0];\n        let maxDistance = Number.NEGATIVE_INFINITY;\n        let vertex;\n        for (let i = 1; i < pts.length; i++) {\n            vertex = pts[i];\n            const distance = vertex.dot(direction);\n            if (distance > maxDistance) {\n                maxDistance = distance;\n                maxPoint = vertex;\n            }\n        }\n\n        return maxPoint;\n    }\n    get gjkCenter(): Vec2 {\n        return this.pos;\n    }\n}\n\n/**\n * @group Math\n */\nexport class Circle {\n    center: Vec2;\n    radius: number;\n    constructor(center: Vec2, radius: number) {\n        this.center = center.clone();\n        this.radius = radius;\n    }\n    transform(tr: Mat23, s?: Shape): Ellipse {\n        return new Ellipse(this.center, this.radius, this.radius).transform(tr);\n    }\n    bbox(): Rect {\n        return Rect.fromPoints(\n            this.center.sub(vec2(this.radius)),\n            this.center.add(vec2(this.radius)),\n        );\n    }\n    area(): number {\n        return this.radius * this.radius * Math.PI;\n    }\n    clone(): Circle {\n        return new Circle(this.center, this.radius);\n    }\n    collides(shape: ShapeType | Vec2): boolean {\n        return testCircleShape(this, shape);\n    }\n    contains(point: Vec2): boolean {\n        return this.collides(point);\n    }\n    raycast(origin: Vec2, direction: Vec2): RaycastResult {\n        return raycastCircle(origin, direction, this);\n    }\n    random(): Vec2 {\n        // TODO: Not uniform!!\n        return this.center.add(\n            Vec2.fromAngle(rand(360)).scale(rand(this.radius)),\n        );\n    }\n    serialize(): any {\n        return {\n            Circle: { center: this.center.serialize(), radius: this.radius },\n        };\n    }\n    support(direction: Vec2): Vec2 {\n        const s = new Vec2(direction.x, direction.y);\n        Vec2.unit(s, s);\n        Vec2.scale(s, this.radius, s);\n        Vec2.add(s, this.center, s);\n        return s;\n    }\n    get gjkCenter(): Vec2 {\n        return this.center;\n    }\n}\n\n/**\n * @group Math\n */\nexport class Ellipse {\n    center: Vec2;\n    radiusX: number;\n    radiusY: number;\n    angle: number;\n    constructor(center: Vec2, rx: number, ry: number, degrees: number = 0) {\n        this.center = center.clone();\n        this.radiusX = rx;\n        this.radiusY = ry;\n        this.angle = degrees;\n    }\n    static fromMat2(tr: Mat2): Ellipse {\n        const inv = tr.inverse;\n        const M = inv.transpose.mul(inv);\n        const [e1, e2] = M.eigenvalues;\n        const [v1, v2] = M.eigenvectors(e1, e2);\n\n        const [a, b] = [1 / Math.sqrt(e1), 1 / Math.sqrt(e2)];\n\n        // Make sure we use the semi-major axis for the rotation\n        if (a > b) {\n            return new Ellipse(\n                vec2(),\n                a,\n                b,\n                rad2deg(Math.atan2(-v1[1], v1[0])),\n            );\n        }\n        else {\n            return new Ellipse(\n                vec2(),\n                b,\n                a,\n                rad2deg(Math.atan2(-v2[1], v2[0])),\n            );\n        }\n    }\n    toMat2(): Mat2 {\n        const a = deg2rad(this.angle);\n        const c = Math.cos(a);\n        const s = Math.sin(a);\n        return new Mat2(\n            c * this.radiusX,\n            -s * this.radiusY,\n            s * this.radiusX,\n            c * this.radiusY,\n        );\n    }\n    transform(tr: Mat23): Ellipse {\n        if (this.angle == 0 && tr.getRotation() == 0) {\n            // No rotation, so we can just take the scale and translation\n            return new Ellipse(\n                tr.transformPointV(this.center, vec2()),\n                tr.a * this.radiusX,\n                tr.d * this.radiusY,\n            );\n        }\n        else {\n            // Rotation. We can't just add angles, as the scale can squeeze the\n            // ellipse and thus change the angle.\n            // Get the transformation which maps the unit circle onto the ellipse\n            let T = this.toMat2();\n            // Transform the transformation matrix with the rotation+scale matrix\n            const angle = tr.getRotation();\n            const scale = tr.getScale();\n            const M = Mat3.fromMat2(T).scale(scale.x, scale.y).rotate(angle);\n            T = M.toMat2();\n            // Return the ellipse made from the transformed unit circle\n            const ellipse = Ellipse.fromMat2(T);\n            ellipse.center = tr.transformPointV(this.center, vec2());\n            return ellipse;\n        }\n    }\n    bbox(): Rect {\n        if (this.angle == 0) {\n            // No rotation, so the semi-major and semi-minor axis give the extends\n            return Rect.fromPoints(\n                this.center.sub(vec2(this.radiusX, this.radiusY)),\n                this.center.add(vec2(this.radiusX, this.radiusY)),\n            );\n        }\n        else {\n            // Rotation. We need to find the maximum x and y distance from the\n            // center of the rotated ellipse\n            const angle = deg2rad(this.angle);\n            const c = Math.cos(angle);\n            const s = Math.sin(angle);\n            const ux = this.radiusX * c;\n            const uy = this.radiusX * s;\n            const vx = this.radiusY * s;\n            const vy = this.radiusY * c;\n\n            const halfwidth = Math.sqrt(ux * ux + vx * vx);\n            const halfheight = Math.sqrt(uy * uy + vy * vy);\n\n            return Rect.fromPoints(\n                this.center.sub(vec2(halfwidth, halfheight)),\n                this.center.add(vec2(halfwidth, halfheight)),\n            );\n        }\n    }\n    area(): number {\n        return this.radiusX * this.radiusY * Math.PI;\n    }\n    clone(): Ellipse {\n        return new Ellipse(this.center, this.radiusX, this.radiusY, this.angle);\n    }\n    collides(shape: ShapeType): boolean {\n        return testEllipseShape(this, shape);\n    }\n    contains(point: Vec2): boolean {\n        // Both methods work, but the second one is faster\n        /*let T = this.toTransform()\n        point = point.sub(this.center)\n        point = T.inverse.transform(point)\n        return testCirclePoint(new Circle(vec2(), 1), point)*/\n        point = point.sub(this.center);\n        const angle = deg2rad(this.angle);\n        const c = Math.cos(angle);\n        const s = Math.sin(angle);\n        const vx = point.x * c + point.y * s;\n        const vy = -point.x * s + point.y * c;\n        return vx * vx / (this.radiusX * this.radiusX)\n                + vy * vy / (this.radiusY * this.radiusY) < 1;\n    }\n    raycast(origin: Vec2, direction: Vec2): RaycastResult {\n        return raycastEllipse(origin, direction, this);\n    }\n    random(): Vec2 {\n        return this.center;\n    }\n    serialize(): any {\n        return {\n            Ellipse: {\n                center: this.center.serialize(),\n                radiusX: this.radiusX,\n                radiusY: this.radiusY,\n                angle: this.angle,\n            },\n        };\n    }\n    support(direction: Vec2): Vec2 {\n        // Axis aligned\n        if (this.angle === 0.0) {\n            let axis = new Vec2(direction.x, direction.y);\n            Vec2.unit(axis, axis);\n            Vec2.scalec(axis, this.radiusX, this.radiusY, axis);\n            Vec2.add(axis, this.center, axis);\n            return axis;\n        }\n        // Rotated\n        else {\n            let axis = new Vec2(direction.x, direction.y);\n            Vec2.rotateByAngle(axis, -this.angle, axis);\n            Vec2.unit(axis, axis);\n            Vec2.scalec(axis, this.radiusX, this.radiusY, axis);\n            Vec2.rotateByAngle(axis, this.angle, axis);\n            Vec2.add(axis, this.center, axis);\n            return axis;\n        }\n    }\n    get gjkCenter(): Vec2 {\n        return this.center;\n    }\n}\n\nfunction segmentLineIntersection(a: Vec2, b: Vec2, c: Vec2, d: Vec2) {\n    const ab = b.sub(a);\n    const cd = d.sub(c);\n    let s = ab.cross(cd);\n    if (s < 0.00001 && s > -0.00001) return null;\n    const ac = c.sub(a);\n    s = ac.cross(cd) / s;\n    if (s < 0 || s > 1) return null;\n    return a.add(ab.scale(s));\n}\n\n/**\n * @group Math\n */\nexport class Polygon {\n    pts: Vec2[];\n    constructor(pts: Vec2[]) {\n        if (pts.length < 3) {\n            throw new Error(\"Polygons should have at least 3 vertices\");\n        }\n        this.pts = pts;\n        /*this.center = new Vec2(pts[0].x, pts[0].y);\n        for (let i = 1; i < pts.length; i++) {\n            this.center.x += pts[i].x;\n            this.center.y += pts[i].y;\n        }\n        this.center.x /= pts.length;\n        this.center.y /= pts.length;*/\n    }\n    transform(m: Mat23, s?: Shape): Polygon {\n        // TODO: resize existing pts array?\n        if (s && s instanceof Polygon && s.pts.length == this.pts.length) {\n            for (let i = 0; i < this.pts.length; i++) {\n                m.transformPointV(this.pts[i], s.pts[i]);\n            }\n            return s;\n        }\n        return new Polygon(this.pts.map((pt) => m.transformPointV(pt, vec2())));\n    }\n    bbox(): Rect {\n        const p1 = vec2(Number.MAX_VALUE);\n        const p2 = vec2(-Number.MAX_VALUE);\n        for (const pt of this.pts) {\n            p1.x = Math.min(p1.x, pt.x);\n            p2.x = Math.max(p2.x, pt.x);\n            p1.y = Math.min(p1.y, pt.y);\n            p2.y = Math.max(p2.y, pt.y);\n        }\n        return Rect.fromPoints(p1, p2);\n    }\n    area(): number {\n        let total = 0;\n        const l = this.pts.length;\n        for (let i = 0; i < l; i++) {\n            const p1 = this.pts[i];\n            const p2 = this.pts[(i + 1) % l];\n            total += p1.x * p2.y * 0.5;\n            total -= p2.x * p1.y * 0.5;\n        }\n        return Math.abs(total);\n    }\n    clone(): Polygon {\n        return new Polygon(this.pts.map((pt) => pt.clone()));\n    }\n    collides(shape: ShapeType | Vec2): boolean {\n        return testPolygonShape(this, shape);\n    }\n    contains(point: Vec2): boolean {\n        return this.collides(point);\n    }\n    raycast(origin: Vec2, direction: Vec2): RaycastResult {\n        return raycastPolygon(origin, direction, this);\n    }\n    random(): Vec2 {\n        /**\n         * TODO:\n         * - cut into triangles\n         * - choose a random triangle with probability linked to surface area\n         * - choose a random point in the triangle\n         */\n        return vec2();\n    }\n    cut(\n        a: Vec2,\n        b: Vec2,\n        srcUv?: Vec2[],\n        dstUv?: [Vec2[], Vec2[]],\n    ): [Polygon | null, Polygon | null] {\n        const surfaceLine = new Line(a, b);\n        const left: Array<Vec2> = [];\n        const right: Array<Vec2> = [];\n        const ab = b.sub(a);\n        let prev = this.pts[this.pts.length - 1];\n        let ap = prev.sub(a);\n        let wasLeft = ab.cross(ap) > 0;\n        this.pts.forEach((p, index) => {\n            ap = p.sub(a);\n            const isLeft = ab.cross(ap) > 0;\n            if (wasLeft != isLeft) {\n                // Since the points are on opposite sides of the line, we know they intersect\n                const intersection = segmentLineIntersection(prev, p, a, b)!;\n                left.push(intersection);\n                right.push(intersection);\n                if (srcUv && dstUv) {\n                    const uv1 =\n                        srcUv[index === 0 ? srcUv.length - 1 : index - 1];\n                    const uv2 = srcUv[index];\n                    const ab = p.sub(prev);\n                    const ac = intersection.sub(prev);\n                    const alpha = ac.dot(ab) / ab.dot(ab);\n                    const uv = lerp(uv1, uv2, alpha);\n                    dstUv[0].push(uv);\n                    dstUv[1].push(uv);\n                }\n                wasLeft = isLeft;\n            }\n            (isLeft ? left : right).push(p);\n            if (srcUv && dstUv) {\n                (isLeft ? dstUv[0] : dstUv[1]).push(srcUv[index]);\n            }\n            prev = p;\n        });\n        return [\n            left.length ? new Polygon(left) : null,\n            right.length ? new Polygon(right) : null,\n        ];\n    }\n    serialize(): any {\n        return { Polygon: { pts: this.pts.map(p => p.serialize()) } };\n    }\n    support(direction: Vec2): Vec2 {\n        let maxPoint = this.pts[0];\n        let maxDistance = maxPoint.dot(direction);\n\n        let vertex;\n        for (let i = 1; i < this.pts.length; i++) {\n            vertex = this.pts[i];\n            const distance = vertex.dot(direction);\n            if (distance > maxDistance) {\n                maxDistance = distance;\n                maxPoint = vertex;\n            }\n        }\n\n        return maxPoint;\n    }\n    get gjkCenter(): Vec2 {\n        return this.pts[0];\n    }\n}\n\nexport function shapeFactory(data: any): Shape {\n    const type = Object.keys(data)[0];\n    const d = data[type];\n    switch (type) {\n        case \"Point\":\n            return new Point(Vec2.deserialize(d.pt));\n        case \"Line\":\n            return new Line(Vec2.deserialize(d.p1), Vec2.deserialize(d.p2));\n        case \"Rect\":\n            return new Rect(Vec2.deserialize(d.pos), d.width, d.height);\n        case \"Circle\":\n            return new Circle(Vec2.deserialize(d.pos), d.radius);\n        case \"Ellipse\":\n            return new Ellipse(\n                Vec2.deserialize(d.pos),\n                d.radiusX,\n                d.radiusY,\n                d.angle,\n            );\n        case \"Polygon\":\n            return new Polygon(data.pts.map((p: any) => Vec2.deserialize(p)));\n    }\n    throw new Error(`Unknown shape type ${type} in serialized data`);\n}\n\nexport function evaluateQuadratic(\n    pt1: Vec2,\n    pt2: Vec2,\n    pt3: Vec2,\n    t: number,\n) {\n    const t2 = t * t;\n    const mt = 1 - t;\n    const mt2 = mt * mt;\n    return pt1.scale(mt2).add(pt2.scale(2 * mt * t)).add(\n        pt3.scale(t2),\n    );\n}\n\nexport function evaluateQuadraticFirstDerivative(\n    pt1: Vec2,\n    pt2: Vec2,\n    pt3: Vec2,\n    t: number,\n) {\n    const mt = 1 - t;\n    return pt2.sub(pt1).scale(2 * mt).add(pt3.sub(pt2).scale(2 * t));\n}\n\nexport function evaluateQuadraticSecondDerivative(\n    pt1: Vec2,\n    pt2: Vec2,\n    pt3: Vec2,\n    t: number,\n) {\n    return pt3.sub(pt2.scale(2)).add(pt1).scale(2);\n}\n\nexport function evaluateBezier(\n    pt1: Vec2,\n    pt2: Vec2,\n    pt3: Vec2,\n    pt4: Vec2,\n    t: number,\n) {\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const mt = 1 - t;\n    const mt2 = mt * mt;\n    const mt3 = mt2 * mt;\n    return pt1.scale(mt3).add(pt2.scale(3 * mt2 * t)).add(\n        pt3.scale(3 * mt * t2),\n    ).add(pt4.scale(t3));\n}\n\nexport function evaluateBezierFirstDerivative(\n    pt1: Vec2,\n    pt2: Vec2,\n    pt3: Vec2,\n    pt4: Vec2,\n    t: number,\n) {\n    const t2 = t * t;\n    const mt = 1 - t;\n    const mt2 = mt * mt;\n    return pt2.sub(pt1).scale(3 * mt2).add(pt3.sub(pt2).scale(6 * mt * t)).add(\n        pt4.sub(pt3).scale(3 * t2),\n    );\n}\n\nexport function evaluateBezierSecondDerivative(\n    pt1: Vec2,\n    pt2: Vec2,\n    pt3: Vec2,\n    pt4: Vec2,\n    t: number,\n) {\n    const mt = 1 - t;\n    return pt3.sub(pt2.scale(2)).add(pt1).scale(6 * mt).add(\n        pt4.sub(pt3.scale(2)).add(pt2).scale(6 * t),\n    );\n}\n\nexport function evaluateCatmullRom(\n    pt1: Vec2,\n    pt2: Vec2,\n    pt3: Vec2,\n    pt4: Vec2,\n    t: number,\n) {\n    const A = 0.5 * (((-t + 2) * t - 1) * t);\n    const B = 0.5 * (((3 * t - 5) * t) * t + 2);\n    const C = 0.5 * (((-3 * t + 4) * t + 1) * t);\n    const D = 0.5 * (((t - 1) * t) * t);\n    return pt1.scale(A).add(pt2.scale(B)).add(pt3.scale(C)).add(pt4.scale(D));\n}\n\nexport function evaluateCatmullRomFirstDerivative(\n    pt1: Vec2,\n    pt2: Vec2,\n    pt3: Vec2,\n    pt4: Vec2,\n    t: number,\n) {\n    const A = 0.5 * ((-3 * t + 4) * t - 1);\n    const B = 0.5 * ((9 * t - 10) * t);\n    const C = 0.5 * ((-9 * t + 8) * t + 1);\n    const D = 0.5 * ((3 * t - 2) * t);\n    return pt1.scale(A).add(pt2.scale(B)).add(pt3.scale(C)).add(pt4.scale(D));\n}\n\nexport function normalizedCurve(curve: (t: number) => Vec2) {\n    const curveLength = curveLengthApproximation(curve);\n    const length = curveLength(1);\n    return (s: number) => {\n        const l = s * length;\n        const t = curveLength(l, true);\n        return curve(t);\n    };\n}\n\nexport function curveLengthApproximation(\n    curve: (t: number) => Vec2,\n    entries: number = 10,\n    detail: number = 10,\n) {\n    const llut = [0];\n    const tlut = [0];\n    const dt = 1 / (entries - 1);\n    const ddt = dt / detail;\n    let length = 0;\n    let pp = curve(0);\n    let t = 0;\n    for (let e = 1; e < entries; e++) {\n        for (let d = 0; d < detail; d++) {\n            t += ddt;\n            const p = curve(t);\n            const l = p.dist(pp);\n            length += l;\n            pp = p;\n        }\n        llut[e] = length;\n        tlut[e] = t;\n    }\n    tlut[entries - 1] = 1;\n    return (t: number, inverse: boolean = false) => {\n        if (inverse) {\n            const l = t;\n            if (l <= 0) return 0;\n            if (l >= length) return 1;\n            let index = 0;\n            while (llut[index + 1] < l) index++;\n            const t1 = tlut[index];\n            const t2 = tlut[index + 1];\n            const l1 = llut[index];\n            const l2 = llut[index + 1];\n            const a = (l - l1) / (l2 - l1);\n            return t1 + (t2 - t1) * a;\n        }\n        else {\n            if (t <= 0) return 0;\n            if (t >= 1) return llut[entries - 1];\n            let index = 0;\n            while (tlut[index + 1] < t) index++;\n            const t1 = tlut[index];\n            const t2 = tlut[index + 1];\n            const l1 = llut[index];\n            const l2 = llut[index + 1];\n            const a = (t - t1) / (t2 - t1);\n            return l1 + (l2 - l1) * a;\n        }\n    };\n}\n\n/**\n * A second order function returning an evaluator for the given 1D Hermite curve\n * @param pt1 - First point\n * @param m1 - First control point (tangent)\n * @param m2 - Second control point (tangent)\n * @param pt2 - Second point\n *\n * @returns A function which gives the value on the 1D Hermite curve at t\n */\nexport function hermite(pt1: number, m1: number, m2: number, pt2: number) {\n    const A = 2 * pt1 + m1 - 2 * pt2 + m2;\n    const B = -3 * pt1 + 3 * pt2 - 2 * m1 - m2;\n    const C = m1;\n    const D = pt1;\n\n    return (t: number) => {\n        const t2 = t * t;\n        const t3 = t2 * t;\n        return A * t3 + B * t2 + C * t + D;\n    };\n}\n\n/**\n * A second order function returning an evaluator for the given 2D Cardinal curve\n * @param pt1 - Previous point\n * @param pt2 - First point\n * @param pt3 - Second point\n * @param pt4 - Next point\n * @param tension - The tension of the curve, [0..1] from round to tight.\n * @param h - The hermite function or one of its derivatives.\n *\n * @returns A function which gives the value on the 2D Cardinal curve at t\n */\nexport function cardinal(\n    pt1: Vec2,\n    pt2: Vec2,\n    pt3: Vec2,\n    pt4: Vec2,\n    tension: number,\n    h = hermite,\n) {\n    const hx = h(\n        pt2.x,\n        (1 - tension) * (pt3.x - pt1.x),\n        (1 - tension) * (pt4.x - pt2.x),\n        pt3.x,\n    );\n    const hy = h(\n        pt2.y,\n        (1 - tension) * (pt3.y - pt1.y),\n        (1 - tension) * (pt4.y - pt2.y),\n        pt3.y,\n    );\n    return (t: number) => {\n        return new Vec2(hx(t), hy(t));\n    };\n}\n\n/**\n * A second order function returning an evaluator for the given 2D Catmull-Rom curve\n * @param pt1 - Previous point\n * @param pt2 - First point\n * @param pt3 - Second point\n * @param pt4 - Next point\n *\n * @returns A function which gives the value on the 2D Catmull-Rom curve at t\n */\nexport function catmullRom(\n    pt1: Vec2,\n    pt2: Vec2,\n    pt3: Vec2,\n    pt4: Vec2,\n    h = hermite,\n) {\n    // A Catmull-Rom curve is a Cardinal curve with as tension 0.5\n    return cardinal(pt1, pt2, pt3, pt4, 0.5, h);\n}\n\n/**\n * A second order function returning an evaluator for the given 2D quadratic Bezier curve\n * @param pt1 - First point\n * @param pt2 - First control point\n * @param pt3 - Second control point\n * @param pt4 - Second point\n *\n * @returns A function which gives the value on the 2D quadratic Bezier curve at t\n */\nexport function bezier(\n    pt1: Vec2,\n    pt2: Vec2,\n    pt3: Vec2,\n    pt4: Vec2,\n    h = hermite,\n) {\n    // Convert the Bezier to a Catmull-Rom curve\n    return catmullRom(\n        pt4.add(pt1.sub(pt2).scale(6)),\n        pt1,\n        pt4,\n        pt1.add(pt4.sub(pt3).scale(6)),\n        h,\n    );\n}\n\n/**\n * A second order function returning an evaluator for the given 2D Kochanek\u2013Bartels curve\n * @param pt1 - Previous point\n * @param pt2 - First point\n * @param pt3 - Second point\n * @param pt4 - Next point\n * @param tension - The tension of the curve, [-1..1] from round to tight.\n * @param continuity - The continuity of the curve, [-1..1] from box corners to inverted corners.\n * @param bias - The bias of the curve, [-1..1] from pre-shoot to post-shoot.\n *\n * @returns A function which gives the value on the 2D Kochanek\u2013Bartels curve at t\n */\nexport function kochanekBartels(\n    pt1: Vec2,\n    pt2: Vec2,\n    pt3: Vec2,\n    pt4: Vec2,\n    tension: number,\n    continuity: number,\n    bias: number,\n    h = hermite,\n) {\n    const hx = h(\n        pt2.x,\n        0.5 * (1 - tension) * (1 + bias) * (1 + continuity) * (pt2.x - pt1.x)\n            + 0.5 * (1 - tension) * (1 - bias) * (1 - continuity)\n                * (pt3.x - pt2.x),\n        0.5 * (1 - tension) * (1 + bias) * (1 - continuity) * (pt3.x - pt2.x)\n            + 0.5 * (1 - tension) * (1 - bias) * (1 + continuity)\n                * (pt4.x - pt3.x),\n        pt3.x,\n    );\n    const hy = h(\n        pt2.y,\n        0.5 * (1 - tension) * (1 + bias) * (1 + continuity) * (pt2.y - pt1.y)\n            + 0.5 * (1 - tension) * (1 - bias) * (1 - continuity)\n                * (pt3.y - pt2.y),\n        0.5 * (1 - tension) * (1 + bias) * (1 - continuity) * (pt3.y - pt2.y)\n            + 0.5 * (1 - tension) * (1 - bias) * (1 + continuity)\n                * (pt4.y - pt3.y),\n        pt3.y,\n    );\n    return (t: number) => {\n        return new Vec2(hx(t), hy(t));\n    };\n}\n\n/**\n * A second order function returning an evaluator for the derivative of the given 1D Hermite curve\n * @param pt1 - First point\n * @param m1 - First control point (tangent)\n * @param m2 - Second control point (tangent)\n * @param pt2 - Second point\n *\n * @returns A function which gives the first derivative on the 1D Hermite curve at t\n */\nexport function hermiteFirstDerivative(\n    pt1: number,\n    m1: number,\n    m2: number,\n    pt2: number,\n) {\n    const A = 2 * pt1 + m1 - 2 * pt2 + m2;\n    const B = -3 * pt1 + 3 * pt2 - 2 * m1 + m2;\n    const C = m1;\n\n    return (t: number) => {\n        const t2 = t * t;\n        return 3 * A * t2 + 2 * B * t + C;\n    };\n}\n\n// True if t is between 0 and 1\nfunction inZeroOneDomain(t: number) {\n    return 0 <= t && t <= 1;\n}\n\n// True if a and b are almost equal\nfunction approximately(a: number, b: number) {\n    return Math.abs(a - b) <= Number.EPSILON;\n}\n\n// Calculates the cube root \u221B of the given number\nfunction cubeRoot(v: number) {\n    if (v < 0) {\n        return -Math.pow(-v, 1 / 3);\n    }\n    else {\n        return Math.pow(v, 1 / 3);\n    }\n}\n\n// Get all cubic roots of the given 1 dimensional bezier\nfunction getCubicRoots(pa: number, pb: number, pc: number, pd: number) {\n    let a = 3 * pa - 6 * pb + 3 * pc;\n    let b = -3 * pa + 3 * pb;\n    let c = pa;\n    let d = -pa + 3 * pb - 3 * pc + pd;\n\n    if (approximately(d, 0)) {\n        if (approximately(a, 0)) {\n            if (approximately(b, 0)) {\n                return [];\n            }\n            return [-c / b].filter(inZeroOneDomain);\n        }\n        const q = Math.sqrt(b * b - 4 * a * c);\n        const a2 = 2 * a;\n        return [(q - b) / a2, (-b - q) / a2].filter(inZeroOneDomain);\n    }\n\n    a /= d;\n    b /= d;\n    c /= d;\n\n    const p = (3 * b - a * a) / 3;\n    const p3 = p / 3;\n    const q = (2 * a * a * a - 9 * a * b + 27 * c) / 27;\n    const q2 = q / 2;\n    const discriminant = q2 * q2 + p3 * p3 * p3;\n\n    if (discriminant < 0) {\n        const mp3 = -p / 3;\n        const mp33 = mp3 * mp3 * mp3;\n        const r = Math.sqrt(mp33);\n        const t = -q / (2 * r);\n        const cosphi = t < -1 ? -1 : t > 1 ? 1 : t;\n        const phi = Math.acos(cosphi);\n        const crtr = cubeRoot(r);\n        const t1 = 2 * crtr;\n        const root1 = t1 * Math.cos(phi / 3) - a / 3;\n        const root2 = t1 * Math.cos((phi + 2 * Math.PI) / 3) - a / 3;\n        const root3 = t1 * Math.cos((phi + 4 * Math.PI) / 3) - a / 3;\n        return [root1, root2, root3].filter(inZeroOneDomain);\n    }\n\n    if (discriminant === 0) {\n        const u1 = q2 < 0 ? cubeRoot(-q2) : -cubeRoot(q2);\n        const root1 = 2 * u1 - a / 3;\n        const root2 = -u1 - a / 3;\n        return [root1, root2].filter(inZeroOneDomain);\n    }\n\n    const sd = Math.sqrt(discriminant);\n    const u1 = cubeRoot(sd - q2);\n    const v1 = cubeRoot(sd + q2);\n    const root1 = u1 - v1 - a / 3;\n    return [root1].filter(inZeroOneDomain);\n}\n\n// Returns y for the given x on the cubic bezier by first calculating the t for the given x, then calculating y from t\nfunction cubicBezierYforX(a: Vec2, b: Vec2, c: Vec2, d: Vec2, x: number) {\n    // Get t for x\n    const t = getCubicRoots(a.x - x, b.x - x, c.x - x, d.x - x);\n    if (t.length > 0) {\n        // Get y for t\n        return evaluateBezier(a, b, c, d, t[0]).y;\n    }\n    return NaN;\n}\n\nexport function easingLinear(keys: Vec2[]) {\n    if (!keys || keys.length == 0) {\n        throw new Error(\n            \"Need at least one point for easingLinear.\",\n        );\n    }\n    const len = keys.length;\n    return (x: number) => {\n        // Before start\n        if (x <= 0 || keys.length == 1 || x <= keys[0].x) {\n            return keys[0].y;\n        }\n        for (let i = 0; i < len; i++) {\n            if (keys[i].x >= x) {\n                // Linear map\n                return map(\n                    x,\n                    keys[i - 1].x,\n                    keys[i].x,\n                    keys[i - 1].y,\n                    keys[i].y,\n                );\n            }\n        }\n        // After end\n        return keys[keys.length - 1].y;\n    };\n}\n\nexport function easingCubicBezier(p1: Vec2, p2: Vec2) {\n    return (x: number) => {\n        return cubicBezierYforX(vec2(0, 0), p1, p2, vec2(1, 1), x);\n    };\n}\n\n/**\n * @group Math\n * @subgroup Tween\n */\nexport type StepPosition =\n    | \"jump-start\"\n    | \"jump-end\"\n    | \"jump-none\"\n    | \"jump-both\";\n\nexport function easingSteps(\n    steps: number,\n    position: StepPosition = \"jump-end\",\n) {\n    const xdist = 1 / steps;\n    const jumpStart = position == \"jump-start\" || position == \"jump-both\";\n    const jumpEnd = position == \"jump-end\" || position == \"jump-both\";\n    const ydist = 1 / (steps + (jumpEnd ? 1 : 0));\n    const startY = jumpStart ? ydist : 0;\n    return (x: number) => {\n        const step = Math.floor(x / xdist);\n        return startY + step * ydist;\n    };\n}\n\n// true if the angle is oriented counter clockwise\nfunction isOrientedCcw(a: Vec2, b: Vec2, c: Vec2) {\n    // return det(b-a, c-a) >= 0\n    return ((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) >= 0;\n}\n\n// true if the polygon is oriented counter clockwise\nfunction isOrientedCcwPolygon(polygon: Vec2[]) {\n    let total = 0;\n    let prev: Vec2 = polygon[polygon.length - 1];\n    for (let i = 0; i < polygon.length; i++) {\n        total += (polygon[i].x - prev.x) * (polygon[i].y + prev.y);\n        prev = polygon[i];\n    }\n    return total < 0;\n}\n\n// true if a and b are on the same side of the line c->d\nfunction onSameSide(a: Vec2, b: Vec2, c: Vec2, d: Vec2) {\n    const px = d.x - c.x, py = d.y - c.y;\n    // return det(p, a-c) * det(p, b-c) >= 0\n    const l = px * (a.y - c.y) - py * (a.x - c.x);\n    const m = px * (b.y - c.y) - py * (b.x - c.x);\n    return l * m >= 0;\n}\n\n// true if p is contained in the triangle abc\nfunction pointInTriangle(p: Vec2, a: Vec2, b: Vec2, c: Vec2) {\n    return onSameSide(p, a, b, c) && onSameSide(p, b, a, c)\n        && onSameSide(p, c, a, b);\n}\n\n// true if any vertex in the list `vertices' is in the triangle abc.\nfunction someInTriangle(vertices: Vec2[], a: Vec2, b: Vec2, c: Vec2) {\n    for (const p of vertices) {\n        if (\n            (p !== a) && (p !== b) && (p !== c) && pointInTriangle(p, a, b, c)\n        ) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// true if the triangle is an ear, which is whether it can be cut off from the polygon without leaving a hole behind\nfunction isEar(a: Vec2, b: Vec2, c: Vec2, vertices: Vec2[]) {\n    return isOrientedCcw(a, b, c) && !someInTriangle(vertices, a, b, c);\n}\n\nexport function triangulate(pts: Vec2[]): Vec2[][] {\n    if (pts.length < 3) {\n        return [];\n    }\n    if (pts.length == 3) {\n        return [pts];\n    }\n\n    /* Create a list of indexes to the previous and next points of a given point\n    prev_idx[i] gives the index to the previous point of the point at i */\n    let nextIdx = [];\n    let prevIdx = [];\n    let idx = 0;\n    for (let i = 0; i < pts.length; i++) {\n        const lm = pts[idx];\n        const pt = pts[i];\n        if (pt.x < lm.x || (pt.x == lm.x && pt.y < lm.y)) {\n            idx = idx;\n        }\n        nextIdx[i] = i + 1;\n        prevIdx[i] = i - 1;\n    }\n    nextIdx[nextIdx.length - 1] = 0;\n    prevIdx[0] = prevIdx.length - 1;\n\n    // If the polygon is not counter clockwise, swap the lists, thus reversing the winding\n    if (!isOrientedCcwPolygon(pts)) {\n        [nextIdx, prevIdx] = [prevIdx, nextIdx];\n    }\n\n    const concaveVertices = [];\n    for (let i = 0; i < pts.length; ++i) {\n        if (!isOrientedCcw(pts[prevIdx[i]], pts[i], pts[nextIdx[i]])) {\n            concaveVertices.push(pts[i]);\n        }\n    }\n\n    const triangles = [];\n    let nVertices = pts.length;\n    let current = 1;\n    let skipped = 0;\n    let next;\n    let prev;\n    while (nVertices > 3) {\n        next = nextIdx[current];\n        prev = prevIdx[current];\n        const a = pts[prev];\n        const b = pts[current];\n        const c = pts[next];\n        if (isEar(a, b, c, concaveVertices)) {\n            triangles.push([a, b, c]);\n            nextIdx[prev] = next;\n            prevIdx[next] = prev;\n            concaveVertices.splice(concaveVertices.indexOf(b), 1);\n            --nVertices;\n            skipped = 0;\n        }\n        else if (++skipped > nVertices) {\n            return [];\n        }\n        current = next;\n    }\n    next = nextIdx[current];\n    prev = prevIdx[current];\n    triangles.push([pts[prev], pts[current], pts[next]]);\n\n    return triangles;\n}\n\nexport function isConvex(pts: Vec2[]) {\n    if (pts.length < 3) {\n        return false;\n    }\n\n    // a polygon is convex if all corners turn in the same direction\n    // turning direction can be determined using the cross-product of\n    // the forward difference vectors\n    let i = pts.length - 2;\n    let j = pts.length - 1;\n    let k = 0;\n    let p = pts[j].sub(pts[i]);\n    let q = pts[k].sub(pts[j]);\n    let winding = p.cross(q);\n\n    while (k + 1 < pts.length) {\n        i = j;\n        j = k;\n        k++;\n        p = pts[j].sub(pts[i]);\n        q = pts[k].sub(pts[j]);\n\n        if (p.cross(q) * winding < 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "import { deg2rad, rad2deg } from \"./math\";\nimport { Vec2 } from \"./Vec2\";\n\n/**\n * @group Math\n */\nexport class Mat4 {\n    m: number[] = [\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n    ];\n\n    constructor(m?: number[]) {\n        if (m) {\n            this.m = m;\n        }\n    }\n\n    static translate(p: Vec2): Mat4 {\n        return new Mat4([\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            p.x,\n            p.y,\n            0,\n            1,\n        ]);\n    }\n\n    static scale(s: Vec2): Mat4 {\n        return new Mat4([\n            s.x,\n            0,\n            0,\n            0,\n            0,\n            s.y,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n        ]);\n    }\n\n    static rotateX(a: number): Mat4 {\n        a = deg2rad(-a);\n        const c = Math.cos(a);\n        const s = Math.sin(a);\n        return new Mat4([\n            1,\n            0,\n            0,\n            0,\n            0,\n            c,\n            -s,\n            0,\n            0,\n            s,\n            c,\n            0,\n            0,\n            0,\n            0,\n            1,\n        ]);\n    }\n\n    static rotateY(a: number): Mat4 {\n        a = deg2rad(-a);\n        const c = Math.cos(a);\n        const s = Math.sin(a);\n        return new Mat4([\n            c,\n            0,\n            s,\n            0,\n            0,\n            1,\n            0,\n            0,\n            -s,\n            0,\n            c,\n            0,\n            0,\n            0,\n            0,\n            1,\n        ]);\n    }\n\n    static rotateZ(a: number): Mat4 {\n        a = deg2rad(-a);\n        const c = Math.cos(a);\n        const s = Math.sin(a);\n        return new Mat4([\n            c,\n            -s,\n            0,\n            0,\n            s,\n            c,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n        ]);\n    }\n\n    translate(p: Vec2) {\n        this.m[12] += this.m[0] * p.x + this.m[4] * p.y;\n        this.m[13] += this.m[1] * p.x + this.m[5] * p.y;\n        this.m[14] += this.m[2] * p.x + this.m[6] * p.y;\n        this.m[15] += this.m[3] * p.x + this.m[7] * p.y;\n        return this;\n    }\n\n    scale(p: Vec2) {\n        this.m[0] *= p.x;\n        this.m[4] *= p.y;\n        this.m[1] *= p.x;\n        this.m[5] *= p.y;\n        this.m[2] *= p.x;\n        this.m[6] *= p.y;\n        this.m[3] *= p.x;\n        this.m[7] *= p.y;\n        return this;\n    }\n\n    rotate(a: number): Mat4 {\n        a = deg2rad(-a);\n        const c = Math.cos(a);\n        const s = Math.sin(a);\n        const m0 = this.m[0];\n        const m1 = this.m[1];\n        const m4 = this.m[4];\n        const m5 = this.m[5];\n        this.m[0] = m0 * c + m1 * s;\n        this.m[1] = -m0 * s + m1 * c;\n        this.m[4] = m4 * c + m5 * s;\n        this.m[5] = -m4 * s + m5 * c;\n        return this;\n    }\n\n    // TODO: in-place variant\n    mult(other: Mat4): Mat4 {\n        const out = [];\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                out[i * 4 + j] = this.m[0 * 4 + j] * other.m[i * 4 + 0]\n                    + this.m[1 * 4 + j] * other.m[i * 4 + 1]\n                    + this.m[2 * 4 + j] * other.m[i * 4 + 2]\n                    + this.m[3 * 4 + j] * other.m[i * 4 + 3];\n            }\n        }\n        return new Mat4(out);\n    }\n\n    multVec2(p: Vec2): Vec2 {\n        return new Vec2(\n            p.x * this.m[0] + p.y * this.m[4] + this.m[12],\n            p.x * this.m[1] + p.y * this.m[5] + this.m[13],\n        );\n    }\n\n    getTranslation() {\n        return new Vec2(this.m[12], this.m[13]);\n    }\n\n    getScale() {\n        if (this.m[0] != 0 || this.m[1] != 0) {\n            const det = this.m[0] * this.m[5] - this.m[1] * this.m[4];\n            const r = Math.sqrt(this.m[0] * this.m[0] + this.m[1] * this.m[1]);\n            return new Vec2(r, det / r);\n        }\n        else if (this.m[4] != 0 || this.m[5] != 0) {\n            const det = this.m[0] * this.m[5] - this.m[1] * this.m[4];\n            const s = Math.sqrt(this.m[4] * this.m[4] + this.m[5] * this.m[5]);\n            return new Vec2(det / s, s);\n        }\n        else {\n            return new Vec2(0, 0);\n        }\n    }\n\n    getRotation() {\n        if (this.m[0] != 0 || this.m[1] != 0) {\n            const r = Math.sqrt(this.m[0] * this.m[0] + this.m[1] * this.m[1]);\n            return rad2deg(\n                this.m[1] > 0\n                    ? Math.acos(this.m[0] / r)\n                    : -Math.acos(this.m[0] / r),\n            );\n        }\n        else if (this.m[4] != 0 || this.m[5] != 0) {\n            const s = Math.sqrt(this.m[4] * this.m[4] + this.m[5] * this.m[5]);\n            return rad2deg(\n                Math.PI / 2 - (this.m[5] > 0\n                    ? Math.acos(-this.m[4] / s)\n                    : -Math.acos(this.m[4] / s)),\n            );\n        }\n        else {\n            return 0;\n        }\n    }\n\n    getSkew() {\n        if (this.m[0] != 0 || this.m[1] != 0) {\n            const r = Math.sqrt(this.m[0] * this.m[0] + this.m[1] * this.m[1]);\n            return new Vec2(\n                Math.atan(this.m[0] * this.m[4] + this.m[1] * this.m[5])\n                    / (r * r),\n                0,\n            );\n        }\n        else if (this.m[4] != 0 || this.m[5] != 0) {\n            const s = Math.sqrt(this.m[4] * this.m[4] + this.m[5] * this.m[5]);\n            return new Vec2(\n                0,\n                Math.atan(this.m[0] * this.m[4] + this.m[1] * this.m[5])\n                    / (s * s),\n            );\n        }\n        else {\n            return new Vec2(0, 0);\n        }\n    }\n\n    invert(): Mat4 {\n        const out = [];\n\n        const f00 = this.m[10] * this.m[15] - this.m[14] * this.m[11];\n        const f01 = this.m[9] * this.m[15] - this.m[13] * this.m[11];\n        const f02 = this.m[9] * this.m[14] - this.m[13] * this.m[10];\n        const f03 = this.m[8] * this.m[15] - this.m[12] * this.m[11];\n        const f04 = this.m[8] * this.m[14] - this.m[12] * this.m[10];\n        const f05 = this.m[8] * this.m[13] - this.m[12] * this.m[9];\n        const f06 = this.m[6] * this.m[15] - this.m[14] * this.m[7];\n        const f07 = this.m[5] * this.m[15] - this.m[13] * this.m[7];\n        const f08 = this.m[5] * this.m[14] - this.m[13] * this.m[6];\n        const f09 = this.m[4] * this.m[15] - this.m[12] * this.m[7];\n        const f10 = this.m[4] * this.m[14] - this.m[12] * this.m[6];\n        const f11 = this.m[5] * this.m[15] - this.m[13] * this.m[7];\n        const f12 = this.m[4] * this.m[13] - this.m[12] * this.m[5];\n        const f13 = this.m[6] * this.m[11] - this.m[10] * this.m[7];\n        const f14 = this.m[5] * this.m[11] - this.m[9] * this.m[7];\n        const f15 = this.m[5] * this.m[10] - this.m[9] * this.m[6];\n        const f16 = this.m[4] * this.m[11] - this.m[8] * this.m[7];\n        const f17 = this.m[4] * this.m[10] - this.m[8] * this.m[6];\n        const f18 = this.m[4] * this.m[9] - this.m[8] * this.m[5];\n\n        out[0] = this.m[5] * f00 - this.m[6] * f01 + this.m[7] * f02;\n        out[4] = -(this.m[4] * f00 - this.m[6] * f03 + this.m[7] * f04);\n        out[8] = this.m[4] * f01 - this.m[5] * f03 + this.m[7] * f05;\n        out[12] = -(this.m[4] * f02 - this.m[5] * f04 + this.m[6] * f05);\n\n        out[1] = -(this.m[1] * f00 - this.m[2] * f01 + this.m[3] * f02);\n        out[5] = this.m[0] * f00 - this.m[2] * f03 + this.m[3] * f04;\n        out[9] = -(this.m[0] * f01 - this.m[1] * f03 + this.m[3] * f05);\n        out[13] = this.m[0] * f02 - this.m[1] * f04 + this.m[2] * f05;\n\n        out[2] = this.m[1] * f06 - this.m[2] * f07 + this.m[3] * f08;\n        out[6] = -(this.m[0] * f06 - this.m[2] * f09 + this.m[3] * f10);\n        out[10] = this.m[0] * f11 - this.m[1] * f09 + this.m[3] * f12;\n        out[14] = -(this.m[0] * f08 - this.m[1] * f10 + this.m[2] * f12);\n\n        out[3] = -(this.m[1] * f13 - this.m[2] * f14 + this.m[3] * f15);\n        out[7] = this.m[0] * f13 - this.m[2] * f16 + this.m[3] * f17;\n        out[11] = -(this.m[0] * f14 - this.m[1] * f16 + this.m[3] * f18);\n        out[15] = this.m[0] * f15 - this.m[1] * f17 + this.m[2] * f18;\n\n        const det = this.m[0] * out[0]\n            + this.m[1] * out[4]\n            + this.m[2] * out[8]\n            + this.m[3] * out[12];\n\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                out[i * 4 + j] *= 1.0 / det;\n            }\n        }\n\n        return new Mat4(out);\n    }\n\n    clone(): Mat4 {\n        return new Mat4([...this.m]);\n    }\n\n    toString(): string {\n        return this.m.toString();\n    }\n}\n", "import { Mat4 } from \"../math/Mat4\";\nimport { Vec2 } from \"../math/Vec2\";\n\nexport const IDENTITY_MATRIX = new Mat4();\nexport const TOP_LEFT = new Vec2(-1, -1);\nexport const TOP = new Vec2(0, -1);\nexport const TOP_RIGHT = new Vec2(1, -1);\nexport const LEFT = new Vec2(-1, 0);\nexport const CENTER = new Vec2(0, 0);\nexport const RIGHT = new Vec2(1, 0);\nexport const BOTTOM_LEFT = new Vec2(-1, 1);\nexport const BOTTOM = new Vec2(0, 1);\nexport const BOTTOM_RIGHT = new Vec2(1, 1);\n", "import { Color, type ColorArgs, rgb, type RGBValue } from \"../../../math/color\";\nimport type { Comp } from \"../../../types\";\n\n/**\n * The serialized {@link color `color()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedColorComp {\n    color: { r: number; g: number; b: number };\n}\n\n/**\n * The {@link color `color()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface ColorComp extends Comp {\n    color: Color;\n    serialize(): SerializedColorComp;\n}\n\nexport function color(...args: ColorArgs): ColorComp {\n    return {\n        id: \"color\",\n        color: rgb(...args),\n        inspect() {\n            return `color: ${this.color.toString()}`;\n        },\n        serialize() {\n            return {\n                color: this.color.serialize(),\n            };\n        },\n    };\n}\n\nexport function colorFactory(data: any) {\n    return color(Color.deserialize(data));\n}\n", "/**\n * The list of easing functions available.\n *\n * @group Math\n * @subgroup Tween\n */\nexport type EaseFuncs =\n    | \"linear\"\n    | \"easeInSine\"\n    | \"easeOutSine\"\n    | \"easeInOutSine\"\n    | \"easeInQuad\"\n    | \"easeOutQuad\"\n    | \"easeInOutQuad\"\n    | \"easeInCubic\"\n    | \"easeOutCubic\"\n    | \"easeInOutCubic\"\n    | \"easeInQuart\"\n    | \"easeOutQuart\"\n    | \"easeInOutQuart\"\n    | \"easeInQuint\"\n    | \"easeOutQuint\"\n    | \"easeInOutQuint\"\n    | \"easeInExpo\"\n    | \"easeOutExpo\"\n    | \"easeInOutExpo\"\n    | \"easeInCirc\"\n    | \"easeOutCirc\"\n    | \"easeInOutCirc\"\n    | \"easeInBack\"\n    | \"easeOutBack\"\n    | \"easeInOutBack\"\n    | \"easeInElastic\"\n    | \"easeOutElastic\"\n    | \"easeInOutElastic\"\n    | \"easeInBounce\"\n    | \"easeOutBounce\"\n    | \"easeInOutBounce\";\n\n/**\n * A function that takes a time value and returns a new time value.\n *\n * @group Math\n * @subgroup Tween\n */\nexport type EaseFunc = (t: number) => number;\n\n// https://easings.net/\nconst c1 = 1.70158;\nconst c2 = c1 * 1.525;\nconst c3 = c1 + 1;\nconst c4 = (2 * Math.PI) / 3;\nconst c5 = (2 * Math.PI) / 4.5;\n\nexport const easings = {\n    linear: (x: number) => x,\n    easeInSine: (x: number) => 1 - Math.cos((x * Math.PI) / 2),\n    easeOutSine: (x: number) => Math.sin((x * Math.PI) / 2),\n    easeInOutSine: (x: number) => -(Math.cos(Math.PI * x) - 1) / 2,\n    easeInQuad: (x: number) => x * x,\n    easeOutQuad: (x: number) => 1 - (1 - x) * (1 - x),\n    easeInOutQuad: (x: number) =>\n        x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2,\n    easeInCubic: (x: number) => x * x * x,\n    easeOutCubic: (x: number) => 1 - Math.pow(1 - x, 3),\n    easeInOutCubic: (x: number) =>\n        x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2,\n    easeInQuart: (x: number) => x * x * x * x,\n    easeOutQuart: (x: number) => 1 - Math.pow(1 - x, 4),\n    easeInOutQuart: (x: number) =>\n        x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2,\n    easeInQuint: (x: number) => x * x * x * x * x,\n    easeOutQuint: (x: number) => 1 - Math.pow(1 - x, 5),\n    easeInOutQuint: (x: number) =>\n        x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2,\n    easeInExpo: (x: number) => x === 0 ? 0 : Math.pow(2, 10 * x - 10),\n    easeOutExpo: (x: number) => x === 1 ? 1 : 1 - Math.pow(2, -10 * x),\n    easeInOutExpo: (x: number) => {\n        return x === 0\n            ? 0\n            : x === 1\n            ? 1\n            : x < 0.5\n            ? Math.pow(2, 20 * x - 10) / 2\n            : (2 - Math.pow(2, -20 * x + 10)) / 2;\n    },\n    easeInCirc: (x: number) => 1 - Math.sqrt(1 - Math.pow(x, 2)),\n    easeOutCirc: (x: number) => Math.sqrt(1 - Math.pow(x - 1, 2)),\n    easeInOutCirc: (x: number) => {\n        return x < 0.5\n            ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2\n            : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2;\n    },\n    easeInBack: (x: number) => c3 * x * x * x - c1 * x * x,\n    easeOutBack: (x: number) =>\n        1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2),\n    easeInOutBack: (x: number) => {\n        return x < 0.5\n            ? (Math.pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2)) / 2\n            : (Math.pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2;\n    },\n    easeInElastic: (x: number) => {\n        return x === 0\n            ? 0\n            : x === 1\n            ? 1\n            : -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * c4);\n    },\n    easeOutElastic: (x: number) => {\n        return x === 0\n            ? 0\n            : x === 1\n            ? 1\n            : Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c4) + 1;\n    },\n    easeInOutElastic: (x: number) => {\n        return x === 0\n            ? 0\n            : x === 1\n            ? 1\n            : x < 0.5\n            ? -(Math.pow(2, 20 * x - 10) * Math.sin((20 * x - 11.125) * c5)) / 2\n            : (Math.pow(2, -20 * x + 10) * Math.sin((20 * x - 11.125) * c5)) / 2\n                + 1;\n    },\n    easeInBounce: (x: number) => 1 - easings.easeOutBounce(1 - x),\n    easeOutBounce: (x: number) => {\n        const n1 = 7.5625;\n        const d1 = 2.75;\n        if (x < 1 / d1) {\n            return n1 * x * x;\n        }\n        else if (x < 2 / d1) {\n            return n1 * (x -= 1.5 / d1) * x + 0.75;\n        }\n        else if (x < 2.5 / d1) {\n            return n1 * (x -= 2.25 / d1) * x + 0.9375;\n        }\n        else {\n            return n1 * (x -= 2.625 / d1) * x + 0.984375;\n        }\n    },\n    easeInOutBounce: (x: number) => {\n        return x < 0.5\n            ? (1 - easings.easeOutBounce(1 - 2 * x)) / 2\n            : (1 + easings.easeOutBounce(2 * x - 1)) / 2;\n    },\n};\n", "export function toFixed(n: number, f: number) {\n    return Number(n.toFixed(f));\n}\n", "import { type EaseFunc, easings } from \"../../../math/easings\";\nimport { _k } from \"../../../shared\";\nimport type { Comp } from \"../../../types\";\nimport { toFixed } from \"../../../utils/numbers\";\nimport type { TweenController } from \"../misc/timer\";\n\n/**\n * The serialized {@link opacity `opacity()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedOpacityComp {\n    opacity: number;\n}\n\n/**\n * The {@link opacity `opacity()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface OpacityComp extends Comp {\n    /** Opacity of the current object. */\n    opacity: number;\n    /** Fade in at the start. */\n    fadeIn(time?: number, easeFunc?: EaseFunc): TweenController;\n    /** Fade out at the start. */\n    fadeOut(time?: number, easeFunc?: EaseFunc): TweenController;\n    serialize(): SerializedOpacityComp;\n}\n\nexport function opacity(a: number): OpacityComp {\n    return {\n        id: \"opacity\",\n        opacity: a ?? 1,\n        fadeIn(time = 1, easeFunc = easings.linear): TweenController {\n            return _k.game.root.tween(\n                0,\n                this.opacity,\n                time,\n                (a) => this.opacity = a,\n                easeFunc,\n            );\n        },\n        fadeOut(time = 1, easeFunc = easings.linear): TweenController {\n            return _k.game.root.tween(\n                this.opacity,\n                0,\n                time,\n                (a) => this.opacity = a,\n                easeFunc,\n            );\n        },\n        inspect() {\n            return `opacity: ${toFixed(this.opacity, 1)}`;\n        },\n        serialize() {\n            return { opacity: this.opacity };\n        },\n    };\n}\n\nexport function opacityFactory(data: SerializedOpacityComp) {\n    return opacity(data.opacity);\n}\n", "import type { GameObj } from \"../types\";\n\n// Note: I will doom this soon \uD83D\uDE08\uD83D\uDE08\uD83D\uDE08\uD83D\uDE08\nexport function getRenderProps(obj: GameObj<any>) {\n    return {\n        color: obj.color,\n        opacity: obj.opacity,\n        anchor: obj.anchor,\n        outline: obj.outline,\n        shader: obj.shader,\n        uniform: obj.uniform,\n        blend: obj.blend,\n    };\n}\n", "import type { GameObj } from \"../types\";\nimport { deg2rad, Mat23, vec2 } from \"./math\";\nimport { Vec2 } from \"./Vec2\";\n\nexport function calcTransform(obj: GameObj, tr: Mat23): Mat23 {\n    if (obj.parent) {\n        tr.setMat23(obj.parent.transform);\n    }\n    else {\n        tr.setIdentity();\n    }\n    if (obj.pos) tr.translateSelfV(obj.pos);\n    if (obj.angle) tr.rotateSelf(obj.angle);\n    if (obj.scale) tr.scaleSelfV(obj.scale);\n    return tr;\n}\n\nexport function updateTransformRecursive(obj: GameObj) {\n    calcTransform(obj, obj.transform);\n    for (let i = 0; i < obj.children.length; i++) {\n        updateTransformRecursive(obj.children[i]);\n    }\n}\n\nexport function updateChildrenTransformRecursive(obj: GameObj) {\n    for (let i = 0; i < obj.children.length; i++) {\n        updateTransformRecursive(obj.children[i]);\n    }\n}\n\nexport function clampAngle(angle: number) {\n    angle = angle % 360;\n    if (angle < -180) {\n        angle += 360;\n    }\n    else if (angle > 180) {\n        angle -= 360;\n    }\n    return angle;\n}\n\n// convert a screen space coordinate to webgl normalized device coordinate\nexport function screen2ndc(pt: Vec2, width: number, height: number, out: Vec2) {\n    out.x = pt.x / width * 2 - 1;\n    out.y = -pt.y / height * 2 + 1;\n}\n\nexport function getArcPts(\n    pos: Vec2,\n    radiusX: number,\n    radiusY: number,\n    start: number,\n    end: number,\n    res: number = 1,\n): Vec2[] {\n    // normalize and turn start and end angles to radians\n    start = deg2rad(start % 360);\n    end = deg2rad(end % 360);\n    const isLoop = (end - start) == 0;\n    if (end <= start) end += Math.PI * 2;\n\n    const pts: Vec2[] = [];\n    const nverts = Math.round(\n        Math.sqrt(((radiusX + radiusY) / 2) * 20) * (end - start) / Math.PI * 2,\n    ); // Math.ceil((end - start) / deg2rad(8) * res);\n    const step = (end - start) / nverts;\n\n    // Rotate vector v by r nverts+1 times\n    let v = vec2(Math.cos(start), Math.sin(start));\n    const r = vec2(Math.cos(step), Math.sin(step));\n    for (let i = 0; i <= nverts; i++) {\n        pts.push(pos.add(radiusX * v.x, radiusY * v.y));\n        v = vec2(v.x * r.x - v.y * r.y, v.x * r.y + v.y * r.x);\n    }\n\n    // Make sure the endpoints match if it is a loop\n    if (isLoop) {\n        pts[pts.length - 1].x = pts[0].x;\n        pts[pts.length - 1].y = pts[0].y;\n    }\n\n    return pts;\n}\n", "import type { ButtonsDef } from \"./app/inputBindings\";\nimport type { Asset } from \"./assets/asset\";\nimport type { ShaderData, Uniform } from \"./assets/shader\";\nimport type { KAPLAYCtx } from \"./core/contextType\";\nimport type { TypesOpt } from \"./core/taf\";\nimport type { GameObjRaw } from \"./ecs/entity/GameObjRaw\";\nimport type { LineCap, LineJoin } from \"./gfx/draw/drawLine\";\nimport type { Picture } from \"./gfx/draw/drawPicture\";\nimport type { FrameBuffer } from \"./gfx/FrameBuffer\";\nimport type { Color, RGBAValue, RGBValue } from \"./math/color\";\nimport type { Circle, Ellipse, Line, Point, Polygon, Rect } from \"./math/math\";\nimport type { Vec2 } from \"./math/Vec2\";\nimport type { Defined, MergeObj } from \"./utils/types\";\n\nexport type Tag = string;\n\n/**\n * The basic unit of object in KAPLAY. The player, a butterfly, a tree, or even a piece of text.\n *\n * @group Game Obj\n * @subgroup Types\n */\nexport type GameObj<T = any> = GameObjRaw & MergeComps<T>;\n\ntype RemoveCompProps<T> = Defined<\n    {\n        [K in keyof T]: K extends keyof Comp ? never : T[K];\n    }\n>;\n\n/**\n * A type to merge the components of a game object, omitting the default component properties.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport type MergeComps<T> = MergeObj<RemoveCompProps<T>>;\n\nexport type MergePlugins<T extends PluginList<any>> = MergeObj<\n    ReturnType<T[number]>\n>;\n\n/**\n * A component list.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport type CompList<T extends any | undefined> = (T | Tag)[];\nexport type PluginList<T> = Array<T | KAPLAYPlugin<any>>;\n\n/**\n * A key.\n *\n * @group Input\n * @subgroup Keyboard\n */\nexport type Key =\n    | (\n        | \"f1\"\n        | \"f2\"\n        | \"f3\"\n        | \"f4\"\n        | \"f5\"\n        | \"f6\"\n        | \"f7\"\n        | \"f8\"\n        | \"f9\"\n        | \"f10\"\n        | \"f11\"\n        | \"f12\"\n        | \"`\"\n        | \"1\"\n        | \"2\"\n        | \"3\"\n        | \"4\"\n        | \"5\"\n        | \"6\"\n        | \"7\"\n        | \"8\"\n        | \"9\"\n        | \"0\"\n        | \"-\"\n        | \"+\"\n        | \"=\"\n        | \"q\"\n        | \"w\"\n        | \"e\"\n        | \"r\"\n        | \"t\"\n        | \"y\"\n        | \"u\"\n        | \"i\"\n        | \"o\"\n        | \"p\"\n        | \"[\"\n        | \"]\"\n        | \"\\\\\"\n        | \"a\"\n        | \"s\"\n        | \"d\"\n        | \"f\"\n        | \"g\"\n        | \"h\"\n        | \"j\"\n        | \"k\"\n        | \"l\"\n        | \";\"\n        | \"'\"\n        | \"z\"\n        | \"x\"\n        | \"c\"\n        | \"v\"\n        | \"b\"\n        | \"n\"\n        | \"m\"\n        | \",\"\n        | \".\"\n        | \"/\"\n        | \"escape\"\n        | \"backspace\"\n        | \"enter\"\n        | \"tab\"\n        | \"control\"\n        | \"alt\"\n        | \"meta\"\n        | \"space\"\n        | \" \"\n        | \"left\"\n        | \"right\"\n        | \"up\"\n        | \"down\"\n        | \"shift\"\n    )\n    | (string & {});\n\n/**\n * A mouse button.\n *\n * @group Input\n * @subgroup Mouse\n */\nexport type MouseButton = \"left\" | \"right\" | \"middle\" | \"back\" | \"forward\";\n\n/**\n * A gamepad button.\n *\n * @group Input\n * @subgroup Gamepad\n */\nexport type KGamepadButton =\n    | \"north\"\n    | \"east\"\n    | \"south\"\n    | \"west\"\n    | \"ltrigger\"\n    | \"rtrigger\"\n    | \"lshoulder\"\n    | \"rshoulder\"\n    | \"select\"\n    | \"start\"\n    | \"lstick\"\n    | \"rstick\"\n    | \"dpad-up\"\n    | \"dpad-right\"\n    | \"dpad-down\"\n    | \"dpad-left\"\n    | \"home\"\n    | \"capture\"\n    | \"touchpad\";\n\n/**\n * A gamepad stick.\n *\n * @group Input\n * @subgroup Gamepad\n */\nexport type KGamepadStick = \"left\" | \"right\";\n\n/**\n * A gamepad definition. Used in {@link KAPLAYOpt `KAPLAYOpt`}\n *\n * @group Input\n * @subgroup Gamepad\n */\nexport type GamepadDef = {\n    buttons: Record<string, KGamepadButton>;\n    sticks: Partial<Record<KGamepadStick, { x: number; y: number }>>;\n};\n\n/**\n *  A KAPLAY gamepad\n *\n * @group Input\n * @subgroup Gamepad\n */\nexport type KGamepad = {\n    /** The order of the gamepad in the gamepad list. */\n    index: number;\n    /** If certain button is pressed. */\n    isPressed(b: KGamepadButton): boolean;\n    /** If certain button is held down. */\n    isDown(b: KGamepadButton): boolean;\n    /** If certain button is released. */\n    isReleased(b: KGamepadButton): boolean;\n    /** Get the value of a stick. */\n    getStick(stick: KGamepadStick): Vec2;\n};\n\n/**\n * Inspect info for a game object.\n */\nexport type GameObjInspect = Record<Tag, string | null>;\n\nexport type MustKAPLAYOpt = {\n    scale: number;\n    spriteAtlasPadding: number;\n} & KAPLAYOpt;\n\n/**\n * KAPLAY configurations.\n *\n * @group Start\n */\nexport interface KAPLAYOpt {\n    /**\n     * Width of game.\n     */\n    width?: number;\n    /**\n     * Height of game.\n     */\n    height?: number;\n    /**\n     * Pixel scale / size.\n     */\n    scale?: number;\n    /**\n     * Keep aspect ratio and leave black bars on remaining spaces.\n     */\n    letterbox?: boolean;\n    /**\n     * If register debug buttons (default true)\n     */\n    debug?: boolean;\n    /**\n     * Key that toggles debug mode\n     */\n    debugKey?: Key;\n    /**\n     * Default font (defaults to \"monospace\").\n     */\n    font?: string;\n    /**\n     * Device pixel scale (defaults to 1, high pixel density will hurt performance).\n     *\n     * @since v3000.0\n     */\n    pixelDensity?: number;\n    /**\n     * Disable antialias and enable sharp pixel display. If you see rendering artifacts, set `pixelDensity`\n     * param to `Math.min(devicePixelRatio, 2)` and `scale` to FHD resolution (e.g. 960x540 would need scale 2). Will result in up to 4K.\n     */\n    crisp?: boolean;\n    /**\n     * The canvas DOM element to use. If empty will create one.\n     */\n    canvas?: HTMLCanvasElement;\n    /**\n     * The container DOM element to insert the canvas if created. Defaults to document.body.\n     */\n    root?: HTMLElement;\n    /**\n     * Background color. E.g. [ 0, 0, 255 ] for solid blue background, or [ 0, 0, 0, 0 ] for transparent background. Accepts RGB value array or string hex codes.\n     */\n    background?: RGBValue | RGBAValue | string;\n    /**\n     * Default texture filter.\n     */\n    texFilter?: TexFilter;\n    /**\n     * How many log messages can there be on one screen (default 8).\n     */\n    logMax?: number;\n    /**\n     * How many seconds log messages stay on screen (default 4).\n     *\n     * @since v3000.1\n     */\n    logTime?: number;\n    /**\n     * Size of the spatial hash grid for collision detection (default 64).\n     *\n     * @since v3000.0\n     */\n    hashGridSize?: number;\n    /**\n     * If translate touch events as mouse clicks (default true).\n     */\n    touchToMouse?: boolean;\n    /**\n     * If KAPLAY should render a default loading screen when assets are not fully ready (default true).\n     *\n     * @since v3000.0\n     */\n    loadingScreen?: boolean;\n    /**\n     * If pause audio when tab is not active (default false).\n     *\n     * @since v3000.0\n     */\n    backgroundAudio?: boolean;\n    /**\n     * Custom gamepad definitions (see gamepad.json for reference of the format).\n     *\n     * @since v3000.0\n     */\n    gamepads?: Record<string, GamepadDef>;\n    /**\n     * Defined buttons for input binding.\n     *\n     * @since v30010\n     */\n    buttons?: ButtonsDef;\n    /**\n     * Limit framerate to an amount per second.\n     *\n     * @since v3000.0\n     */\n    maxFPS?: number;\n    /**\n     * If focus on the canvas on start (default true).\n     *\n     * @since v3001.0\n     */\n    focus?: boolean;\n    /**\n     * If import all KAPLAY functions to global (default true).\n     */\n    global?: boolean;\n    /**\n     * List of plugins to import.\n     */\n    plugins?: PluginList<any>;\n    /**\n     * Enter burp mode.\n     */\n    burp?: boolean;\n    /**\n     * Make components ids be added as tags.\n     *\n     * That means .is() will return true for components with that id.\n     *\n     * @default true\n     */\n    tagComponentIds?: boolean;\n    /**\n     * Padding used when adding sprites to texture atlas.\n     *\n     * @default 2\n     */\n    spriteAtlasPadding?: number;\n    /**\n     * If the debug inspect view should ignore objects that are paused when choosing\n     * the object to show the inspect view on.\n     *\n     * @default false\n     * @experimental\n     */\n    inspectOnlyActive?: boolean;\n    /**\n     * Which strategy to use for narrow phase collision, gjk or sat\n     * @default \"gjk\"\n     */\n    narrowPhaseCollisionAlgorithm?: string;\n    /**\n     * Timeout (in milliseconds) at which other loaders waiting on sprites will give\n     * up and throw an error.\n     *\n     * Currently this is only used by {@link KAPLAYCtx.loadBitmapFontFromSprite}.\n     *\n     * @default 3000\n     */\n    loadTimeout?: number;\n    /**\n     * TypeScript Advanced Features (TAF) are a series of options for TypeScript\n     * only features.\n     *\n     * It should be created using the helper function `kaplayTypes`.\n     *\n     * ```ts\n     * kaplay({\n     *    types: kaplayTypes<Opt<{\n     *        scenes: {}\n     *    }>>();\n     * });\n     * ```\n     *\n     * @since v4000.0\n     */\n    types?: TypesOpt;\n}\n\n/**\n * A plugin for KAPLAY.\n *\n * @example\n * ```js\n * // a plugin that adds a new function to KAPLAY\n * const myPlugin = (k) => ({\n *    myFunc: () => {\n *       k.debug.log(\"hello from my plugin\")\n *   }\n * })\n *\n * // use the plugin\n * kaplay({\n *   plugins: [ myPlugin ]\n * })\n *\n * // now you can use the new function\n * myFunc()\n * ```\n *\n * @group Plugins\n */\nexport type KAPLAYPlugin<T> = (\n    k: KAPLAYCtx,\n) => T | ((...args: any) => (k: KAPLAYCtx) => T);\n\n/**\n * @group Rendering\n * @subgroup Canvas\n */\nexport type RenderTarget = {\n    destination: FrameBuffer | Picture | null;\n    childrenOnly?: boolean;\n    refreshOnly?: boolean;\n    isFresh?: boolean;\n};\n\n/**\n * @group Game Obj\n * @subgroup Types\n */\nexport type GetOpt = {\n    /**\n     * Recursively get all children and their descendants.\n     */\n    recursive?: boolean;\n    /**\n     * Live update the returned list every time object is added / removed.\n     */\n    liveUpdate?: boolean;\n    /**\n     * Get only by tags or components.\n     */\n    only?: \"tags\" | \"comps\";\n};\n\n/**\n * @group Game Obj\n * @subgroup Types\n */\nexport type QueryOpt = {\n    /**\n     * All objects which include all or any of these tags, depending on includeOp.\n     */\n    include?: string | string[];\n    /**\n     * Selects the operator to use. Defaults to and.\n     */\n    includeOp?: \"and\" | \"or\";\n    /**\n     * All objects which do not have all or any of these tags, depending on excludeOp.\n     */\n    exclude?: string | string[];\n    /**\n     * Selects the operator to use. Defaults to and.\n     */\n    excludeOp?: \"and\" | \"or\";\n    /**\n     * All objects which are near or far to the position of this, depending on distanceOp.\n     */\n    distance?: number;\n    /**\n     * Selects the operator to use. Defaults to near.\n     */\n    distanceOp?: \"near\" | \"far\";\n    /**\n     * All objects visible from this standpoint.\n     */\n    visible?: boolean;\n    /**\n     * All objects in the given group. Defaults to children.\n     */\n    hierarchy?: \"children\" | \"siblings\" | \"ancestors\" | \"descendants\";\n    /**\n     * All objects matching name\n     */\n    name?: string;\n};\n\n/**\n * Sprite animation configuration when playing.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface SpriteAnimPlayOpt {\n    /**\n     * If this anim should be played in loop.\n     */\n    loop?: boolean;\n    /**\n     * When looping should it move back instead of go to start frame again.\n     */\n    pingpong?: boolean;\n    /**\n     * This anim's speed in frames per second.\n     */\n    speed?: number;\n    /**\n     * If the animation should not restart from frame 1 and t=0 if it is already playing.\n     *\n     * @default false\n     */\n    preventRestart?: boolean;\n    /**\n     * Runs when this animation ends.\n     */\n    onEnd?: () => void;\n}\n\n/**\n * @group Assets\n * @subgroup Data\n */\nexport type MusicData = string;\n\n/**\n * @group Assets\n * @subgroup Types\n */\nexport interface LoadFontOpt {\n    filter?: TexFilter;\n    outline?: number | Outline;\n    /**\n     * The size to load the font in (default 64).\n     *\n     * @since v3001.0\n     */\n    size?: number;\n}\n\n/**\n * @group Assets\n * @subgroup Types\n */\nexport type TextureOpt = {\n    filter?: TexFilter;\n    wrap?: TexWrap;\n};\n\n/**\n * @group Assets\n * @subgroup Types\n */\nexport type ImageSource = Exclude<TexImageSource, VideoFrame>;\n\n/**\n * @group Rendering\n * @subgroup Canvas\n */\nexport type Canvas = {\n    width: number;\n    height: number;\n    toImageData(): ImageData;\n    toDataURL(): string;\n    clear(): void;\n    draw(action: () => void): void;\n    free(): void;\n    readonly fb: FrameBuffer;\n};\n\n/**\n * @group Rendering\n * @subgroup Shaders\n */\nexport interface Vertex {\n    pos: Vec2;\n    uv: Vec2;\n    color: Color;\n    opacity: number;\n}\n\n/**\n * @group Rendering\n * @subgroup Shaders\n */\nexport enum BlendMode {\n    Normal = 0,\n    Add = 1,\n    Multiply = 2,\n    Screen = 3,\n    Overlay = 4,\n}\n\n/**\n * @group Rendering\n * @subgroup Shaders\n */\nexport interface Attributes {\n    pos: number[];\n    uv: number[];\n    color: number[];\n    opacity: number[];\n}\n\n/**\n * Texture scaling filter. \"nearest\" is mainly for sharp pixelated scaling, \"linear\" means linear interpolation.\n */\nexport type TexFilter = \"nearest\" | \"linear\";\nexport type TexWrap = \"repeat\" | \"clampToEdge\";\n\n/**\n * Common render properties.\n */\nexport interface RenderProps {\n    pos?: Vec2;\n    scale?: Vec2;\n    angle?: number;\n    skew?: Vec2;\n    color?: Color;\n    opacity?: number;\n    fixed?: boolean;\n    shader?: string | ShaderData | Asset<ShaderData> | null;\n    uniform?: Uniform | null;\n    blend?: BlendMode;\n    outline?: Outline;\n}\n\nexport interface Outline {\n    /**\n     * The width, or thickness of the line.\n     */\n    width?: number;\n    /**\n     * The color of the line.\n     */\n    color?: Color;\n    /**\n     * Opacity (overrides fill opacity).\n     *\n     * @since v3001.0\n     */\n    opacity?: number;\n    /**\n     * Line join.\n     *\n     * @since v3000.0\n     */\n    join?: LineJoin;\n    /**\n     * Miter limit. If the length of the miter divided by the line width exceeds this limit, the style is converted to a bevel.\n     *\n     * @since v3001.0\n     */\n    miterLimit?: number;\n    /**\n     * Line cap.\n     *\n     * @since v3001.0\n     */\n    cap?: LineCap;\n}\n\n/**\n * @group Rendering\n * @subgroup Screen\n */\nexport type Cursor =\n    | string\n    | \"auto\"\n    | \"default\"\n    | \"none\"\n    | \"context-menu\"\n    | \"help\"\n    | \"pointer\"\n    | \"progress\"\n    | \"wait\"\n    | \"cell\"\n    | \"crosshair\"\n    | \"text\"\n    | \"vertical-text\"\n    | \"alias\"\n    | \"copy\"\n    | \"move\"\n    | \"no-drop\"\n    | \"not-allowed\"\n    | \"grab\"\n    | \"grabbing\"\n    | \"all-scroll\"\n    | \"col-resize\"\n    | \"row-resize\"\n    | \"n-resize\"\n    | \"e-resize\"\n    | \"s-resize\"\n    | \"w-resize\"\n    | \"ne-resize\"\n    | \"nw-resize\"\n    | \"se-resize\"\n    | \"sw-resize\"\n    | \"ew-resize\"\n    | \"ns-resize\"\n    | \"nesw-resize\"\n    | \"nwse-resize\"\n    | \"zoom-int\"\n    | \"zoom-out\";\n\n/**\n * @group Draw\n */\nexport type Anchor =\n    | \"topleft\"\n    | \"top\"\n    | \"topright\"\n    | \"left\"\n    | \"center\"\n    | \"right\"\n    | \"botleft\"\n    | \"bot\"\n    | \"botright\";\n\n/**\n * @group Math\n * @subgroup Random\n */\nexport type RNGValue = number | Vec2 | Color;\n\n/**\n * @group Components\n * @subgroup Component Types\n */\nexport interface Comp {\n    /**\n     * Component ID (if left out won't be treated as a comp).\n     */\n    id?: Tag;\n    /**\n     * What other comps this comp depends on.\n     */\n    require?: Tag[];\n    /**\n     * Event that runs when host game obj is added to scene.\n     */\n    add?: () => void;\n    /**\n     * Event that runs at a fixed frame rate.\n     */\n    fixedUpdate?: () => void;\n    /**\n     * Event that runs every frame.\n     */\n    update?: () => void;\n    /**\n     * Event that runs every frame after update.\n     */\n    draw?: () => void;\n    /**\n     * Event that runs when obj is removed from scene.\n     */\n    destroy?: () => void;\n    /**\n     * Debug info for inspect mode.\n     */\n    inspect?: () => string | null;\n    /**\n     * Draw debug info in inspect mode.\n     *\n     * @since v3000.0\n     */\n    drawInspect?: () => void;\n    /**\n     * Serializes the component.\n     *\n     * @since v4000.0\n     */\n    serialize?: () => any;\n}\n\n/**\n * A valid game object id.\n *\n * @group Game Obj\n * @subgroup GameObjID\n */\nexport type GameObjID = number;\n\n/**\n * A component without own properties.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport type EmptyComp = { id: string } & Comp;\n\n/**\n * @group Draw\n */\nexport type Shape = Rect | Line | Point | Circle | Ellipse | Polygon;\n\nexport type Mask = \"intersect\" | \"subtract\";\n\n/**\n * @group Math\n * @subgroup Advanced\n */\nexport type Edge = \"left\" | \"right\" | \"top\" | \"bottom\";\n\n/**\n * @group Math\n * @subgroup Advanced\n */\nexport enum EdgeMask {\n    None = 0,\n    Left = 1,\n    Top = 2,\n    LeftTop = 3,\n    Right = 4,\n    Horizontal = 5,\n    RightTop = 6,\n    HorizontalTop = 7,\n    Bottom = 8,\n    LeftBottom = 9,\n    Vertical = 10,\n    LeftVertical = 11,\n    RightBottom = 12,\n    HorizontalBottom = 13,\n    RightVertical = 14,\n    All = 15,\n}\n", "import {\n    BOTTOM,\n    BOTTOM_LEFT,\n    BOTTOM_RIGHT,\n    CENTER,\n    LEFT,\n    RIGHT,\n    TOP,\n    TOP_LEFT,\n    TOP_RIGHT,\n} from \"../constants/math\";\nimport { Vec2 } from \"../math/Vec2\";\nimport { type Anchor } from \"../types\";\nimport type { TextAlign } from \"./draw/drawText\";\n\n// convert anchor string to a vec2 offset\nexport function anchorPt(orig: Anchor | Vec2): Vec2 {\n    switch (orig) {\n        case \"topleft\":\n            return TOP_LEFT;\n        case \"top\":\n            return TOP;\n        case \"topright\":\n            return TOP_RIGHT;\n        case \"left\":\n            return LEFT;\n        case \"center\":\n            return CENTER;\n        case \"right\":\n            return RIGHT;\n        case \"botleft\":\n            return BOTTOM_LEFT;\n        case \"bot\":\n            return BOTTOM;\n        case \"botright\":\n            return BOTTOM_RIGHT;\n        default:\n            return orig;\n    }\n}\n\nexport function alignPt(align: TextAlign): number {\n    switch (align) {\n        case \"left\":\n            return 0;\n        case \"center\":\n            return 0.5;\n        case \"right\":\n            return 1;\n        default:\n            return 0;\n    }\n}\n", "import type { Uniform } from \"../assets/shader\";\nimport { type Mat23, vec2 } from \"../math/math\";\nimport { Vec2 } from \"../math/Vec2\";\nimport { _k } from \"../shared\";\n\nexport function pushTransform() {\n    _k.gfx.transformStack[++_k.gfx.transformStackIndex].setMat23(\n        _k.gfx.transform,\n    );\n}\n\nexport function popTransform() {\n    if (_k.gfx.transformStackIndex >= 0) {\n        _k.gfx.transform.setMat23(\n            _k.gfx.transformStack[_k.gfx.transformStackIndex--],\n        );\n    }\n}\n\nexport function pushMatrix(m: Mat23) {\n    pushTransform();\n    loadMatrix(m);\n}\n\nexport function multTranslateV(t: Vec2 | undefined) {\n    if (t === undefined) return;\n    if (t.x === 0 && t.y === 0) return;\n    _k.gfx.transform.translateSelfV(t);\n}\n\nexport function multTranslate(x: number, y: number) {\n    if (x === 0 && y === 0) return;\n    _k.gfx.transform.translateSelf(x, y);\n}\n\nexport function multRotate(angle: number | undefined) {\n    if (!angle) return;\n    _k.gfx.transform.rotateSelf(angle);\n}\n\nexport function multScaleV(s: Vec2 | undefined) {\n    if (s === undefined) return;\n    if (s.x === 1 && s.y === 1) return;\n    _k.gfx.transform.scaleSelfV(s);\n}\n\nexport function multScale(x: number, y: number) {\n    if (x === 1 && y === 1) return;\n    _k.gfx.transform.scaleSelf(x, y);\n}\n\nexport function multSkewV(s: Vec2 | undefined) {\n    if (s === undefined) return;\n    if (s.x === 0 && s.y === 0) return;\n    _k.gfx.transform.skewSelfV(s);\n}\n\nexport function multSkew(x: number, y: number) {\n    if (x === 0 && y === 0) return;\n    _k.gfx.transform.skewSelf(x, y);\n}\n\nexport function loadIdentity(m: Mat23) {\n    _k.gfx.transform.setIdentity();\n}\n\nexport function loadMatrix(m: Mat23) {\n    _k.gfx.transform.setMat23(m);\n}\n\nexport function storeMatrix(m: Mat23) {\n    m.setMat23(_k.gfx.transform);\n}\n\nexport function flush() {\n    _k.gfx.renderer.flush(width(), height());\n}\n\n// get game width\nexport function width(): number {\n    return _k.gfx.width;\n}\n\n// get game height\nexport function height(): number {\n    return _k.gfx.height;\n}\n\nexport function center(): Vec2 {\n    return vec2(_k.gfx.width / 2, _k.gfx.height / 2);\n}\n\nexport const usePostEffect = (\n    name: string,\n    uniform?: Uniform | (() => Uniform),\n) => {\n    _k.gfx.postShader = name;\n    _k.gfx.postShaderUniform = uniform ?? null;\n};\n", "import { Color } from \"../math/color\";\nimport { Vec2 } from \"../math/Vec2\";\n\nexport function arrayIsColor(arr: unknown[]): arr is Color[] {\n    return arr[0] instanceof Color;\n}\n\nexport function arrayIsVec2(arr: unknown[]): arr is Vec2[] {\n    return arr[0] instanceof Vec2;\n}\n\nexport function arrayIsNumber(arr: unknown[]): arr is number[] {\n    return typeof arr[0] === \"number\";\n}\n", "import { _k } from \"../shared\";\n\nexport const getErrorMessage = (error: unknown) =>\n    (error instanceof Error) ? error.message : String(error);\n\nexport function deprecate(\n    oldName: string,\n    newName: string,\n    newFunc: (...args: unknown[]) => any,\n) {\n    return (...args: unknown[]) => {\n        deprecateMsg(oldName, newName);\n        return newFunc(...args);\n    };\n}\n\nexport function warn(msg: string) {\n    if (!_k.game.warned.has(msg)) {\n        _k.game.warned.add(msg);\n        console.warn(msg);\n    }\n}\n\nexport function deprecateMsg(oldName: string, newName: string) {\n    warn(`${oldName} is deprecated. Use ${newName} instead.`);\n}\n", "import { _k } from \"../shared\";\nimport { isDataURL } from \"../utils/dataURL\";\n\nexport function fixURL<D>(url: D): D {\n    if (typeof url == \"string\" && window.kaplayjs_assetsAliases[url]) {\n        url = (window.kaplayjs_assetsAliases[url] as unknown) as D;\n    }\n\n    if (typeof url !== \"string\" || isDataURL(url)) return url;\n    return _k.assets.urlPrefix + url as D;\n}\n", "import {\n    DEF_FRAG,\n    DEF_VERT,\n    FRAG_TEMPLATE,\n    VERT_TEMPLATE,\n    VERTEX_FORMAT,\n} from \"../constants/general\";\nimport { type GfxCtx, Texture } from \"../gfx/gfx\";\nimport { Color } from \"../math/color\";\nimport { Mat4 } from \"../math/Mat4\";\nimport { Mat23 } from \"../math/math\";\nimport { Vec2 } from \"../math/Vec2\";\nimport { _k } from \"../shared\";\nimport type { RenderProps } from \"../types\";\nimport { arrayIsColor, arrayIsNumber, arrayIsVec2 } from \"../utils/asserts\";\nimport { getErrorMessage } from \"../utils/log\";\nimport { fetchText, loadProgress } from \"./asset\";\nimport { Asset } from \"./asset\";\nimport { fixURL } from \"./utils\";\n\nclass TextureUnitManager {\n    private static textureMap = new Map<Texture, number>();\n    private static maxUnit = 1;\n\n    constructor() {}\n\n    static getUnitForTexture(texture: Texture): number {\n        let unit = TextureUnitManager.textureMap.get(texture);\n\n        if (unit === undefined) {\n            // Assign new unit\n            unit = TextureUnitManager.maxUnit++;\n\n            // Check if this unit is actually available\n            const gl = _k.gfx.gl;\n            if (gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS) < unit) {\n                throw new Error(\n                    \"Using too many concurrent textures. Try to use less additional textures as uniforms\",\n                );\n            }\n\n            // Assign texture to unit\n            gl.activeTexture(gl.TEXTURE0 + unit);\n            gl.bindTexture(gl.TEXTURE_2D, texture.glTex);\n            gl.activeTexture(gl.TEXTURE0);\n\n            // Remember location\n            TextureUnitManager.textureMap.set(texture, unit);\n        }\n\n        return unit;\n    }\n}\n\n/**\n * @group Assets\n * @subgroup Data\n */\nexport type ShaderData = Shader;\n\n/**\n * Possible values for a shader Uniform.\n *\n * @group Rendering\n * @subgroup Shaders\n */\nexport type UniformValue =\n    | number\n    | Vec2\n    | Color\n    | Mat4\n    | Mat23\n    | number[]\n    | Vec2[]\n    | Color[];\n\n/**\n * Possible uniform value, basically any but \"u_tex\".\n *\n * @group Rendering\n * @subgroup Shaders\n */\nexport type UniformKey = string;\n\n/**\n * @group Rendering\n * @subgroup Shaders\n */\nexport type Uniform = Record<UniformKey, UniformValue>;\n\n/**\n * A shader, yeah.\n *\n * @group Rendering\n * @subgroup Shaders\n */\nexport class Shader {\n    ctx: GfxCtx;\n    glProgram: WebGLProgram;\n\n    constructor(ctx: GfxCtx, vert: string, frag: string, attribs: string[]) {\n        this.ctx = ctx;\n        ctx.onDestroy(() => this.free());\n        this.glProgram = this.compile(vert, frag, attribs);\n    }\n\n    compile(vert: string, frag: string, attribs: string[]) {\n        const gl = this.ctx.gl;\n        const vertShader = gl.createShader(gl.VERTEX_SHADER);\n        const fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n\n        if (!vertShader || !fragShader) {\n            throw new Error(\"Failed to create shader\");\n        }\n\n        // What we should do if vert or frag are null?\n\n        gl.shaderSource(vertShader, vert);\n        gl.shaderSource(fragShader, frag);\n        gl.compileShader(vertShader);\n        gl.compileShader(fragShader);\n\n        const prog = gl.createProgram();\n\n        gl.attachShader(prog!, vertShader!);\n        gl.attachShader(prog!, fragShader!);\n\n        attribs.forEach((attrib, i) => gl.bindAttribLocation(prog!, i, attrib));\n\n        gl.linkProgram(prog!);\n\n        if (!gl.getProgramParameter(prog!, gl.LINK_STATUS)) {\n            const vertError = gl.getShaderInfoLog(vertShader!);\n            if (vertError) throw new Error(\"VERTEX SHADER \" + vertError);\n            const fragError = gl.getShaderInfoLog(fragShader!);\n            if (fragError) throw new Error(\"FRAGMENT SHADER \" + fragError);\n            const linkError = gl.getProgramInfoLog(prog!);\n            if (linkError) throw new Error(\"LINK ERROR: \" + linkError);\n            throw new Error(\"Unknown shader error (gl.LINK_STATUS was false)\");\n        }\n\n        gl.deleteShader(vertShader);\n        gl.deleteShader(fragShader);\n\n        return prog!;\n    }\n\n    bind() {\n        this.ctx.pushProgram(this.glProgram);\n    }\n\n    unbind() {\n        this.ctx.popProgram();\n    }\n\n    send(uniform: Uniform) {\n        const gl = this.ctx.gl;\n        for (const name in uniform) {\n            const val = uniform[name];\n            const loc = gl.getUniformLocation(this.glProgram, name);\n            if (typeof val === \"number\") {\n                gl.uniform1f(loc, val);\n            }\n            else if (val instanceof Mat4) {\n                gl.uniformMatrix4fv(loc, false, new Float32Array(val.m));\n            }\n            else if (val instanceof Mat23) {\n                gl.uniformMatrix4fv(\n                    loc,\n                    false,\n                    new Float32Array([\n                        val.a,\n                        val.b,\n                        0,\n                        0,\n                        val.c,\n                        val.d,\n                        0,\n                        0,\n                        0,\n                        0,\n                        1,\n                        0,\n                        val.e,\n                        val.f,\n                        0,\n                        1,\n                    ]),\n                );\n                // console.log(val)\n            }\n            else if (val instanceof Color) {\n                gl.uniform3f(loc, val.r, val.g, val.b);\n            }\n            else if (val instanceof Vec2) {\n                gl.uniform2f(loc, val.x, val.y);\n            }\n            else if (val instanceof Texture) {\n                gl.uniform1i(loc, TextureUnitManager.getUnitForTexture(val));\n            }\n            else if (Array.isArray(val)) {\n                if (arrayIsNumber(val)) {\n                    gl.uniform1fv(loc, val as number[]);\n                }\n                else if (arrayIsVec2(val)) {\n                    gl.uniform2fv(loc, val.map((v) => [v.x, v.y]).flat());\n                }\n                else if (arrayIsColor(val)) {\n                    gl.uniform3fv(loc, val.map(v => [v.r, v.g, v.b]).flat());\n                }\n            }\n            else {\n                throw new Error(\"Unsupported uniform data type\");\n            }\n        }\n    }\n\n    free() {\n        this.ctx.gl.deleteProgram(this.glProgram);\n    }\n}\n\nexport function makeShader(\n    ggl: GfxCtx,\n    vertSrc: string | null = DEF_VERT,\n    fragSrc: string | null = DEF_FRAG,\n): Shader {\n    const vcode = VERT_TEMPLATE.replace(\"{{user}}\", vertSrc ?? DEF_VERT);\n    const fcode = FRAG_TEMPLATE.replace(\"{{user}}\", fragSrc ?? DEF_FRAG);\n\n    try {\n        return new Shader(\n            ggl,\n            vcode,\n            fcode,\n            VERTEX_FORMAT.map((vert) => vert.name),\n        );\n    } catch (e) {\n        const fmt = /(?<type>^\\w+) SHADER ERROR: 0:(?<line>\\d+): (?<msg>.+)/;\n        const match = getErrorMessage(e).match(fmt);\n        if (!match?.groups) throw e;\n        const line = Number(match.groups.line);\n        const msg = match.groups.msg.trim();\n        const ty = match.groups.type.toLowerCase();\n        const lines = (ty == \"vertex\" ? vcode : fcode).split(\"\\n\");\n        const lineContents = lines[line - 1];\n        throw new Error(`${ty} shader line ${line}: ${msg}\\n${lineContents}`);\n    }\n}\n\nexport function resolveShader(\n    src: RenderProps[\"shader\"],\n): ShaderData | Asset<ShaderData> | null {\n    if (!src) {\n        return _k.gfx.defShader;\n    }\n    if (typeof src === \"string\") {\n        const shader = getShader(src);\n        if (shader) {\n            return shader.data ?? shader;\n        }\n        else if (loadProgress() < 1) {\n            return null;\n        }\n        else {\n            throw new Error(`Shader not found: ${src}`);\n        }\n    }\n    else if (src instanceof Asset) {\n        return src.data ? src.data : src;\n    }\n\n    return src;\n}\n\nexport function getShader(name: string): Asset<ShaderData> | null {\n    return _k.assets.shaders.get(name) ?? null;\n}\n\nexport function loadShader(\n    name: string | null,\n    vert?: string,\n    frag?: string,\n) {\n    return _k.assets.shaders.addLoaded(\n        name,\n        makeShader(_k.gfx.ggl, vert, frag),\n    );\n}\n\nexport function loadShaderURL(\n    name: string | null,\n    vert?: string,\n    frag?: string,\n): Asset<ShaderData> {\n    vert = fixURL(vert);\n    frag = fixURL(frag);\n    const resolveUrl = (url?: string) =>\n        url\n            ? fetchText(url)\n            : Promise.resolve(null);\n    const load = Promise.all([resolveUrl(vert), resolveUrl(frag)])\n        .then(([vcode, fcode]: [string | null, string | null]) => {\n            return makeShader(_k.gfx.ggl, vcode, fcode);\n        });\n    return _k.assets.shaders.add(name, load);\n}\n", "import { Asset } from \"../../assets/asset\";\nimport { resolveShader, type Uniform } from \"../../assets/shader\";\nimport { _k } from \"../../shared\";\nimport { type Attributes, BlendMode, type RenderProps } from \"../../types\";\nimport type { Texture } from \"../gfx\";\nimport { height, width } from \"../stack\";\n\nexport function drawRaw(\n    attributes: Attributes,\n    indices: number[],\n    fixed: boolean = false,\n    tex?: Texture,\n    shaderSrc?: RenderProps[\"shader\"],\n    uniform?: Uniform,\n    blend?: BlendMode,\n) {\n    const parsedTex = tex ?? _k.gfx.defTex;\n    const parsedShader = shaderSrc ?? _k.gfx.defShader;\n    const shader = resolveShader(parsedShader);\n\n    if (!shader || shader instanceof Asset) {\n        return;\n    }\n\n    const transform = _k.gfx.transform;\n\n    const vertLength = attributes.pos.length / 2;\n    const vv: number[] = new Array(vertLength * 8);\n\n    let index = 0;\n    for (let i = 0; i < vertLength; i++) {\n        _k.gfx.scratchPt.x = attributes.pos[i * 2];\n        _k.gfx.scratchPt.y = attributes.pos[i * 2 + 1];\n        transform.transformPointV(_k.gfx.scratchPt, _k.gfx.scratchPt);\n\n        vv[index++] = _k.gfx.scratchPt.x;\n        vv[index++] = _k.gfx.scratchPt.y;\n        vv[index++] = attributes.uv[i * 2];\n        vv[index++] = attributes.uv[i * 2 + 1];\n        vv[index++] = attributes.color[i * 3] / 255;\n        vv[index++] = attributes.color[i * 3 + 1] / 255;\n        vv[index++] = attributes.color[i * 3 + 2] / 255;\n        vv[index++] = attributes.opacity[i];\n    }\n\n    _k.gfx.renderer.push(\n        _k.gfx.ggl.gl.TRIANGLES,\n        vv,\n        indices,\n        shader,\n        parsedTex,\n        uniform,\n        blend ?? BlendMode.Normal,\n        width(),\n        height(),\n        _k.gfx.fixed || fixed,\n    );\n}\n", "import { Color } from \"../../math/color\";\nimport { lerp } from \"../../math/lerp\";\nimport { deg2rad, vec2 } from \"../../math/math\";\nimport { Vec2 } from \"../../math/Vec2\";\nimport { _k } from \"../../shared\";\nimport type { RenderProps } from \"../../types\";\nimport { drawRaw } from \"./drawRaw\";\n\n/**\n * How the line should look like.\n *\n * @group Draw\n * @subgroup Types\n */\nexport type DrawLineOpt = Omit<RenderProps, \"angle\" | \"scale\"> & {\n    /**\n     * Starting point of the line.\n     */\n    p1: Vec2;\n    /**\n     * Ending point of the line.\n     */\n    p2: Vec2;\n    /**\n     * The width, or thickness of the line,\n     */\n    width?: number;\n};\n\nexport function drawLine(opt: DrawLineOpt) {\n    const { p1, p2 } = opt;\n\n    if (!p1 || !p2) {\n        throw new Error(\n            \"drawLine() requires properties \\\"p1\\\" and \\\"p2\\\".\",\n        );\n    }\n\n    const w = opt.width || 1;\n\n    // the displacement from the line end point to the corner point\n    const dis = p2.sub(p1).unit().normal().scale(w * 0.5);\n\n    // calculate the 4 corner points of the line polygon\n    /*const verts = [\n        p1.sub(dis),\n        p1.add(dis),\n        p2.add(dis),\n        p2.sub(dis),\n    ].map((p) => ({\n        pos: new Vec2(p.x, p.y),\n        uv: new Vec2(0),\n        color: opt.color ?? Color.WHITE,\n        opacity: opt.opacity ?? 1,\n    }));*/\n\n    const color = opt.color ?? Color.WHITE;\n    const opacity = opt.opacity ?? 1;\n\n    const attributes = {\n        pos: [\n            p1.x - dis.x,\n            p1.y - dis.y,\n            p1.x + dis.x,\n            p1.y + dis.y,\n            p2.x + dis.x,\n            p2.y + dis.y,\n            p2.x - dis.x,\n            p2.y - dis.y,\n        ],\n        uv: [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n        ],\n        color: [\n            color.r,\n            color.g,\n            color.b,\n            color.r,\n            color.g,\n            color.b,\n            color.r,\n            color.g,\n            color.b,\n            color.r,\n            color.g,\n            color.b,\n        ],\n        opacity: [\n            opacity,\n            opacity,\n            opacity,\n            opacity,\n        ],\n    };\n\n    drawRaw(\n        attributes,\n        [0, 1, 3, 1, 2, 3],\n        opt.fixed,\n        _k.gfx.defTex,\n        opt.shader,\n        opt.uniform ?? undefined,\n    );\n}\n\nexport type LineJoin =\n    | \"none\"\n    | \"round\"\n    | \"bevel\"\n    | \"miter\";\n\nexport type LineCap =\n    | \"butt\"\n    | \"round\"\n    | \"square\";\n\n/**\n * How the lines should look like.\n */\nexport type DrawLinesOpt = Omit<RenderProps, \"angle\" | \"scale\"> & {\n    /**\n     * The points that should be connected with a line.\n     */\n    pts: Vec2[];\n    /**\n     * The width, or thickness of the lines,\n     */\n    width?: number;\n    /**\n     * The radius of each corner.\n     */\n    radius?: number | number[];\n    /**\n     * Line join style (default \"none\").\n     */\n    join?: LineJoin;\n    /**\n     * Line cap style (default \"none\").\n     */\n    cap?: LineCap;\n    /**\n     * Line bias, the position of the line relative to its center (default 0).\n     */\n    bias?: number;\n    /**\n     * Maximum miter length, anything longer becomes bevel.\n     */\n    miterLimit?: number;\n};\n\nexport function _drawLinesBevel(opt: DrawLinesOpt) {\n    const pts = opt.pts;\n    const vertices = [];\n    const halfWidth = (opt.width || 1) * 0.5;\n    const centerOffset = halfWidth\n        * lerp(-1, 1, ((opt.bias || 0.0) + 1) * 0.5);\n    const isLoop = pts[0] === pts[pts.length - 1]\n        || pts[0].eq(pts[pts.length - 1]);\n    const offset = opt.pos || vec2(0, 0);\n    let segment;\n\n    if (isLoop) {\n        segment = pts[0].sub(pts[pts.length - 2]);\n    }\n    else {\n        segment = pts[1].sub(pts[0]);\n    }\n\n    let length = segment.len();\n    let normal = segment.normal().scale(1 / length);\n\n    let pt1;\n    let pt2 = pts[0];\n\n    if (!isLoop) {\n        switch (opt.cap) {\n            case \"square\": {\n                const dir = segment.scale(-halfWidth / length);\n                vertices.push(\n                    pt2.add(dir).add(normal.scale(centerOffset - halfWidth)),\n                );\n                vertices.push(\n                    pt2.add(dir).add(normal.scale(centerOffset + halfWidth)),\n                );\n                break;\n            }\n            case \"round\": {\n                const n = Math.max(halfWidth, 10);\n                const angle = Math.PI / n;\n                let vector = normal.scale(halfWidth);\n                const cs = Math.cos(angle);\n                const sn = Math.sin(angle);\n                const p = pt2.add(normal.scale(centerOffset));\n                for (let j = 0; j < n; j++) {\n                    vertices.push(p);\n                    vertices.push(p.sub(vector));\n                    vector = vec2(\n                        vector.x * cs - vector.y * sn,\n                        vector.x * sn + vector.y * cs,\n                    );\n                }\n            }\n        }\n    }\n\n    for (let i = 1; i < pts.length; i++) {\n        if (pt2 === pts[i] || pt2.eq(pts[i])) continue;\n        pt1 = pt2;\n        pt2 = pts[i];\n\n        const nextSegment = pt2.sub(pt1);\n        const nextLength = nextSegment.len();\n        const nextNormal = nextSegment.normal().scale(1 / nextLength);\n\n        const det = segment.cross(nextSegment);\n\n        if (Math.abs(det) / (length * nextLength) < 0.05) {\n            // Parallel\n            vertices.push(pt1.add(normal.scale(centerOffset - halfWidth)));\n            vertices.push(pt1.add(normal.scale(centerOffset + halfWidth)));\n\n            if (segment.dot(nextSegment) < 0) {\n                vertices.push(pt1.add(normal.scale(centerOffset + halfWidth)));\n                vertices.push(pt1.add(normal.scale(centerOffset - halfWidth)));\n            }\n\n            segment = nextSegment;\n            length = nextLength;\n            normal = nextNormal;\n            continue;\n        }\n\n        if (det > 0) {\n            const lambda = (nextNormal.scale(centerOffset - halfWidth).sub(\n                normal.scale(centerOffset - halfWidth),\n            )).cross(nextSegment) / det;\n            const d = normal.scale(centerOffset - halfWidth).add(\n                segment.scale(lambda),\n            );\n\n            vertices.push(pt1.add(d));\n            vertices.push(pt1.add(normal.scale(centerOffset + halfWidth)));\n            vertices.push(pt1.add(d));\n            vertices.push(pt1.add(nextNormal.scale(centerOffset + halfWidth)));\n        }\n        else {\n            const lambda = (nextNormal.scale(centerOffset + halfWidth).sub(\n                normal.scale(centerOffset + halfWidth),\n            )).cross(nextSegment) / det;\n            const d = normal.scale(centerOffset + halfWidth).add(\n                segment.scale(lambda),\n            );\n\n            vertices.push(pt1.add(normal.scale(centerOffset - halfWidth)));\n            vertices.push(pt1.add(d));\n            vertices.push(pt1.add(nextNormal.scale(centerOffset - halfWidth)));\n            vertices.push(pt1.add(d));\n        }\n\n        segment = nextSegment;\n        length = nextLength;\n        normal = nextNormal;\n    }\n\n    if (!isLoop) {\n        vertices.push(pt2.add(normal.scale(centerOffset - halfWidth)));\n        vertices.push(pt2.add(normal.scale(centerOffset + halfWidth)));\n        switch (opt.cap) {\n            case \"square\": {\n                const dir = segment.scale(halfWidth / length);\n                vertices.push(\n                    pt2.add(dir).add(normal.scale(centerOffset - halfWidth)),\n                );\n                vertices.push(\n                    pt2.add(dir).add(normal.scale(centerOffset + halfWidth)),\n                );\n                break;\n            }\n            case \"round\": {\n                const n = Math.max(halfWidth, 10);\n                const angle = Math.PI / n;\n                let vector = normal.scale(halfWidth);\n                const cs = Math.cos(angle);\n                const sn = Math.sin(angle);\n                const p = pt2.add(normal.scale(centerOffset));\n                for (let j = 0; j < n; j++) {\n                    vector = vec2(\n                        vector.x * cs - vector.y * sn,\n                        vector.x * sn + vector.y * cs,\n                    );\n                    vertices.push(p);\n                    vertices.push(p.add(vector));\n                }\n            }\n        }\n    }\n\n    if (vertices.length < 4) return;\n\n    const indices = [];\n    let index = 0;\n    for (let i = 0; i < vertices.length - 2; i += 2) {\n        indices[index++] = i + 1;\n        indices[index++] = i;\n        indices[index++] = i + 2;\n        indices[index++] = i + 2;\n        indices[index++] = i + 3;\n        indices[index++] = i + 1;\n    }\n\n    if (isLoop) {\n        indices[index++] = vertices.length - 1;\n        indices[index++] = vertices.length - 2;\n        indices[index++] = 0;\n        indices[index++] = 0;\n        indices[index++] = 1;\n        indices[index++] = vertices.length - 1;\n    }\n\n    /*const verts = vertices.map(v => ({\n        pos: offset.add(v),\n        uv: vec2(),\n        color: opt.color || Color.WHITE,\n        opacity: opt.opacity ?? 1,\n    }));*/\n\n    const attributes = {\n        pos: new Array<number>(vertices.length * 2),\n        uv: new Array<number>(vertices.length * 2).fill(0),\n        color: new Array<number>(vertices.length * 3).fill(255),\n        opacity: new Array<number>(vertices.length).fill(opt.opacity ?? 1),\n    };\n\n    for (let i = 0; i < vertices.length; i++) {\n        attributes.pos[i * 2] = vertices[i].x + offset.x;\n        attributes.pos[i * 2 + 1] = vertices[i].y + offset.y;\n        if (opt.color) {\n            attributes.color[i * 3] = opt.color.r;\n            attributes.color[i * 3 + 1] = opt.color.g;\n            attributes.color[i * 3 + 2] = opt.color.b;\n        }\n    }\n\n    drawRaw(\n        attributes,\n        indices,\n        opt.fixed,\n        _k.gfx.defTex,\n        opt.shader,\n        opt.uniform ?? undefined,\n    );\n}\n\nexport function _drawLinesRound(opt: DrawLinesOpt) {\n    const pts = opt.pts;\n    const vertices = [];\n    const halfWidth = (opt.width || 1) * 0.5;\n    const centerOffset = halfWidth * lerp(-1, 1, ((opt.bias || 0.0) + 1) * 0.5);\n    const isLoop = pts[0] === pts[pts.length - 1]\n        || pts[0].eq(pts[pts.length - 1]);\n    const offset = opt.pos || vec2(0, 0);\n    let segment;\n\n    if (isLoop) {\n        segment = pts[0].sub(pts[pts.length - 2]);\n    }\n    else {\n        segment = pts[1].sub(pts[0]);\n    }\n\n    let length = segment.len();\n    let normal = segment.normal().scale(1 / length);\n\n    let pt1;\n    let pt2 = pts[0];\n\n    if (!isLoop) {\n        switch (opt.cap) {\n            case \"square\": {\n                const dir = segment.scale(-halfWidth / length);\n                vertices.push(\n                    pt2.add(dir).add(normal.scale(centerOffset - halfWidth)),\n                );\n                vertices.push(\n                    pt2.add(dir).add(normal.scale(centerOffset + halfWidth)),\n                );\n                break;\n            }\n            case \"round\": {\n                const n = Math.max(halfWidth, 10);\n                const angle = Math.PI / n;\n                let vector = normal.scale(halfWidth);\n                const cs = Math.cos(angle);\n                const sn = Math.sin(angle);\n                const p = pt2.add(normal.scale(centerOffset));\n                for (let j = 0; j < n; j++) {\n                    vertices.push(p);\n                    vertices.push(p.sub(vector));\n                    vector = vec2(\n                        vector.x * cs - vector.y * sn,\n                        vector.x * sn + vector.y * cs,\n                    );\n                }\n            }\n        }\n    }\n\n    for (let i = 1; i < pts.length; i++) {\n        if (pt2 === pts[i] || pt2.eq(pts[i])) continue;\n        pt1 = pt2;\n        pt2 = pts[i];\n\n        const nextSegment = pt2.sub(pt1);\n        const nextLength = nextSegment.len();\n        const nextNormal = nextSegment.normal().scale(1 / nextLength);\n\n        const det = segment.cross(nextSegment);\n\n        if (Math.abs(det) / (length * nextLength) < 0.05) {\n            // Parallel\n            vertices.push(pt1.add(normal.scale(centerOffset - halfWidth)));\n            vertices.push(pt1.add(normal.scale(centerOffset + halfWidth)));\n\n            if (segment.dot(nextSegment) < 0) {\n                vertices.push(pt1.add(normal.scale(centerOffset + halfWidth)));\n                vertices.push(pt1.add(normal.scale(centerOffset - halfWidth)));\n            }\n\n            segment = nextSegment;\n            length = nextLength;\n            normal = nextNormal;\n            continue;\n        }\n\n        if (det > 0) {\n            // Calculate the vector d from pt1 towards the intersection of the offset lines on the inner side\n            const lambda = (nextNormal.scale(centerOffset - halfWidth).sub(\n                normal.scale(centerOffset - halfWidth),\n            )).cross(nextSegment) / det;\n            const d = normal.scale(centerOffset - halfWidth).add(\n                segment.scale(lambda),\n            );\n\n            const n = Math.max(halfWidth, 10);\n            const angle = deg2rad(normal.angleBetween(nextNormal) / n);\n            let vector = normal.scale(halfWidth * 2);\n            const fixedPoint = pt1.add(d);\n            const cs = Math.cos(angle);\n            const sn = Math.sin(angle);\n            for (let j = 0; j < n; j++) {\n                vertices.push(fixedPoint);\n                vertices.push(fixedPoint.add(vector));\n                vector = vec2(\n                    vector.x * cs - vector.y * sn,\n                    vector.x * sn + vector.y * cs,\n                );\n            }\n        }\n        else {\n            // Calculate the vector d from pt1 towards the intersection of the offset lines on the inner side\n            const lambda = (nextNormal.scale(centerOffset + halfWidth).sub(\n                normal.scale(centerOffset + halfWidth),\n            )).cross(nextSegment) / det;\n            const d = normal.scale(centerOffset + halfWidth).add(\n                segment.scale(lambda),\n            );\n\n            const n = Math.max(halfWidth, 10);\n            const angle = deg2rad(normal.angleBetween(nextNormal) / n);\n            let vector = normal.scale(halfWidth * 2);\n            const fixedPoint = pt1.add(d);\n            const cs = Math.cos(angle);\n            const sn = Math.sin(angle);\n            for (let j = 0; j < n; j++) {\n                vertices.push(fixedPoint.sub(vector));\n                vertices.push(fixedPoint);\n                vector = vec2(\n                    vector.x * cs - vector.y * sn,\n                    vector.x * sn + vector.y * cs,\n                );\n            }\n        }\n\n        segment = nextSegment;\n        length = nextLength;\n        normal = nextNormal;\n    }\n\n    if (!isLoop) {\n        vertices.push(pt2.add(normal.scale(centerOffset - halfWidth)));\n        vertices.push(pt2.add(normal.scale(centerOffset + halfWidth)));\n        switch (opt.cap) {\n            case \"square\": {\n                const dir = segment.scale(halfWidth / length);\n                vertices.push(\n                    pt2.add(dir).add(normal.scale(centerOffset - halfWidth)),\n                );\n                vertices.push(\n                    pt2.add(dir).add(normal.scale(centerOffset + halfWidth)),\n                );\n                break;\n            }\n            case \"round\": {\n                const n = Math.max(halfWidth, 10);\n                const angle = Math.PI / n;\n                let vector = normal.scale(halfWidth);\n                const cs = Math.cos(angle);\n                const sn = Math.sin(angle);\n                const p = pt2.add(normal.scale(centerOffset));\n                for (let j = 0; j < n; j++) {\n                    vector = vec2(\n                        vector.x * cs - vector.y * sn,\n                        vector.x * sn + vector.y * cs,\n                    );\n                    vertices.push(p);\n                    vertices.push(p.add(vector));\n                }\n            }\n        }\n    }\n\n    if (vertices.length < 4) return;\n\n    const verts = vertices.map(v => ({\n        pos: offset.add(v),\n        uv: vec2(),\n        color: opt.color || Color.WHITE,\n        opacity: opt.opacity ?? 1,\n    }));\n\n    const indices = [];\n    let index = 0;\n    for (let i = 0; i < vertices.length - 2; i += 2) {\n        indices[index++] = i + 1;\n        indices[index++] = i;\n        indices[index++] = i + 2;\n        indices[index++] = i + 2;\n        indices[index++] = i + 3;\n        indices[index++] = i + 1;\n    }\n\n    if (isLoop) {\n        indices[index++] = vertices.length - 1;\n        indices[index++] = vertices.length - 2;\n        indices[index++] = 0;\n        indices[index++] = 0;\n        indices[index++] = 1;\n        indices[index++] = vertices.length - 1;\n    }\n\n    const attributes = {\n        pos: new Array<number>(vertices.length * 2),\n        uv: new Array<number>(vertices.length * 2).fill(0),\n        color: new Array<number>(vertices.length * 3).fill(255),\n        opacity: new Array<number>(vertices.length).fill(opt.opacity ?? 1),\n    };\n\n    for (let i = 0; i < vertices.length; i++) {\n        attributes.pos[i * 2] = vertices[i].x + offset.x;\n        attributes.pos[i * 2 + 1] = vertices[i].y + offset.y;\n        if (opt.color) {\n            attributes.color[i * 3] = opt.color.r;\n            attributes.color[i * 3 + 1] = opt.color.g;\n            attributes.color[i * 3 + 2] = opt.color.b;\n        }\n    }\n\n    drawRaw(\n        attributes,\n        indices,\n        opt.fixed,\n        _k.gfx.defTex,\n        opt.shader,\n        opt.uniform ?? undefined,\n    );\n}\n\nexport function _drawLinesMiter(opt: DrawLinesOpt) {\n    const pts = opt.pts;\n    const vertices = [];\n    const halfWidth = (opt.width || 1) * 0.5;\n    const centerOffset = halfWidth * lerp(-1, 1, ((opt.bias || 0.0) + 1) * 0.5);\n    const isLoop = pts[0] === pts[pts.length - 1]\n        || pts[0].eq(pts[pts.length - 1]);\n    const offset = opt.pos || vec2(0, 0);\n    let segment;\n\n    if (isLoop) {\n        segment = pts[0].sub(pts[pts.length - 2]);\n    }\n    else {\n        segment = pts[1].sub(pts[0]);\n    }\n\n    let length = segment.len();\n    let normal = segment.normal().scale(1 / length);\n\n    let pt1;\n    let pt2 = pts[0];\n\n    if (!isLoop) {\n        switch (opt.cap) {\n            case \"square\": {\n                const dir = segment.scale(-halfWidth / length);\n                vertices.push(\n                    pt2.add(dir).add(normal.scale(centerOffset - halfWidth)),\n                );\n                vertices.push(\n                    pt2.add(dir).add(normal.scale(centerOffset + halfWidth)),\n                );\n                break;\n            }\n            case \"round\": {\n                const n = Math.max(halfWidth, 10);\n                const angle = Math.PI / n;\n                let vector = normal.scale(halfWidth);\n                const cs = Math.cos(angle);\n                const sn = Math.sin(angle);\n                const p = pt2.add(normal.scale(centerOffset));\n                for (let j = 0; j < n; j++) {\n                    vertices.push(p);\n                    vertices.push(p.sub(vector));\n                    vector = vec2(\n                        vector.x * cs - vector.y * sn,\n                        vector.x * sn + vector.y * cs,\n                    );\n                }\n            }\n        }\n    }\n\n    for (let i = 1; i < pts.length; i++) {\n        if (pt2 === pts[i] || pt2.eq(pts[i])) continue;\n        pt1 = pt2;\n        pt2 = pts[i];\n\n        const nextSegment = pt2.sub(pt1);\n        const nextLength = nextSegment.len();\n        const nextNormal = nextSegment.normal().scale(1 / nextLength);\n\n        const det = segment.cross(nextSegment);\n\n        if (Math.abs(det) / (length * nextLength) < 0.05) {\n            // Parallel\n            vertices.push(pt1.add(normal.scale(centerOffset - halfWidth)));\n            vertices.push(pt1.add(normal.scale(centerOffset + halfWidth)));\n\n            if (segment.dot(nextSegment) < 0) {\n                vertices.push(pt1.add(normal.scale(centerOffset + halfWidth)));\n                vertices.push(pt1.add(normal.scale(centerOffset - halfWidth)));\n            }\n\n            segment = nextSegment;\n            length = nextLength;\n            normal = nextNormal;\n            continue;\n        }\n\n        let lambda = (nextNormal.scale(centerOffset - halfWidth).sub(\n            normal.scale(centerOffset - halfWidth),\n        )).cross(nextSegment) / det;\n        let d = normal.scale(centerOffset - halfWidth).add(\n            segment.scale(lambda),\n        );\n        vertices.push(pt1.add(d));\n\n        lambda = (nextNormal.scale(centerOffset + halfWidth).sub(\n            normal.scale(centerOffset + halfWidth),\n        )).cross(nextSegment) / det;\n        d = normal.scale(centerOffset + halfWidth).add(segment.scale(lambda));\n        vertices.push(pt1.add(d));\n\n        segment = nextSegment;\n        length = nextLength;\n        normal = nextNormal;\n    }\n\n    if (!isLoop) {\n        vertices.push(pt2.add(normal.scale(centerOffset - halfWidth)));\n        vertices.push(pt2.add(normal.scale(centerOffset + halfWidth)));\n        switch (opt.cap) {\n            case \"square\": {\n                const dir = segment.scale(halfWidth / length);\n                vertices.push(\n                    pt2.add(dir).add(normal.scale(centerOffset - halfWidth)),\n                );\n                vertices.push(\n                    pt2.add(dir).add(normal.scale(centerOffset + halfWidth)),\n                );\n                break;\n            }\n            case \"round\": {\n                const n = Math.max(halfWidth, 10);\n                const angle = Math.PI / n;\n                let vector = normal.scale(halfWidth);\n                const cs = Math.cos(angle);\n                const sn = Math.sin(angle);\n                const p = pt2.add(normal.scale(centerOffset));\n                for (let j = 0; j < n; j++) {\n                    vector = vec2(\n                        vector.x * cs - vector.y * sn,\n                        vector.x * sn + vector.y * cs,\n                    );\n                    vertices.push(p);\n                    vertices.push(p.add(vector));\n                }\n            }\n        }\n    }\n\n    if (vertices.length < 4) return;\n\n    const verts = vertices.map(v => ({\n        pos: offset.add(v),\n        uv: vec2(),\n        color: opt.color || Color.WHITE,\n        opacity: opt.opacity ?? 1,\n    }));\n\n    const indices = [];\n    let index = 0;\n    for (let i = 0; i < vertices.length - 2; i += 2) {\n        indices[index++] = i + 1;\n        indices[index++] = i;\n        indices[index++] = i + 2;\n        indices[index++] = i + 2;\n        indices[index++] = i + 3;\n        indices[index++] = i + 1;\n    }\n\n    if (isLoop) {\n        indices[index++] = vertices.length - 1;\n        indices[index++] = vertices.length - 2;\n        indices[index++] = 0;\n        indices[index++] = 0;\n        indices[index++] = 1;\n        indices[index++] = vertices.length - 1;\n    }\n\n    const attributes = {\n        pos: new Array<number>(vertices.length * 2),\n        uv: new Array<number>(vertices.length * 2).fill(0),\n        color: new Array<number>(vertices.length * 3).fill(255),\n        opacity: new Array<number>(vertices.length).fill(opt.opacity ?? 1),\n    };\n\n    for (let i = 0; i < vertices.length; i++) {\n        attributes.pos[i * 2] = vertices[i].x + offset.x;\n        attributes.pos[i * 2 + 1] = vertices[i].y + offset.y;\n        if (opt.color) {\n            attributes.color[i * 3] = opt.color.r;\n            attributes.color[i * 3 + 1] = opt.color.g;\n            attributes.color[i * 3 + 2] = opt.color.b;\n        }\n    }\n\n    drawRaw(\n        attributes,\n        indices,\n        opt.fixed,\n        _k.gfx.defTex,\n        opt.shader,\n        opt.uniform ?? undefined,\n    );\n}\n\nexport function drawLines(opt: DrawLinesOpt) {\n    const pts = opt.pts;\n    const width = opt.width ?? 1;\n\n    if (!pts) {\n        throw new Error(\"drawLines() requires property \\\"pts\\\".\");\n    }\n\n    if (pts.length < 2) {\n        return;\n    }\n\n    if (pts.length > 2) {\n        switch (opt.join) {\n            case \"bevel\":\n                return _drawLinesBevel(opt);\n            case \"round\":\n                return _drawLinesRound(opt);\n            case \"miter\":\n                return _drawLinesMiter(opt);\n        }\n    }\n\n    if (opt.radius && pts.length >= 3) {\n        return _drawLinesBevel(opt);\n    }\n    else {\n        return _drawLinesRound(opt);\n    }\n}\n", "import { Color } from \"../../math/color\";\nimport { triangulate } from \"../../math/math\";\nimport { Vec2 } from \"../../math/Vec2\";\nimport { _k } from \"../../shared\";\nimport { BlendMode, type RenderProps } from \"../../types\";\nimport type { Texture } from \"../gfx\";\nimport {\n    multRotate,\n    multScaleV,\n    multSkew,\n    multSkewV,\n    multTranslateV,\n    popTransform,\n    pushTransform,\n} from \"../stack\";\nimport { drawLines } from \"./drawLine\";\nimport { drawRaw } from \"./drawRaw\";\n\n/**\n * How the polygon should look like.\n *\n * @group Draw\n * @subgroup Types\n */\nexport type DrawPolygonOpt = RenderProps & {\n    /**\n     * The points that make up the polygon\n     */\n    pts: Vec2[];\n    /**\n     * If fill the shape with color (set this to false if you only want an outline).\n     */\n    fill?: boolean;\n    /**\n     * Manual triangulation.\n     */\n    indices?: number[];\n    /**\n     * The center point of transformation in relation to the position.\n     */\n    offset?: Vec2;\n    /**\n     * The radius of each corner.\n     */\n    radius?: number | number[];\n    /**\n     * The color of each vertex.\n     *\n     * @since v3000.0\n     */\n    colors?: Color[];\n    /**\n     * The opacity of each vertex.\n     *\n     * @since v4000.0\n     */\n    opacities?: number[];\n    /**\n     * The uv of each vertex.\n     *\n     * @since v3001.0\n     */\n    uv?: Vec2[];\n    /**\n     * The texture if uv are supplied.\n     *\n     * @since v3001.0\n     */\n    tex?: Texture;\n    /**\n     * Triangulate concave polygons.\n     *\n     * @since v3001.0\n     */\n    triangulate?: boolean;\n};\n\nexport function drawPolygon(opt: DrawPolygonOpt) {\n    if (!opt.pts) {\n        throw new Error(\"drawPolygon() requires property \\\"pts\\\".\");\n    }\n\n    const npts = opt.pts.length;\n\n    if (npts < 3) {\n        return;\n    }\n\n    pushTransform();\n    multTranslateV(opt.pos!);\n    multRotate(opt.angle);\n    multScaleV(opt.scale);\n    multSkewV(opt.skew);\n    multTranslateV(opt.offset!);\n\n    if (opt.fill !== false) {\n        const color = opt.color ?? Color.WHITE;\n\n        const attributes = {\n            pos: new Array<number>(opt.pts.length * 2),\n            uv: new Array<number>(opt.pts.length * 2),\n            color: new Array<number>(opt.pts.length * 3),\n            opacity: new Array<number>(opt.pts.length),\n        };\n\n        for (let i = 0; i < opt.pts.length; i++) {\n            attributes.pos[i * 2] = opt.pts[i].x;\n            attributes.pos[i * 2 + 1] = opt.pts[i].y;\n        }\n\n        if (opt.uv) {\n            for (let i = 0; i < opt.uv.length; i++) {\n                attributes.uv[i * 2] = opt.uv[i].x;\n                attributes.uv[i * 2 + 1] = opt.uv[i].y;\n            }\n        }\n        else {\n            attributes.uv.fill(0);\n        }\n\n        if (opt.colors) {\n            for (let i = 0; i < opt.colors.length; i++) {\n                attributes.color[i * 3] = opt.colors[i].r;\n                attributes.color[i * 3 + 1] = opt.colors[i].g;\n                attributes.color[i * 3 + 2] = opt.colors[i].b;\n            }\n        }\n        else {\n            for (let i = 0; i < opt.pts.length; i++) {\n                attributes.color[i * 3] = color.r;\n                attributes.color[i * 3 + 1] = color.g;\n                attributes.color[i * 3 + 2] = color.b;\n            }\n        }\n\n        if (opt.opacities) {\n            for (let i = 0; i < opt.pts.length; i++) {\n                attributes.opacity[i] = opt.opacities[i];\n            }\n        }\n        else {\n            attributes.opacity.fill(opt.opacity ?? 1);\n        }\n\n        /*const verts = opt.pts.map((pt, i) => ({\n            pos: new Vec2(pt.x, pt.y),\n            uv: opt.uv\n                ? opt.uv[i]\n                : new Vec2(0, 0),\n            color: opt.colors\n                ? (opt.colors[i] ? opt.colors[i].mult(color) : color)\n                : color,\n            opacity: opt.opacity ?? 1,\n        }));*/\n\n        let indices;\n\n        if (opt.triangulate /* && !isConvex(opt.pts)*/) {\n            const triangles = triangulate(opt.pts);\n            // TODO rewrite triangulate to just return new indices\n            indices = triangles.map(t => t.map(p => opt.pts.indexOf(p)))\n                .flat();\n        }\n        else {\n            indices = [...Array(npts - 2).keys()]\n                .map((n) => [0, n + 1, n + 2])\n                .flat();\n        }\n\n        drawRaw(\n            attributes,\n            opt.indices ?? indices,\n            opt.fixed,\n            opt.uv ? opt.tex : _k.gfx.defTex,\n            opt.shader,\n            opt.uniform ?? undefined,\n            opt.blend ?? BlendMode.Normal,\n        );\n    }\n\n    if (opt.outline) {\n        drawLines({\n            pts: opt.pts[0].eq(opt.pts[opt.pts.length - 1])\n                ? opt.pts\n                : [...opt.pts, opt.pts[0]],\n            radius: opt.radius,\n            width: opt.outline.width,\n            color: opt.outline.color,\n            join: opt.outline.join,\n            uniform: opt.uniform,\n            fixed: opt.fixed,\n            opacity: opt.opacity ?? opt.outline.opacity,\n        });\n    }\n\n    popTransform();\n}\n", "import { DEF_ANCHOR } from \"../../constants/general\";\nimport type { Color } from \"../../math/color\";\nimport { vec2 } from \"../../math/math\";\nimport { getArcPts } from \"../../math/various\";\nimport { Vec2 } from \"../../math/Vec2\";\nimport type { Anchor, RenderProps } from \"../../types\";\nimport { anchorPt } from \"../anchor\";\nimport { drawPolygon } from \"./drawPolygon\";\n\n/**\n * How the rectangle should look like.\n *\n * @group Draw\n * @subgroup Types\n */\nexport type DrawRectOpt = RenderProps & {\n    /**\n     * Width of the rectangle.\n     */\n    width: number;\n    /**\n     * Height of the rectangle.\n     */\n    height: number;\n    /**\n     * Use gradient instead of solid color.\n     *\n     * @since v3000.0\n     */\n    gradient?: [Color, Color];\n    /**\n     * If the gradient should be horizontal.\n     *\n     * @since v3000.0\n     */\n    horizontal?: boolean;\n    /**\n     * If fill the shape with color (set this to false if you only want an outline).\n     */\n    fill?: boolean;\n    /**\n     * The radius of each corner.\n     */\n    radius?: number | number[];\n    /**\n     * The anchor point, or the pivot point. Default to \"topleft\".\n     */\n    anchor?: Anchor | Vec2;\n};\n\nexport function drawRect(opt: DrawRectOpt) {\n    if (opt.width === undefined || opt.height === undefined) {\n        throw new Error(\n            \"drawRect() requires property \\\"width\\\" and \\\"height\\\".\",\n        );\n    }\n\n    if (opt.width <= 0 || opt.height <= 0) {\n        return;\n    }\n\n    const w = opt.width;\n    const h = opt.height;\n    const anchor = anchorPt(opt.anchor || DEF_ANCHOR).add(1, 1);\n    const offset = anchor.scale(new Vec2(w, h).scale(-0.5));\n\n    let pts = [\n        new Vec2(0, 0),\n        new Vec2(w, 0),\n        new Vec2(w, h),\n        new Vec2(0, h),\n    ];\n\n    // TODO: gradient for rounded rect\n    // TODO: drawPolygon should handle generic rounded corners\n    if (opt.radius) {\n        // maximum radius is half the shortest side\n        const maxRadius = Math.min(w, h) / 2;\n        const r = Array.isArray(opt.radius)\n            ? opt.radius.map(r => Math.min(maxRadius, r))\n            : new Array(4).fill(Math.min(maxRadius, opt.radius));\n\n        pts = [\n            new Vec2(r[0], 0),\n            ...(r[1]\n                ? getArcPts(new Vec2(w - r[1], r[1]), r[1], r[1], 270, 360)\n                : [vec2(w, 0)]),\n            ...(r[2]\n                ? getArcPts(new Vec2(w - r[2], h - r[2]), r[2], r[2], 0, 90)\n                : [vec2(w, h)]),\n            ...(r[3]\n                ? getArcPts(new Vec2(r[3], h - r[3]), r[3], r[3], 90, 180)\n                : [vec2(0, h)]),\n            ...(r[0]\n                ? getArcPts(new Vec2(r[0], r[0]), r[0], r[0], 180, 270)\n                : []),\n        ];\n    }\n\n    drawPolygon(Object.assign({}, opt, {\n        offset,\n        pts,\n        ...(opt.gradient\n            ? {\n                colors: opt.horizontal\n                    ? [\n                        opt.gradient[0],\n                        opt.gradient[1],\n                        opt.gradient[1],\n                        opt.gradient[0],\n                    ]\n                    : [\n                        opt.gradient[0],\n                        opt.gradient[0],\n                        opt.gradient[1],\n                        opt.gradient[1],\n                    ],\n            }\n            : {}),\n    }));\n}\n", "import { getRenderProps } from \"../../../game/utils\";\nimport { drawRect } from \"../../../gfx/draw/drawRect\";\nimport { Rect, vec2 } from \"../../../math/math\";\nimport type { Comp, GameObj } from \"../../../types\";\n/**\n * The serialized {@link rect `rect()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedRectComp {\n    width: number;\n    height: number;\n    radius?: number | [number, number, number, number];\n    fill?: boolean;\n}\n\n/**\n * The {@link rect `rect()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface RectComp extends Comp {\n    draw: Comp[\"draw\"];\n    /**\n     * Width of rectangle.\n     */\n    width: number;\n    /**\n     * Height of rectangle.\n     */\n    height: number;\n    /**\n     * The radius of each corner.\n     */\n    radius?: number | [number, number, number, number];\n    /**\n     * @since v3000.0\n     */\n    renderArea(): Rect;\n\n    serialize(): SerializedRectComp;\n}\n\n/**\n * Options for the {@link rect `rect()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface RectCompOpt {\n    /**\n     * Radius of the rectangle corners.\n     */\n    radius?: number | [number, number, number, number];\n    /**\n     * If fill the rectangle (useful if you only want to render outline with outline() component).\n     */\n    fill?: boolean;\n}\n\nexport function rect(w: number, h: number, opt: RectCompOpt = {}): RectComp {\n    let _shape: Rect | undefined;\n    let _width = w;\n    let _height = h;\n    return {\n        id: \"rect\",\n        get width() {\n            return _width;\n        },\n        set width(value) {\n            _width = value;\n            if (_shape) _shape.width = value;\n        },\n        get height() {\n            return _height;\n        },\n        set height(value) {\n            _height = value;\n            if (_shape) _shape.height = value;\n        },\n        radius: opt.radius || 0,\n        draw(this: GameObj<RectComp>) {\n            drawRect(Object.assign(getRenderProps(this), {\n                width: _width,\n                height: _height,\n                radius: this.radius,\n                fill: opt.fill,\n            }));\n        },\n        renderArea() {\n            if (!_shape) {\n                _shape = new Rect(vec2(0), _width, _height);\n            }\n            return _shape;\n        },\n        inspect() {\n            return `rect: (${Math.ceil(_width)}w, ${Math.ceil(_height)}h)`;\n        },\n        serialize() {\n            const data: SerializedRectComp = { width: _width, height: _height };\n            if (this.radius) data.radius = this.radius;\n            if (opt.fill) data.fill = opt.fill;\n            return data;\n        },\n    };\n}\n\nexport function rectFactory(data: SerializedRectComp) {\n    const opt: RectCompOpt = {};\n    if (data.radius) opt.radius = data.radius;\n    if (data.fill) opt.fill = data.fill;\n\n    return rect(\n        data.width,\n        data.height,\n        opt,\n    );\n}\n", "import type { Comp } from \"../../../types\";\n\n/**\n * The serialized {@link fixed `fixed()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedFixedComp {\n    fixed?: boolean;\n}\n\n/**\n * The {@link fixed `fixed()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface FixedComp extends Comp {\n    /**\n     * If the obj is unaffected by camera\n     */\n    fixed: boolean;\n\n    serialize(): SerializedFixedComp;\n}\n\nexport function fixed(fixed = true): FixedComp {\n    return {\n        id: \"fixed\",\n        fixed: fixed,\n        serialize() {\n            return { fixed: this.fixed };\n        },\n    };\n}\n\nexport function fixedFactory(data: SerializedFixedComp) {\n    return fixed(data.fixed);\n}\n", "import { _k } from \"../../shared\";\nimport type { GameObj } from \"../../types\";\n\nexport function destroy(obj: GameObj) {\n    obj.destroy();\n}\n\nexport function getTreeRoot(): GameObj {\n    return _k.game.root;\n}\n\nexport function isFixed(obj: GameObj): boolean {\n    if (obj.fixed) return true;\n    return obj.parent ? isFixed(obj.parent) : false;\n}\n\nexport function isPaused(obj: GameObj): boolean {\n    if (obj.paused) return true;\n    return obj.parent ? isPaused(obj.parent) : false;\n}\n", "import { color } from \"../ecs/components/draw/color\";\nimport { opacity } from \"../ecs/components/draw/opacity\";\nimport { rect } from \"../ecs/components/draw/rect\";\nimport { fixed } from \"../ecs/components/transform/fixed\";\nimport { destroy } from \"../ecs/entity/utils\";\nimport { center, height, width } from \"../gfx/stack\";\nimport { type Color, rgb } from \"../math/color\";\nimport { type Mat23, vec2, type Vec2Args } from \"../math/math\";\nimport { Vec2 } from \"../math/Vec2\";\nimport { _k } from \"../shared\";\nimport { deprecateMsg } from \"../utils/log\";\n\nexport function setCamPos(...pos: Vec2Args) {\n    _k.game.cam.pos = vec2(...pos);\n}\n\nexport function getCamPos(): Vec2 {\n    return _k.game.cam.pos ? _k.game.cam.pos.clone() : center();\n}\n\nexport function setCamScale(...scale: Vec2Args) {\n    _k.game.cam.scale = vec2(...scale);\n}\n\nexport function getCamScale(): Vec2 {\n    return _k.game.cam.scale.clone();\n}\n\nexport function setCamRot(angle: number) {\n    _k.game.cam.angle = angle;\n}\n\nexport function getCamRot(): number {\n    return _k.game.cam.angle;\n}\n\nexport function getCamTransform(): Mat23 {\n    return _k.game.cam.transform.clone();\n}\n\nexport function flash(\n    flashColor: Color = rgb(255, 255, 255),\n    fadeOutTime: number = 1,\n) {\n    let flash = _k.game.root.add([\n        rect(width(), height()),\n        color(flashColor),\n        opacity(1),\n        fixed(),\n    ]);\n    let fade = flash.fadeOut(fadeOutTime);\n    fade.onEnd(() => destroy(flash));\n    return fade;\n}\n\nexport function shake(intensity: number = 12) {\n    _k.game.cam.shake += intensity;\n}\n\nexport function toScreen(p: Vec2): Vec2 {\n    return _k.game.cam.transform.transformPointV(p, new Vec2());\n}\n\nexport function toWorld(p: Vec2): Vec2 {\n    return _k.game.cam.transform.inverse.transformPointV(p, new Vec2());\n}\n\nexport function camPos(...pos: Vec2Args): Vec2 {\n    deprecateMsg(\"camPos\", \"setCamPos / getCamPos\");\n\n    if (pos.length > 0) {\n        setCamPos(...pos);\n    }\n    return getCamPos();\n}\n\nexport function camScale(...scale: Vec2Args): Vec2 {\n    deprecateMsg(\"camScale\", \"setCamScale / getCamScale\");\n\n    if (scale.length > 0) {\n        setCamScale(...scale);\n    }\n    return getCamScale();\n}\n\nexport function camRot(angle: number): number {\n    deprecateMsg(\"camRot\", \"setCamRot / getCamRot\");\n\n    if (angle !== undefined) {\n        setCamRot(angle);\n    }\n    return getCamRot();\n}\n\nexport function camFlash(\n    flashColor: Color = rgb(255, 255, 255),\n    fadeOutTime: number = 1,\n) {\n    deprecateMsg(\"camFlash\", \"flash\");\n\n    return flash(flashColor, fadeOutTime);\n}\n\nexport function camTransform(): Mat23 {\n    deprecateMsg(\"camTransform\", \"getCamTransform\");\n\n    return getCamTransform();\n}\n", "export function deepEq(o1: any, o2: any): boolean {\n    if (o1 === o2) {\n        return true;\n    }\n    const t1 = typeof o1;\n    const t2 = typeof o2;\n    if (t1 !== t2) {\n        return false;\n    }\n    if (t1 === \"object\" && t2 === \"object\" && o1 !== null && o2 !== null) {\n        if (Array.isArray(o1) !== Array.isArray(o2)) {\n            return false;\n        }\n        const k1 = Object.keys(o1);\n        const k2 = Object.keys(o2);\n        if (k1.length !== k2.length) {\n            return false;\n        }\n        for (const k of k1) {\n            const v1 = o1[k];\n            const v2 = o2[k];\n            if (!deepEq(v1, v2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n", "import type { Shader, Uniform } from \"../assets/shader\";\nimport { IDENTITY_MATRIX } from \"../constants/math\";\nimport { getCamTransform } from \"../game/camera\";\nimport {\n    BlendMode,\n    type ImageSource,\n    type KAPLAYOpt,\n    type TextureOpt,\n} from \"../types\";\nimport { deepEq } from \"../utils/deepEq\";\nimport type { Picture } from \"./draw/drawPicture\";\n\nexport type GfxCtx = ReturnType<typeof initGfx>;\n\n/**\n * @group Rendering\n * @subgroup Canvas\n */\nexport class Texture {\n    ctx: GfxCtx;\n    src: null | ImageSource = null;\n    glTex: WebGLTexture;\n    width: number;\n    height: number;\n\n    constructor(ctx: GfxCtx, w: number, h: number, opt: TextureOpt = {}) {\n        this.ctx = ctx;\n\n        const gl = ctx.gl;\n        const glText = ctx.gl.createTexture();\n\n        if (!glText) {\n            throw new Error(\"[rendering] Failed to create texture\");\n        }\n\n        this.glTex = glText;\n        ctx.onDestroy(() => this.free());\n\n        this.width = w;\n        this.height = h;\n\n        const filter = {\n            \"linear\": gl.LINEAR,\n            \"nearest\": gl.NEAREST,\n        }[opt.filter ?? ctx.opts.texFilter ?? \"nearest\"];\n\n        const wrap = {\n            \"repeat\": gl.REPEAT,\n            \"clampToEdge\": gl.CLAMP_TO_EDGE,\n        }[opt.wrap ?? \"clampToEdge\"];\n\n        this.bind();\n\n        if (w && h) {\n            gl.texImage2D(\n                gl.TEXTURE_2D,\n                0,\n                gl.RGBA,\n                w,\n                h,\n                0,\n                gl.RGBA,\n                gl.UNSIGNED_BYTE,\n                null,\n            );\n        }\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap);\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n        this.unbind();\n    }\n\n    static fromImage(\n        ctx: GfxCtx,\n        img: ImageSource,\n        opt: TextureOpt = {},\n    ): Texture {\n        const tex = new Texture(ctx, img.width, img.height, opt);\n        tex.update(img);\n        tex.src = img;\n        return tex;\n    }\n\n    update(img: ImageSource, x = 0, y = 0) {\n        const gl = this.ctx.gl;\n        this.bind();\n        gl.texSubImage2D(\n            gl.TEXTURE_2D,\n            0,\n            x,\n            y,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            img,\n        );\n        this.unbind();\n    }\n\n    bind() {\n        this.ctx.pushTexture2D(this.glTex);\n    }\n\n    unbind() {\n        this.ctx.popTexture2D();\n    }\n\n    /** Frees up texture memory. Call this once the texture is no longer being used to avoid memory leaks. */\n    free() {\n        this.ctx.gl.deleteTexture(this.glTex);\n    }\n}\n\n/**\n * @group Rendering\n * @subgroup Shaders\n */\nexport type VertexFormat = {\n    name: string;\n    size: number;\n}[];\n\n/**\n * @group Rendering\n * @subgroup Canvas\n */\nexport class BatchRenderer {\n    ctx: GfxCtx;\n\n    glVBuf: WebGLBuffer;\n    glIBuf: WebGLBuffer;\n    vqueue: number[] = [];\n    iqueue: number[] = [];\n    stride: number;\n    maxVertices: number;\n    maxIndices: number;\n\n    vertexFormat: VertexFormat;\n    numDraws: number = 0;\n\n    curPrimitive: GLenum | null = null;\n    curTex: Texture | null = null;\n    curShader: Shader | null = null;\n    curUniform: Uniform | null = null;\n    curBlend: BlendMode = BlendMode.Normal;\n    curFixed: boolean | undefined = undefined;\n\n    picture: Picture | null = null;\n\n    constructor(\n        ctx: GfxCtx,\n        format: VertexFormat,\n        maxVertices: number,\n        maxIndices: number,\n    ) {\n        const gl = ctx.gl;\n\n        this.vertexFormat = format;\n        this.ctx = ctx;\n        this.stride = format.reduce((sum, f) => sum + f.size, 0);\n        this.maxVertices = maxVertices;\n        this.maxIndices = maxIndices;\n\n        const glVBuf = gl.createBuffer();\n\n        if (!glVBuf) {\n            throw new Error(\"Failed to create vertex buffer\");\n        }\n\n        this.glVBuf = glVBuf;\n\n        ctx.pushArrayBuffer(this.glVBuf);\n        gl.bufferData(gl.ARRAY_BUFFER, maxVertices * 4, gl.DYNAMIC_DRAW);\n        ctx.popArrayBuffer();\n\n        this.glIBuf = gl.createBuffer()!;\n        ctx.pushElementArrayBuffer(this.glIBuf);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, maxIndices * 4, gl.DYNAMIC_DRAW);\n        ctx.popElementArrayBuffer();\n    }\n\n    push(\n        primitive: GLenum,\n        vertices: number[],\n        indices: number[],\n        shader: Shader,\n        tex: Texture | null = null,\n        uniform: Uniform | null = null,\n        blend: BlendMode,\n        width: number,\n        height: number,\n        fixed: boolean,\n    ) {\n        // If we have a picture, redirect data to the picture instead\n        if (this.picture) {\n            const index = this.picture.indices.length;\n            const count = indices.length;\n            const indexOffset = this.picture.vertices.length / this.stride;\n            let l = vertices.length;\n            for (let i = 0; i < l; i++) {\n                this.picture.vertices.push(vertices[i]);\n            }\n            l = indices.length;\n            for (let i = 0; i < l; i++) {\n                this.picture.indices.push(indices[i] + indexOffset);\n            }\n            const material = {\n                tex: tex || undefined,\n                shader,\n                uniform: uniform || undefined,\n                blend,\n            };\n            if (this.picture.commands.length) {\n                const lastCommand =\n                    this.picture.commands[this.picture.commands.length - 1];\n                const lastMaterial = lastCommand.material;\n                if (\n                    lastMaterial.tex == material.tex\n                    && lastMaterial.shader == material.shader\n                    && lastMaterial.uniform == material.uniform\n                    && lastMaterial.blend == material.blend\n                ) {\n                    lastCommand.count += count;\n                    return;\n                }\n            }\n            const command = {\n                material,\n                index,\n                count,\n            };\n            this.picture.commands.push(command);\n            return;\n        }\n\n        // If texture, shader, blend mode or uniforms (including fixed) have changed, flush first\n        // If the buffers are full, flush first\n        if (\n            primitive !== this.curPrimitive\n            || tex !== this.curTex\n            || shader !== this.curShader\n            || ((this.curUniform != uniform)\n                && !deepEq(this.curUniform, uniform))\n            || blend !== this.curBlend\n            || fixed !== this.curFixed\n            || this.vqueue.length + vertices.length * this.stride\n                > this.maxVertices\n            || this.iqueue.length + indices.length > this.maxIndices\n        ) {\n            this.flush(width, height);\n            this.setBlend(blend);\n        }\n        const indexOffset = this.vqueue.length / this.stride;\n        let l = vertices.length;\n        for (let i = 0; i < l; i++) {\n            this.vqueue.push(vertices[i]);\n        }\n        l = indices.length;\n        for (let i = 0; i < l; i++) {\n            this.iqueue.push(indices[i] + indexOffset);\n        }\n        this.curPrimitive = primitive;\n        this.curShader = shader;\n        this.curTex = tex;\n        this.curUniform = uniform;\n        this.curFixed = fixed;\n    }\n\n    flush(width: number, height: number) {\n        if (\n            !this.curPrimitive\n            || !this.curShader\n            || this.vqueue.length === 0\n            || this.iqueue.length === 0\n        ) {\n            return;\n        }\n\n        const gl = this.ctx.gl;\n\n        // Bind vertex data\n        this.ctx.pushArrayBuffer(this.glVBuf);\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array(this.vqueue));\n\n        // Bind index data\n        this.ctx.pushElementArrayBuffer(this.glIBuf);\n        gl.bufferSubData(\n            gl.ELEMENT_ARRAY_BUFFER,\n            0,\n            new Uint16Array(this.iqueue),\n        );\n\n        // Set vertex format\n        this.ctx.setVertexFormat(this.vertexFormat);\n\n        // Bind Shader\n        this.curShader.bind();\n\n        // Send user uniforms\n        if (this.curUniform) {\n            this.curShader.send(this.curUniform);\n        }\n\n        // Send system uniforms\n        this.curShader.send({\n            width,\n            height,\n            camera: this.curFixed ? IDENTITY_MATRIX : getCamTransform(),\n            transform: IDENTITY_MATRIX,\n        });\n\n        // Bind texture\n        this.curTex?.bind();\n\n        // Draw vertex buffer using active indices\n        gl.drawElements(\n            this.curPrimitive,\n            this.iqueue.length,\n            gl.UNSIGNED_SHORT,\n            0,\n        );\n\n        // Unbind texture and shader\n        this.curTex?.unbind();\n        this.curShader.unbind();\n\n        // Unbind buffers\n        this.ctx.popArrayBuffer();\n        this.ctx.popElementArrayBuffer();\n\n        // Reset local buffers\n        this.vqueue.length = 0;\n        this.iqueue.length = 0;\n\n        // Increase draw\n        this.numDraws++;\n    }\n\n    free() {\n        const gl = this.ctx.gl;\n        gl.deleteBuffer(this.glVBuf);\n        gl.deleteBuffer(this.glIBuf);\n    }\n\n    setBlend(blend: BlendMode) {\n        if (blend !== this.curBlend) {\n            const gl = this.ctx.gl;\n            this.curBlend = blend;\n            switch (this.curBlend) {\n                case BlendMode.Normal:\n                    gl.blendFuncSeparate(\n                        gl.ONE,\n                        gl.ONE_MINUS_SRC_ALPHA,\n                        gl.ONE,\n                        gl.ONE_MINUS_SRC_ALPHA,\n                    );\n                    break;\n                case BlendMode.Add:\n                    gl.blendFuncSeparate(\n                        gl.ONE,\n                        gl.ONE,\n                        gl.ONE,\n                        gl.ONE_MINUS_SRC_ALPHA,\n                    );\n                    break;\n                case BlendMode.Multiply:\n                    gl.blendFuncSeparate(\n                        gl.DST_COLOR,\n                        gl.ZERO,\n                        gl.ONE,\n                        gl.ONE_MINUS_SRC_ALPHA,\n                    );\n                    break;\n                case BlendMode.Screen:\n                    gl.blendFuncSeparate(\n                        gl.ONE_MINUS_DST_COLOR,\n                        gl.ONE,\n                        gl.ONE,\n                        gl.ONE_MINUS_SRC_ALPHA,\n                    );\n                    break;\n                case BlendMode.Overlay:\n                    gl.blendFuncSeparate(\n                        gl.DST_COLOR,\n                        gl.ONE_MINUS_SRC_ALPHA,\n                        gl.ONE,\n                        gl.ONE_MINUS_SRC_ALPHA,\n                    );\n            }\n        }\n    }\n}\n\n/**\n * @group Rendering\n * @subgroup Shaders\n */\nexport class Mesh {\n    ctx: GfxCtx;\n    glVBuf: WebGLBuffer;\n    glIBuf: WebGLBuffer;\n    vertexFormat: VertexFormat;\n    count: number;\n\n    constructor(\n        ctx: GfxCtx,\n        format: VertexFormat,\n        vertices: number[],\n        indices: number[],\n    ) {\n        const gl = ctx.gl;\n        this.vertexFormat = format;\n        this.ctx = ctx;\n        const glVBuf = gl.createBuffer();\n\n        if (!glVBuf) throw new Error(\"Failed to create vertex buffer\");\n\n        this.glVBuf = glVBuf;\n\n        ctx.pushArrayBuffer(this.glVBuf);\n        gl.bufferData(\n            gl.ARRAY_BUFFER,\n            new Float32Array(vertices),\n            gl.STATIC_DRAW,\n        );\n        ctx.popArrayBuffer();\n\n        this.glIBuf = gl.createBuffer()!;\n        ctx.pushElementArrayBuffer(this.glIBuf);\n        gl.bufferData(\n            gl.ELEMENT_ARRAY_BUFFER,\n            new Uint16Array(indices),\n            gl.STATIC_DRAW,\n        );\n        ctx.popElementArrayBuffer();\n\n        this.count = indices.length;\n    }\n\n    draw(primitive?: GLenum, index?: GLuint, count?: GLuint): void {\n        const gl = this.ctx.gl;\n        this.ctx.pushArrayBuffer(this.glVBuf);\n        this.ctx.pushElementArrayBuffer(this.glIBuf);\n        this.ctx.setVertexFormat(this.vertexFormat);\n        gl.drawElements(\n            primitive ?? gl.TRIANGLES,\n            index ?? this.count,\n            gl.UNSIGNED_SHORT,\n            count ?? 0,\n        );\n        this.ctx.popArrayBuffer();\n        this.ctx.popElementArrayBuffer();\n    }\n\n    free() {\n        const gl = this.ctx.gl;\n        gl.deleteBuffer(this.glVBuf);\n        gl.deleteBuffer(this.glIBuf);\n    }\n}\n\nfunction genStack<T>(setFunc: (item: T | null) => void) {\n    const stack: T[] = [];\n    // TODO: don't do anything if pushed item is the same as the one on top?\n    const push = (item: T) => {\n        stack.push(item);\n        setFunc(item);\n    };\n    const pop = () => {\n        stack.pop();\n        setFunc(cur() ?? null);\n    };\n    const cur = () => stack[stack.length - 1];\n    return [push, pop, cur] as const;\n}\n\nexport function initGfx(gl: WebGLRenderingContext, opts: KAPLAYOpt = {}) {\n    const gc: Array<() => void> = [];\n\n    function onDestroy(action: () => unknown) {\n        gc.push(action);\n    }\n\n    function destroy() {\n        gc.forEach((action) => action());\n        const extension = gl.getExtension(\"WEBGL_lose_context\");\n        if (extension) extension.loseContext();\n    }\n\n    let curVertexFormat: object | null = null;\n\n    function setVertexFormat(fmt: VertexFormat) {\n        if (deepEq(fmt, curVertexFormat)) return;\n        curVertexFormat = fmt;\n        const stride = fmt.reduce((sum, f) => sum + f.size, 0);\n        fmt.reduce((offset, f, i) => {\n            gl.enableVertexAttribArray(i);\n            gl.vertexAttribPointer(\n                i,\n                f.size,\n                gl.FLOAT,\n                false,\n                stride * 4,\n                offset,\n            );\n            return offset + f.size * 4;\n        }, 0);\n    }\n\n    const [pushTexture2D, popTexture2D] = genStack<WebGLTexture>((t) =>\n        gl.bindTexture(gl.TEXTURE_2D, t)\n    );\n\n    const [pushArrayBuffer, popArrayBuffer] = genStack<WebGLBuffer>((b) =>\n        gl.bindBuffer(gl.ARRAY_BUFFER, b)\n    );\n\n    const [pushElementArrayBuffer, popElementArrayBuffer] = genStack<\n        WebGLBuffer\n    >((b) => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, b));\n\n    const [pushFramebuffer, popFramebuffer] = genStack<WebGLFramebuffer>((b) =>\n        gl.bindFramebuffer(gl.FRAMEBUFFER, b)\n    );\n\n    const [pushRenderbuffer, popRenderbuffer] = genStack<WebGLRenderbuffer>((\n        b,\n    ) => gl.bindRenderbuffer(gl.RENDERBUFFER, b));\n\n    const [pushViewport, popViewport] = genStack<\n        { x: number; y: number; w: number; h: number }\n    >((stack) => {\n        if (!stack) return;\n        const { x, y, w, h } = stack;\n\n        gl.viewport(x, y, w, h);\n    });\n\n    const [pushProgram, popProgram] = genStack<WebGLProgram>((p) =>\n        gl.useProgram(p)\n    );\n\n    pushViewport({\n        x: 0,\n        y: 0,\n        w: gl.drawingBufferWidth,\n        h: gl.drawingBufferHeight,\n    });\n\n    return {\n        gl,\n        opts,\n        onDestroy,\n        destroy,\n        pushTexture2D,\n        popTexture2D,\n        pushArrayBuffer,\n        popArrayBuffer,\n        pushElementArrayBuffer,\n        popElementArrayBuffer,\n        pushFramebuffer,\n        popFramebuffer,\n        pushRenderbuffer,\n        popRenderbuffer,\n        pushViewport,\n        popViewport,\n        pushProgram,\n        popProgram,\n        setVertexFormat,\n    };\n}\n", "import { Quad } from \"../math/math\";\nimport { Vec2 } from \"../math/Vec2\";\nimport type { ImageSource } from \"../types\";\nimport { type GfxCtx, Texture } from \"./gfx\";\n\nexport class TexPacker {\n    private lastTextureId: number = 0;\n    private textures: Texture[] = [];\n    private bigTextures: Texture[] = [];\n    private texturesPosition: Map<number, {\n        position: Vec2;\n        size: Vec2;\n        texture: Texture;\n    }> = new Map();\n    private canvas: HTMLCanvasElement;\n    private c2d: CanvasRenderingContext2D;\n    private x: number = 0;\n    private y: number = 0;\n    private curHeight: number = 0;\n    private gfx: GfxCtx;\n    private padding: number;\n\n    constructor(gfx: GfxCtx, w: number, h: number, padding: number) {\n        this.gfx = gfx;\n        this.canvas = document.createElement(\"canvas\");\n        this.canvas.width = w;\n        this.canvas.height = h;\n        this.textures = [Texture.fromImage(gfx, this.canvas)];\n        this.bigTextures = [];\n        this.padding = padding;\n\n        const context2D = this.canvas.getContext(\"2d\");\n        if (!context2D) throw new Error(\"Failed to get 2d context\");\n\n        this.c2d = context2D;\n    }\n\n    // create a image with a single texture\n    addSingle(img: ImageSource): [Texture, Quad, number] {\n        const tex = Texture.fromImage(this.gfx, img);\n        this.bigTextures.push(tex);\n        return [tex, new Quad(0, 0, 1, 1), 0];\n    }\n\n    add(img: ImageSource): [Texture, Quad, number] {\n        const paddedWidth = img.width + this.padding * 2;\n        const paddedHeight = img.height + this.padding * 2;\n\n        if (\n            paddedWidth > this.canvas.width || paddedHeight > this.canvas.height\n        ) {\n            return this.addSingle(img);\n        }\n\n        // next row\n        if (this.x + paddedWidth > this.canvas.width) {\n            this.x = 0;\n            this.y += this.curHeight;\n            this.curHeight = 0;\n        }\n\n        // next texture\n        if (this.y + paddedHeight > this.canvas.height) {\n            this.c2d.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            this.textures.push(Texture.fromImage(this.gfx, this.canvas));\n            this.x = 0;\n            this.y = 0;\n            this.curHeight = 0;\n        }\n\n        const curTex = this.textures[this.textures.length - 1];\n        const pos = new Vec2(this.x + this.padding, this.y + this.padding);\n\n        this.x += paddedWidth;\n\n        if (paddedHeight > this.curHeight) {\n            this.curHeight = paddedHeight;\n        }\n\n        if (img instanceof ImageData) {\n            this.c2d.putImageData(img, pos.x, pos.y);\n        }\n        else {\n            this.c2d.drawImage(img, pos.x, pos.y);\n        }\n\n        curTex.update(this.canvas);\n\n        this.texturesPosition.set(this.lastTextureId, {\n            position: pos,\n            size: new Vec2(img.width, img.height),\n            texture: curTex,\n        });\n\n        this.lastTextureId++;\n\n        return [\n            curTex,\n            new Quad(\n                pos.x / this.canvas.width,\n                pos.y / this.canvas.height,\n                img.width / this.canvas.width,\n                img.height / this.canvas.height,\n            ),\n            this.lastTextureId - 1,\n        ];\n    }\n    free() {\n        for (const tex of this.textures) {\n            tex.free();\n        }\n        for (const tex of this.bigTextures) {\n            tex.free();\n        }\n    }\n    remove(packerId: number) {\n        const tex = this.texturesPosition.get(packerId);\n\n        if (!tex) {\n            throw new Error(\"Texture with packer id not found\");\n        }\n\n        this.c2d.clearRect(\n            tex.position.x,\n            tex.position.y,\n            tex.size.x,\n            tex.size.y,\n        );\n\n        tex.texture.update(this.canvas);\n        this.texturesPosition.delete(packerId);\n        this.x -= tex.size.x;\n    }\n}\n", "import { SPRITE_ATLAS_HEIGHT, SPRITE_ATLAS_WIDTH } from \"../constants/general\";\nimport type { SerializedGameObj } from \"../ecs/entity/prefab\";\nimport { KEvent, KEventHandler } from \"../events/events\";\nimport type { GfxCtx } from \"../gfx/gfx\";\nimport { TexPacker } from \"../gfx/TexPacker\";\nimport { _k } from \"../shared\";\nimport type { MustKAPLAYOpt } from \"../types\";\nimport type { BitmapFontData } from \"./bitmapFont\";\nimport type { FontData } from \"./font\";\nimport type { ShaderData } from \"./shader\";\nimport type { SoundData } from \"./sound\";\nimport type { SpriteData } from \"./sprite\";\nimport { fixURL } from \"./utils\";\n\n/**\n * An asset is a resource that is loaded asynchronously.\n *\n * It can be a sprite, a sound, a font, a shader, etc.\n */\nexport class Asset<D> {\n    loaded: boolean = false;\n    data: D | null = null;\n    error: Error | null = null;\n    private onLoadEvents: KEvent<[D]> = new KEvent();\n    private onErrorEvents: KEvent<[Error]> = new KEvent();\n    private onFinishEvents: KEvent<[]> = new KEvent();\n\n    constructor(loader: Promise<D>) {\n        loader.then((data) => {\n            this.loaded = true;\n            this.data = data;\n            this.onLoadEvents.trigger(data);\n        }).catch((err) => {\n            this.error = err;\n\n            if (this.onErrorEvents.numListeners() > 0) {\n                this.onErrorEvents.trigger(err);\n            }\n            else {\n                throw err;\n            }\n        }).finally(() => {\n            this.onFinishEvents.trigger();\n            this.loaded = true;\n        });\n    }\n    static loaded<D>(data: D): Asset<D> {\n        const asset = new Asset(Promise.resolve(data)) as Asset<D>;\n        asset.data = data;\n        asset.loaded = true;\n        return asset;\n    }\n    onLoad(action: (data: D) => void) {\n        if (this.loaded && this.data) {\n            action(this.data);\n        }\n        else {\n            this.onLoadEvents.add(action);\n        }\n        return this;\n    }\n    onError(action: (err: Error) => void) {\n        if (this.loaded && this.error) {\n            action(this.error);\n        }\n        else {\n            this.onErrorEvents.add(action);\n        }\n        return this;\n    }\n    onFinish(action: () => void) {\n        if (this.loaded) {\n            action();\n        }\n        else {\n            this.onFinishEvents.add(action);\n        }\n        return this;\n    }\n    then(action: (data: D) => void): Asset<D> {\n        return this.onLoad(action);\n    }\n    catch(action: (err: Error) => void): Asset<D> {\n        return this.onError(action);\n    }\n    finally(action: () => void): Asset<D> {\n        return this.onFinish(action);\n    }\n}\n\n/**\n * @group Assets\n * @subgroup Types\n */\nexport class AssetBucket<D> {\n    assets: Map<string, Asset<D>> = new Map();\n    waiters: KEventHandler<any> = new KEventHandler();\n    errorWaiters: KEventHandler<any> = new KEventHandler();\n    lastUID: number = 0;\n\n    add(name: string | null, loader: Promise<D>): Asset<D> {\n        // if user don't provide a name we use a generated one\n        const id = name ?? (this.lastUID++ + \"\");\n        const asset = new Asset(loader);\n        this.assets.set(id, asset);\n        asset.onLoad(d => {\n            this.waiters.trigger(id, d);\n        });\n        asset.onError(d => {\n            this.errorWaiters.trigger(id, d);\n        });\n\n        return asset;\n    }\n    addLoaded(name: string | null, data: D): Asset<D> {\n        const id = name ?? (this.lastUID++ + \"\");\n        const asset = Asset.loaded(data);\n        this.assets.set(id, asset);\n        this.waiters.trigger(id, data);\n        this.errorWaiters.remove(id);\n\n        return asset;\n    }\n    // if not found return undefined\n    get(handle: string): Asset<D> | undefined {\n        return this.assets.get(handle);\n    }\n    progress(): number {\n        if (this.assets.size === 0) {\n            return 1;\n        }\n        let loaded = 0;\n\n        this.assets.forEach((asset) => {\n            if (asset.loaded) {\n                loaded++;\n            }\n        });\n\n        return loaded / this.assets.size;\n    }\n\n    getFailedAssets(): [string, Asset<D>][] {\n        return Array.from(this.assets.keys()).filter(a =>\n            this.assets.get(a)!.error !== null\n        ).map(a => [a, this.assets.get(a)!]);\n    }\n\n    waitFor(name: string, timeout: number): PromiseLike<D> {\n        const asset = this.get(name);\n        if (asset) {\n            if (asset.loaded) return Promise.resolve(asset.data!);\n            else {\n                return Promise.race([\n                    new Promise<D>((res, rej) => {\n                        asset.onLoad(res);\n                        asset.onError(rej);\n                    }),\n                    new Promise<never>((_, rej) =>\n                        setTimeout(\n                            () => rej(\"timed out waiting for asset \" + name),\n                            timeout,\n                        )\n                    ),\n                ]);\n            }\n        }\n        const x = Promise.withResolvers<D>();\n        this.waiters.onOnce(name, x.resolve);\n        this.errorWaiters.onOnce(name, x.reject);\n        setTimeout(\n            () => x.reject(\"timed out waiting for asset \" + name),\n            timeout,\n        );\n        return x.promise;\n    }\n}\n\nexport function fetchURL(url: string) {\n    return fetch(url).then((res) => {\n        if (!res.ok) throw new Error(`Failed to fetch \"${url}\"`);\n        return res;\n    });\n}\n\nexport function fetchJSON(path: string) {\n    return fetchURL(path).then((res) => res.json());\n}\n\nexport function fetchText(path: string) {\n    return fetchURL(path).then((res) => res.text());\n}\n\nexport function fetchArrayBuffer(path: string) {\n    return fetchURL(path).then((res) => res.arrayBuffer());\n}\n\n// global load path prefix\nexport function loadRoot(path?: string): string {\n    if (path !== undefined) {\n        _k.assets.urlPrefix = path;\n    }\n    return _k.assets.urlPrefix;\n}\n\nexport function loadJSON(name: string, url: string) {\n    return _k.assets.custom.add(name, fetchJSON(fixURL(url)));\n}\n\n// wrapper around image loader to get a Promise\nexport function loadImg(src: string): Promise<HTMLImageElement> {\n    const img = new Image();\n    img.crossOrigin = \"anonymous\";\n    img.src = src;\n\n    return new Promise<HTMLImageElement>((resolve, reject) => {\n        img.onload = () => resolve(img);\n        img.onerror = () =>\n            reject(new Error(`Failed to load image from \"${src}\"`));\n    });\n}\n\nexport function loadProgress(): number {\n    const buckets = [\n        _k.assets.sprites,\n        _k.assets.sounds,\n        _k.assets.shaders,\n        _k.assets.fonts,\n        _k.assets.bitmapFonts,\n        _k.assets.custom,\n    ];\n    return buckets.reduce((n, bucket) => n + bucket.progress(), 0)\n        / buckets.length;\n}\n\nexport function getFailedAssets(): [string, Asset<any>][] {\n    const buckets = [\n        _k.assets.sprites,\n        _k.assets.sounds,\n        _k.assets.shaders,\n        _k.assets.fonts,\n        _k.assets.bitmapFonts,\n        _k.assets.custom,\n    ];\n    return buckets.reduce(\n        (fails, bucket) => fails.concat(bucket.getFailedAssets()),\n        [] as [string, Asset<any>][],\n    );\n}\nexport function getAsset(name: string): Asset<any> | null {\n    return _k.assets.custom.get(name) ?? null;\n}\n\n// wrap individual loaders with global loader counter, for stuff like progress bar\nexport function load<T>(prom: Promise<T>): Asset<T> {\n    return _k.assets.custom.add(null, prom);\n}\n\n// create assets\n/** @ignore */\nexport type InternalAssetsCtx = ReturnType<typeof initAssets>;\n\n/** @ignore */\nexport const initAssets = (ggl: GfxCtx, opt: MustKAPLAYOpt) => {\n    const assets = {\n        urlPrefix: \"\",\n        // asset holders\n        sprites: new AssetBucket<SpriteData>(),\n        fonts: new AssetBucket<FontData>(),\n        bitmapFonts: new AssetBucket<BitmapFontData>(),\n        sounds: new AssetBucket<SoundData>(),\n        shaders: new AssetBucket<ShaderData>(),\n        custom: new AssetBucket<any>(),\n        prefabAssets: new AssetBucket<SerializedGameObj>(),\n        music: {} as Record<string, string>,\n        packer: new TexPacker(\n            ggl,\n            SPRITE_ATLAS_WIDTH,\n            SPRITE_ATLAS_HEIGHT,\n            opt.spriteAtlasPadding,\n        ),\n        // if we finished initially loading all assets\n        loaded: false,\n    };\n\n    return assets;\n};\n", "import { _k } from \"../shared\";\nimport { dataURLToArrayBuffer, isDataURL } from \"../utils/dataURL\";\nimport { Asset, fetchArrayBuffer, loadProgress } from \"./asset\";\nimport { fixURL } from \"./utils\";\n\nexport class SoundData {\n    buf: AudioBuffer;\n\n    constructor(buf: AudioBuffer) {\n        this.buf = buf;\n    }\n\n    static fromAudioBuffer(buf: AudioBuffer): SoundData {\n        return new SoundData(buf);\n    }\n\n    static fromArrayBuffer(buf: ArrayBuffer): Promise<SoundData> {\n        return new Promise((resolve, reject) =>\n            _k.audio.ctx.decodeAudioData(buf, resolve, reject)\n        ).then((buf) => new SoundData(buf as AudioBuffer));\n    }\n\n    static fromURL(url: string): Promise<SoundData> {\n        if (isDataURL(url)) {\n            return SoundData.fromArrayBuffer(dataURLToArrayBuffer(url));\n        }\n        else {\n            return fetchArrayBuffer(url).then((buf) =>\n                SoundData.fromArrayBuffer(buf)\n            );\n        }\n    }\n}\n\nexport function resolveSound(\n    src: string | SoundData | Asset<SoundData>,\n): Asset<SoundData> | null {\n    if (typeof src === \"string\") {\n        const snd = getSound(src);\n        if (snd) {\n            return snd;\n        }\n        else if (loadProgress() < 1) {\n            return null;\n        }\n        else {\n            throw new Error(`Sound not found: ${src}`);\n        }\n    }\n    else if (src instanceof SoundData) {\n        return Asset.loaded(src);\n    }\n    else if (src instanceof Asset) {\n        return src;\n    }\n    else {\n        throw new Error(`Invalid sound: ${src}`);\n    }\n}\n\nexport function getSound(name: string): Asset<SoundData> | null {\n    return _k.assets.sounds.get(name) ?? null;\n}\n\n// load a sound to asset manager\nexport function loadSound(\n    name: string | null,\n    src: string | ArrayBuffer | AudioBuffer,\n): Asset<SoundData> {\n    const fixedSrc = fixURL(src);\n    let sound: Promise<SoundData> | SoundData;\n\n    if (typeof fixedSrc === \"string\") {\n        sound = SoundData.fromURL(fixedSrc);\n    }\n    else if (fixedSrc instanceof ArrayBuffer) {\n        sound = SoundData.fromArrayBuffer(fixedSrc);\n    }\n    else {\n        sound = Promise.resolve(SoundData.fromAudioBuffer(fixedSrc));\n    }\n\n    return _k.assets.sounds.add(name, sound);\n}\n\nexport function loadMusic(\n    name: string | null,\n    url: string,\n) {\n    const musicUrl = fixURL(url);\n    const a = new Audio(musicUrl);\n    a.preload = \"auto\";\n\n    return _k.assets.music[name as keyof typeof _k.assets.music] = musicUrl;\n}\n", "import type { DrawSpriteOpt } from \"../gfx/draw/drawSprite\";\nimport type { Texture } from \"../gfx/gfx\";\nimport { Quad } from \"../math/math\";\nimport { _k } from \"../shared\";\nimport { type ImageSource } from \"../types\";\nimport { Asset, loadImg, loadProgress } from \"./asset\";\nimport { fixURL } from \"./utils\";\n\n/**\n * Frame-based animation configuration.\n *\n * @group Assets\n * @subgroup Types\n */\nexport type SpriteAnim = number | {\n    /**\n     * The starting frame.\n     */\n    from?: number;\n    /**\n     * The end frame.\n     */\n    to?: number;\n    /**\n     * If this anim should be played in loop.\n     */\n    loop?: boolean;\n    /**\n     * When looping should it move back instead of go to start frame again.\n     */\n    pingpong?: boolean;\n    /**\n     * This anim's speed in frames per second.\n     */\n    speed?: number;\n    /**\n     * List of frames for the animation.\n     *\n     * If this property exists, **from, to, and pingpong will be ignored**.\n     */\n    frames?: number[];\n};\n\n/**\n * A dict of name <-> animation.\n *\n * @group Assets\n * @subgroup Types\n */\nexport type SpriteAnims = Record<string, SpriteAnim>;\n\n// TODO: support frameWidth and frameHeight as alternative to slice\n/**\n * Sprite loading options.\n *\n * @group Assets\n * @subgroup Types\n */\nexport interface LoadSpriteOpt {\n    /**\n     * If the defined area contains multiple sprites, how many frames are in the area horizontally.\n     */\n    sliceX?: number;\n    /**\n     * If the defined area contains multiple sprites, how many frames are in the area vertically.\n     */\n    sliceY?: number;\n    /**\n     * 9 slice sprite for proportional scaling.\n     *\n     * @since v3000.0\n     */\n    slice9?: NineSlice;\n    /**\n     * Individual frames.\n     *\n     * @since v3000.0\n     */\n    frames?: Quad[];\n    /**\n     * Animation configuration.\n     */\n    anims?: SpriteAnims;\n    /**\n     * If the sprite is a single image.\n     */\n    singular?: boolean;\n}\n\n/**\n * @group Assets\n * @subgroup Types\n */\nexport type NineSlice = {\n    /**\n     * The width of the 9-slice's left column.\n     */\n    left: number;\n    /**\n     * The width of the 9-slice's right column.\n     */\n    right: number;\n    /**\n     * The height of the 9-slice's top row.\n     */\n    top: number;\n    /**\n     * The height of the 9-slice's bottom row.\n     */\n    bottom: number;\n};\n\n/**\n * Possible values for loading an sprite using {@link loadSprite `loadSprite`}.\n *\n * @group Assets\n * @subgroup Types\n */\nexport type LoadSpriteSrc = string | ImageSource;\n\nexport class SpriteData {\n    tex: Texture;\n    frames: Quad[] = [new Quad(0, 0, 1, 1)];\n    anims: SpriteAnims = {};\n    slice9: NineSlice | null = null;\n    packerId: number | null;\n\n    constructor(\n        tex: Texture,\n        frames?: Quad[],\n        anims: SpriteAnims = {},\n        slice9: NineSlice | null = null,\n        packerId: number | null = null,\n    ) {\n        this.tex = tex;\n        if (frames) this.frames = frames;\n        this.anims = anims;\n        this.slice9 = slice9;\n        this.packerId = packerId;\n    }\n\n    /**\n     * @since v3001.0\n     */\n    get width() {\n        return this.tex.width * this.frames[0].w;\n    }\n\n    get height() {\n        return this.tex.height * this.frames[0].h;\n    }\n\n    static from(\n        src: LoadSpriteSrc,\n        opt: LoadSpriteOpt = {},\n    ): Promise<SpriteData> {\n        return typeof src === \"string\"\n            ? SpriteData.fromURL(src, opt)\n            : Promise.resolve(SpriteData.fromImage(src, opt));\n    }\n\n    static fromImage(\n        data: ImageSource,\n        opt: LoadSpriteOpt = {},\n    ): SpriteData {\n        const [tex, quad, packerId] = opt.singular\n            ? _k.assets.packer.addSingle(data)\n            : _k.assets.packer.add(data);\n        const frames = opt.frames\n            ? opt.frames.map((f) =>\n                new Quad(\n                    quad.x + f.x * quad.w,\n                    quad.y + f.y * quad.h,\n                    f.w * quad.w,\n                    f.h * quad.h,\n                )\n            )\n            : slice(\n                opt.sliceX || 1,\n                opt.sliceY || 1,\n                quad.x,\n                quad.y,\n                quad.w,\n                quad.h,\n            );\n\n        return new SpriteData(tex, frames, opt.anims, opt.slice9, packerId);\n    }\n\n    static fromURL(\n        url: string,\n        opt: LoadSpriteOpt = {},\n    ): Promise<SpriteData> {\n        return loadImg(url).then((img) => SpriteData.fromImage(img, opt));\n    }\n}\n\nexport function resolveSprite(\n    src: DrawSpriteOpt[\"sprite\"],\n): Asset<SpriteData> | null {\n    if (typeof src === \"string\") {\n        const spr = getSprite(src);\n        if (spr) {\n            // if it's already loaded or being loading, return it\n            return spr;\n        }\n        else if (loadProgress() < 1) {\n            // if there's any other ongoing loading task we return empty and don't error yet\n            return null;\n        }\n        else {\n            // if all other assets are loaded and we still haven't found this sprite, throw\n            throw new Error(`Sprite not found: ${src}`);\n        }\n    }\n    // else if (src instanceof SpriteData) {\n    //     return Asset.loaded(src);\n    // }\n    else if (src instanceof Asset) {\n        return src;\n    }\n    else {\n        throw new Error(`Invalid sprite: ${src}`);\n    }\n}\n\nexport function getSprite(name: string): Asset<SpriteData> | null {\n    return _k.assets.sprites.get(name) ?? null;\n}\n\n// load a sprite to asset manager\nexport function loadSprite(\n    name: string | null,\n    src: LoadSpriteSrc | LoadSpriteSrc[],\n    opt: LoadSpriteOpt = {\n        sliceX: 1,\n        sliceY: 1,\n        anims: {},\n    },\n): Asset<SpriteData> {\n    src = fixURL(src);\n\n    if (Array.isArray(src)) {\n        if (src.some((s) => typeof s === \"string\")) {\n            return _k.assets.sprites.add(\n                name,\n                Promise.all(src.map((s) => {\n                    return typeof s === \"string\"\n                        ? loadImg(s)\n                        : Promise.resolve(s);\n                })).then((images) => createSpriteSheet(images, opt)),\n            );\n        }\n        else {\n            return _k.assets.sprites.addLoaded(\n                name,\n                createSpriteSheet(src as ImageSource[], opt),\n            );\n        }\n    }\n    else {\n        if (typeof src === \"string\") {\n            return _k.assets.sprites.add(name, SpriteData.from(src, opt));\n        }\n        else {\n            return _k.assets.sprites.addLoaded(\n                name,\n                SpriteData.fromImage(src, opt),\n            );\n        }\n    }\n}\n\nexport function slice(x = 1, y = 1, dx = 0, dy = 0, w = 1, h = 1): Quad[] {\n    const frames: Quad[] = [];\n    const qw = w / x;\n    const qh = h / y;\n    for (let j = 0; j < y; j++) {\n        for (let i = 0; i < x; i++) {\n            frames.push(\n                new Quad(\n                    dx + i * qw,\n                    dy + j * qh,\n                    qw,\n                    qh,\n                ),\n            );\n        }\n    }\n    return frames;\n}\n\n// TODO: load synchronously if passed ImageSource\nexport function createSpriteSheet(\n    images: ImageSource[],\n    opt: LoadSpriteOpt = {},\n): SpriteData {\n    const canvas = document.createElement(\"canvas\");\n    const width = images[0].width;\n    const height = images[0].height;\n    canvas.width = width * images.length;\n    canvas.height = height;\n\n    const c2d = canvas.getContext(\"2d\");\n    if (!c2d) throw new Error(\"Failed to create canvas context\");\n\n    images.forEach((img, i) => {\n        if (img instanceof ImageData) {\n            c2d.putImageData(img, i * width, 0);\n        }\n        else {\n            c2d.drawImage(img, i * width, 0);\n        }\n    });\n\n    const merged = c2d.getImageData(0, 0, images.length * width, height);\n\n    return SpriteData.fromImage(merged, {\n        ...opt,\n        sliceX: images.length,\n        sliceY: 1,\n    });\n}\n\nexport function loadBean(name: string = \"bean\"): Asset<SpriteData> {\n    if (!_k.game.defaultAssets.bean) {\n        throw new Error(\"You can't use bean in kaplay/mini\");\n    }\n\n    return loadSprite(name, _k.game.defaultAssets.bean);\n}\n", "/** @ignore */\nexport interface InternalAudioCtx {\n    ctx: AudioContext;\n    masterNode: GainNode;\n}\n\n/** @ignore */\nexport function createEmptyAudioBuffer(ctx: AudioContext) {\n    return ctx.createBuffer(1, 1, 44100);\n}\n\n/** @ignore */\nexport const initAudio = (): InternalAudioCtx => {\n    const audio = (() => {\n        const ctx = new (\n            window.AudioContext || (window as any).webkitAudioContext\n        )() as AudioContext;\n\n        const masterNode = ctx.createGain();\n        masterNode.connect(ctx.destination);\n\n        return {\n            ctx,\n            masterNode,\n        };\n    })();\n\n    return audio;\n};\n", "// Related to load and save data\n\nexport function getData<T>(key: string, def?: T): T | null {\n    try {\n        return JSON.parse(window.localStorage[key]);\n    } catch {\n        if (def) {\n            setData(key, def);\n            return def;\n        }\n        else {\n            return null;\n        }\n    }\n}\n\nexport function setData(key: string, data: any) {\n    window.localStorage[key] = JSON.stringify(data);\n}\n", "import { Quad } from \"../math/math\";\nimport { _k } from \"../shared\";\nimport { getFileName } from \"../utils/dataURL\";\nimport { type Asset, fetchJSON } from \"./asset\";\nimport { type LoadSpriteSrc, type SpriteAnim, SpriteData } from \"./sprite\";\nimport { fixURL } from \"./utils\";\n\n/**\n * @group Assets\n * @subgroup Data\n */\nexport type AsepriteData = {\n    frames: Array<{\n        frame: {\n            x: number;\n            y: number;\n            w: number;\n            h: number;\n        };\n    }>;\n    meta: {\n        size: { w: number; h: number };\n        frameTags: Array<{\n            name: string;\n            from: number;\n            to: number;\n            direction: \"forward\" | \"reverse\" | \"pingpong\";\n        }>;\n    };\n};\n\nexport function loadAseprite(\n    name: string | null,\n    imgSrc: LoadSpriteSrc,\n    jsonSrc: string | AsepriteData,\n): Asset<SpriteData> {\n    imgSrc = fixURL(imgSrc);\n    jsonSrc = fixURL(jsonSrc);\n\n    if (typeof imgSrc === \"string\" && !jsonSrc) {\n        jsonSrc = getFileName(imgSrc) + \".json\";\n    }\n\n    const resolveJSON = typeof jsonSrc === \"string\"\n        ? fetchJSON(jsonSrc)\n        : Promise.resolve(jsonSrc);\n\n    return _k.assets.sprites.add(\n        name,\n        resolveJSON.then((data: AsepriteData) => {\n            const size = data.meta.size;\n            const frames = data.frames.map((f: any) => {\n                return new Quad(\n                    f.frame.x / size.w,\n                    f.frame.y / size.h,\n                    f.frame.w / size.w,\n                    f.frame.h / size.h,\n                );\n            });\n            const anims: Record<string, number | SpriteAnim> = {};\n\n            for (const anim of data.meta.frameTags) {\n                if (anim.from === anim.to) {\n                    anims[anim.name] = anim.from;\n                }\n                else {\n                    anims[anim.name] = {\n                        from: anim.from,\n                        to: anim.to,\n                        speed: 10,\n                        loop: true,\n                        pingpong: anim.direction === \"pingpong\",\n                    };\n                }\n            }\n            return SpriteData.from(imgSrc, {\n                frames: frames,\n                anims: anims,\n            });\n        }),\n    );\n}\n", "import {\n    DEF_FONT,\n    DEF_FONT_FILTER,\n    DEF_TEXT_CACHE_SIZE,\n    MAX_TEXT_CACHE_SIZE,\n} from \"../constants/general\";\nimport type { DrawTextOpt } from \"../gfx/draw/drawText\";\nimport type { Texture } from \"../gfx/gfx\";\nimport { rgb } from \"../math/color\";\nimport { Quad } from \"../math/math\";\nimport { _k } from \"../shared\";\nimport type { LoadFontOpt, Outline, TexFilter } from \"../types\";\nimport { Asset, loadProgress } from \"./asset\";\nimport { type BitmapFontData, getBitmapFont, type GfxFont } from \"./bitmapFont\";\n\n/**\n * @group Assets\n * @subgroup Data\n */\nexport class FontData {\n    fontface: FontFace;\n    filter: TexFilter = DEF_FONT_FILTER;\n    outline: Outline | null = null;\n    size: number = DEF_TEXT_CACHE_SIZE;\n    constructor(face: FontFace, opt: LoadFontOpt = {}) {\n        this.fontface = face;\n        this.filter = opt.filter ?? DEF_FONT_FILTER;\n        this.size = opt.size ?? DEF_TEXT_CACHE_SIZE;\n        if (this.size > MAX_TEXT_CACHE_SIZE) {\n            throw new Error(`Max font size: ${MAX_TEXT_CACHE_SIZE}`);\n        }\n        if (opt.outline) {\n            this.outline = {\n                width: 1,\n                color: rgb(0, 0, 0),\n            };\n            if (typeof opt.outline === \"number\") {\n                this.outline.width = opt.outline;\n            }\n            else if (typeof opt.outline === \"object\") {\n                if (opt.outline.width) {\n                    this.outline.width = opt.outline.width;\n                }\n                if (opt.outline.color) {\n                    this.outline.color = opt.outline.color;\n                }\n            }\n        }\n    }\n}\n\nexport function resolveFont(\n    src: DrawTextOpt[\"font\"],\n):\n    | FontData\n    | Asset<FontData>\n    | BitmapFontData\n    | Asset<BitmapFontData>\n    | string\n    | null\n    | void\n{\n    if (!src) {\n        return resolveFont(_k.globalOpt.font ?? DEF_FONT);\n    }\n    if (typeof src === \"string\") {\n        const bfont = getBitmapFont(src);\n        const font = getFont(src);\n        if (bfont) {\n            return bfont.data ?? bfont;\n        }\n        else if (font) {\n            return font.data ?? font;\n        }\n        else if (\n            document.fonts.check(`${DEF_TEXT_CACHE_SIZE}px ${src}`)\n        ) {\n            return src;\n        }\n        else if (loadProgress() < 1) {\n            return null;\n        }\n        else {\n            throw new Error(`Font not found: ${src}`);\n        }\n    }\n    else if (src instanceof Asset) {\n        return src.data ? src.data : src;\n    }\n\n    return src;\n}\n\nexport function getFont(name: string): Asset<FontData> | null {\n    return _k.assets.fonts.get(name) ?? null;\n}\n\n// TODO: pass in null src to store opt for default fonts like \"monospace\"\nexport function loadFont(\n    name: string,\n    src: string | ArrayBuffer | ArrayBufferView,\n    opt: LoadFontOpt = {},\n): Asset<FontData> {\n    const font = new FontFace(\n        name,\n        typeof src === \"string\" ? `url(${src})` : src,\n    );\n    document.fonts.add(font);\n\n    return _k.assets.fonts.add(\n        name,\n        font.load().catch((err) => {\n            throw new Error(`Failed to load font from \"${src}\": ${err}`);\n        }).then((face) => new FontData(face, opt)),\n    );\n}\n\nexport function makeFont(\n    tex: Texture,\n    gw: number,\n    gh: number,\n    chars: string,\n): GfxFont {\n    const cols = tex.width / gw;\n    const map: Record<string, Quad> = {};\n    const charMap = chars.split(\"\").entries();\n\n    for (const [i, ch] of charMap) {\n        map[ch] = new Quad(\n            (i % cols) * gw,\n            Math.floor(i / cols) * gh,\n            gw,\n            gh,\n        );\n    }\n\n    return {\n        tex: tex,\n        map: map,\n        size: gh,\n    };\n}\n", "import { ASCII_CHARS } from \"../constants/general\";\nimport { Texture } from \"../gfx/gfx\";\nimport { Quad } from \"../math/math\";\nimport { _k } from \"../shared\";\nimport type { TexFilter } from \"../types\";\nimport { type Asset, loadImg } from \"./asset\";\nimport { makeFont } from \"./font\";\nimport { fixURL } from \"./utils\";\n\n/**\n * @group Assets\n * @subgroup Types\n */\nexport interface GfxFont {\n    tex: Texture;\n    map: Record<string, Quad>;\n    size: number;\n}\n\n/**\n * @group Assets\n * @subgroup Data\n */\nexport type BitmapFontData = GfxFont;\n\nexport function getBitmapFont(name: string): Asset<BitmapFontData> | null {\n    return _k.assets.bitmapFonts.get(name) ?? null;\n}\n\n/**\n * @group Assets\n * @subgroup Types\n */\nexport interface LoadBitmapFontOpt {\n    /**\n     * A string of characters to map to every sprite in the characters grid\n     *\n     * @default \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n     */\n    chars?: string;\n    filter?: TexFilter;\n}\n\n// TODO: support LoadSpriteSrc\nexport function loadBitmapFont(\n    name: string | null,\n    src: string,\n    gw: number,\n    gh: number,\n    opt: LoadBitmapFontOpt = {},\n): Asset<BitmapFontData> {\n    const fontSrc = fixURL(src);\n\n    return _k.assets.bitmapFonts.add(\n        name,\n        loadImg(fontSrc)\n            .then((img) => {\n                return makeFont(\n                    Texture.fromImage(_k.gfx.ggl, img, opt),\n                    gw,\n                    gh,\n                    opt.chars ?? ASCII_CHARS,\n                );\n            }),\n    );\n}\n\nexport function loadBitmapFontFromSprite(\n    spriteID: string,\n    chars: string,\n): Asset<BitmapFontData> {\n    return _k.assets.bitmapFonts.add(\n        spriteID,\n        (async () => {\n            if (/[\\n ]/.test(chars)) {\n                throw new Error(\n                    `While defining sprite font \"${spriteID}\": spaces are not allowed in chars`,\n                );\n            }\n            const splittedChars = chars.split(\"\");\n            if (new Set(splittedChars).size !== splittedChars.length) {\n                throw new Error(\n                    `Duplicate characters given when defining sprite font \"${spriteID}\": ${chars}`,\n                );\n            }\n            const spr = await _k.assets.sprites.waitFor(\n                spriteID,\n                _k.globalOpt.loadTimeout ?? 3000,\n            );\n            const frames = spr.frames;\n            if (frames.length < splittedChars.length) {\n                throw new Error(\n                    `Tried to define ${splittedChars.length} characters for sprite font \"${spriteID}\", but there are only ${frames.length} frames defined`,\n                );\n            }\n            const tex = spr.tex;\n            const h = Math.max(...frames.map(q => q.h)) * tex.height;\n            return {\n                tex,\n                map: Object.fromEntries(\n                    splittedChars.map((c, i) => {\n                        const q = frames[i];\n                        const q2 = new Quad(\n                            q.x * tex.width,\n                            q.y * tex.height,\n                            q.w * tex.width,\n                            q.h * tex.height,\n                        );\n                        return [c, q2];\n                    }),\n                ),\n                size: h,\n            };\n        })(),\n    );\n}\n\n// loading happiness...\nexport function loadHappy(\n    fontName: string = \"happy\",\n    opt?: LoadBitmapFontOpt,\n) {\n    if (!_k.game.defaultAssets.happy) {\n        throw new Error(\"You can't use loadHappy with kaplay/mini\");\n    }\n\n    return loadBitmapFont(fontName, _k.game.defaultAssets.happy, 28, 36, opt);\n}\n", "import { SPRITE_ATLAS_HEIGHT, SPRITE_ATLAS_WIDTH } from \"../constants/general\";\nimport { Quad } from \"../math/math\";\nimport { _k } from \"../shared\";\nimport { type Asset, fetchJSON, load } from \"./asset\";\nimport {\n    type LoadSpriteOpt,\n    type LoadSpriteSrc,\n    slice,\n    SpriteData,\n} from \"./sprite\";\nimport { fixURL } from \"./utils\";\n\n/**\n * @group Assets\n * @subgroup Data\n */\nexport type SpriteAtlasData = Record<string, SpriteAtlasEntry>;\n\n/**\n * A sprite in a sprite atlas.\n *\n * @group Assets\n * @subgroup Types\n */\nexport type SpriteAtlasEntry = LoadSpriteOpt & {\n    /**\n     * X position of the top left corner.\n     */\n    x: number;\n    /**\n     * Y position of the top left corner.\n     */\n    y: number;\n    /**\n     * Sprite area width.\n     */\n    width: number;\n    /**\n     * Sprite area height.\n     */\n    height: number;\n};\n\nexport function loadSpriteAtlas(\n    src: LoadSpriteSrc,\n    data: SpriteAtlasData | string,\n): Asset<Record<string, SpriteData>> {\n    src = fixURL(src);\n    if (typeof data === \"string\") {\n        return load(\n            new Promise((res, rej) => {\n                fetchJSON(data).then((json) => {\n                    loadSpriteAtlas(src, json).then(res).catch(rej);\n                });\n            }),\n        );\n    }\n    return load(\n        SpriteData.from(src).then((atlas) => {\n            const map: Record<string, SpriteData> = {};\n\n            for (const name in data) {\n                const info = data[name];\n                const quad = atlas.frames[0];\n                const w = SPRITE_ATLAS_WIDTH * quad.w;\n                const h = SPRITE_ATLAS_HEIGHT * quad.h;\n                const frames = info.frames\n                    ? info.frames.map((f) =>\n                        new Quad(\n                            quad.x + (info.x + f.x) / w * quad.w,\n                            quad.y + (info.y + f.y) / h * quad.h,\n                            f.w / w * quad.w,\n                            f.h / h * quad.h,\n                        )\n                    )\n                    : slice(\n                        info.sliceX || 1,\n                        info.sliceY || 1,\n                        quad.x + info.x / w * quad.w,\n                        quad.y + info.y / h * quad.h,\n                        info.width / w * quad.w,\n                        info.height / h * quad.h,\n                    );\n                const spr = new SpriteData(atlas.tex, frames, info.anims);\n                _k.assets.sprites.addLoaded(name, spr);\n                map[name] = spr;\n            }\n            return map;\n        }),\n    );\n}\n", "import { KEvent } from \"../events/events\";\nimport { clamp } from \"../math/clamp\";\nimport { _k } from \"../shared\";\nimport type { AudioPlay, AudioPlayOpt } from \"./play\";\n\nexport function playMusic(url: string, opt: AudioPlayOpt = {}): AudioPlay {\n    const onEndEvents = new KEvent();\n    const el = new Audio(url);\n    el.crossOrigin = \"anonymous\";\n    el.loop = Boolean(opt.loop);\n\n    const src = _k.audio.ctx.createMediaElementSource(el);\n\n    src.connect(opt.connectTo ?? _k.audio.masterNode);\n\n    function resumeAudioCtx() {\n        if (_k.debug.paused) return;\n        if (_k.app.isHidden() && !_k.globalOpt.backgroundAudio) return;\n        _k.audio.ctx.resume();\n    }\n\n    function play() {\n        resumeAudioCtx();\n        el.play();\n    }\n\n    if (!opt.paused) {\n        play();\n    }\n\n    el.onended = () => onEndEvents.trigger();\n\n    return {\n        play() {\n            play();\n        },\n\n        seek(time: number) {\n            el.currentTime = time;\n        },\n\n        stop() {\n            el.pause();\n            this.seek(0);\n        },\n\n        set loop(l: boolean) {\n            el.loop = l;\n        },\n\n        get loop() {\n            return el.loop;\n        },\n\n        set paused(p: boolean) {\n            if (p) {\n                el.pause();\n            }\n            else {\n                play();\n            }\n        },\n\n        get paused() {\n            return el.paused;\n        },\n\n        time() {\n            return el.currentTime;\n        },\n\n        duration() {\n            return el.duration;\n        },\n\n        set volume(val: number) {\n            el.volume = clamp(val, 0, 1);\n        },\n\n        get volume() {\n            return el.volume;\n        },\n\n        set speed(s) {\n            el.playbackRate = Math.max(s, 0);\n        },\n\n        get speed() {\n            return el.playbackRate;\n        },\n\n        set detune(d) {\n            // TODO\n        },\n\n        get detune() {\n            // TODO\n            return 0;\n        },\n\n        onEnd(action: () => void) {\n            return onEndEvents.add(action);\n        },\n\n        then(action: () => void) {\n            return this.onEnd(action);\n        },\n\n        connect(node?: AudioNode) {\n            src.disconnect();\n            src.connect(node ?? _k.audio.masterNode);\n        },\n    };\n}\n", "import { Asset } from \"../assets/asset\";\nimport { resolveSound, type SoundData } from \"../assets/sound\";\nimport { KEvent, type KEventController } from \"../events/events\";\nimport { _k } from \"../shared\";\nimport type { MusicData } from \"../types\";\nimport { playMusic } from \"./playMusic\";\n\n// TODO: enable setting on load, make part of SoundData\n/**\n * Audio play configurations.\n *\n * @group Audio\n */\nexport interface AudioPlayOpt {\n    /**\n     * If audio should start out paused.\n     *\n     * @since v3000.0\n     */\n    paused?: boolean;\n    /**\n     * If audio should be played again from start when its ended.\n     */\n    loop?: boolean;\n    /**\n     * Volume of audio. 1.0 means full volume, 0.5 means half volume.\n     */\n    volume?: number;\n    /**\n     * Playback speed. 1.0 means normal playback speed, 2.0 means twice as fast.\n     */\n    speed?: number;\n    /**\n     * Detune the sound. Every 100 means a semitone.\n     *\n     * @example\n     * ```js\n     * // play a random note in the octave\n     * play(\"noteC\", {\n     *     detune: randi(0, 12) * 100,\n     * })\n     * ```\n     */\n    detune?: number;\n    /**\n     * The start time, in seconds.\n     */\n    seek?: number;\n    /**\n     * The stereo pan of the sound.\n     * -1.0 means fully from the left channel, 0.0 means centered, 1.0 means fully right.\n     * Defaults to 0.0.\n     */\n    pan?: number;\n    /**\n     * If the audio node should start out connected to another audio node rather than\n     * KAPLAY's default volume node. Defaults to undefined, i.e. use KAPLAY's volume node.\n     */\n    connectTo?: AudioNode;\n}\n\n/**\n * @group Audio\n */\nexport interface AudioPlay {\n    /**\n     * Start playing audio.\n     *\n     * @since v3000.0\n     */\n    play(time?: number): void;\n    /**\n     * Seek time.\n     *\n     * @since v3000.0\n     */\n    seek(time: number): void;\n    /**\n     * Stop the sound.\n     *\n     * @since v3001.0\n     */\n    stop(): void;\n    /**\n     * If the sound is paused.\n     *\n     * @since v2000.1\n     */\n    paused: boolean;\n    /**\n     * Playback speed of the sound. 1.0 means normal playback speed, 2.0 means twice as fast.\n     */\n    speed: number;\n    /**\n     * Detune the sound. Every 100 means a semitone.\n     *\n     * @example\n     * ```js\n     * // tune down a semitone\n     * music.detune = -100\n     *\n     * // tune up an octave\n     * music.detune = 1200\n     * ```\n     */\n    detune: number;\n    /**\n     * Volume of the sound. 1.0 means full volume, 0.5 means half volume.\n     */\n    volume: number;\n    /**\n     * The stereo pan of the sound.\n     * -1.0 means fully from the left channel, 0.0 means centered, 1.0 means fully right.\n     * Defaults to 0.0.\n     */\n    pan?: number;\n    /**\n     * If the audio should start again when it ends.\n     */\n    loop: boolean;\n    /**\n     * The current playing time (not accurate if speed is changed).\n     */\n    time(): number;\n    /**\n     * The total duration.\n     */\n    duration(): number;\n    /**\n     * Register an event that runs when audio ends.\n     *\n     * @since v3000.0\n     */\n    onEnd(action: () => void): KEventController;\n    then(action: () => void): KEventController;\n    /**\n     * Disconnect the audio node from whatever it is currently connected to\n     * and connect it to the passed-in audio node, or to Kaplay's default volume node\n     * if no node is passed.\n     */\n    connect(node?: AudioNode): void;\n}\n\nexport function play(\n    src:\n        | string\n        | SoundData\n        | Asset<SoundData>\n        | MusicData\n        | Asset<MusicData>,\n    opt: AudioPlayOpt = {},\n): AudioPlay {\n    if (typeof src === \"string\" && _k.assets.music[src]) {\n        return playMusic(_k.assets.music[src], opt);\n    }\n\n    const ctx = _k.audio.ctx;\n    let paused = opt.paused ?? false;\n    let srcNode = ctx.createBufferSource();\n    const onEndEvents = new KEvent();\n    const gainNode = ctx.createGain();\n    const panNode = ctx.createStereoPanner();\n    const pos = opt.seek ?? 0;\n    let startTime = 0;\n    let stopTime = 0;\n    let started = false;\n\n    srcNode.loop = Boolean(opt.loop);\n    srcNode.detune.value = opt.detune ?? 0;\n    srcNode.playbackRate.value = opt.speed ?? 1;\n    srcNode.connect(panNode);\n    srcNode.onended = () => {\n        if (\n            getTime()\n                >= (srcNode.buffer?.duration ?? Number.POSITIVE_INFINITY)\n        ) {\n            onEndEvents.trigger();\n        }\n    };\n    panNode.pan.value = opt.pan ?? 0;\n    panNode.connect(gainNode);\n    gainNode.connect(opt.connectTo ?? _k.audio.masterNode);\n    gainNode.gain.value = opt.volume ?? 1;\n\n    const start = (data: SoundData) => {\n        srcNode.buffer = data.buf;\n        if (!paused) {\n            startTime = ctx.currentTime;\n            srcNode.start(0, pos);\n            started = true;\n        }\n    };\n\n    const snd = resolveSound(\n        // @ts-expect-error Resolve Type Error\n        src,\n    );\n\n    if (snd instanceof Asset) {\n        snd.onLoad(start);\n    }\n\n    const getTime = () => {\n        if (!srcNode.buffer) return 0;\n        const t = paused\n            ? stopTime - startTime\n            : ctx.currentTime - startTime;\n        const d = srcNode.buffer.duration;\n        return srcNode.loop ? t % d : Math.min(t, d);\n    };\n\n    const cloneNode = (oldNode: AudioBufferSourceNode) => {\n        const newNode = ctx.createBufferSource();\n        newNode.buffer = oldNode.buffer;\n        newNode.loop = oldNode.loop;\n        newNode.playbackRate.value = oldNode.playbackRate.value;\n        newNode.detune.value = oldNode.detune.value;\n        newNode.onended = oldNode.onended;\n        newNode.connect(panNode);\n        return newNode;\n    };\n\n    return {\n        stop() {\n            this.paused = true;\n            this.seek(0);\n        },\n\n        set paused(p: boolean) {\n            if (paused === p) return;\n            paused = p;\n            if (p) {\n                if (started) {\n                    srcNode.stop();\n                    started = false;\n                }\n                stopTime = ctx.currentTime;\n            }\n            else {\n                srcNode = cloneNode(srcNode);\n                const pos = stopTime - startTime;\n                srcNode.start(0, pos);\n                started = true;\n                startTime = ctx.currentTime - pos;\n                stopTime = 0;\n            }\n        },\n\n        get paused() {\n            return paused;\n        },\n\n        play(time: number = 0) {\n            this.seek(time);\n            this.paused = false;\n        },\n\n        seek(time: number) {\n            if (!srcNode.buffer?.duration) return;\n            if (time > srcNode.buffer.duration) return;\n            if (paused) {\n                srcNode = cloneNode(srcNode);\n                startTime = stopTime - time;\n            }\n            else {\n                srcNode.stop();\n                srcNode = cloneNode(srcNode);\n                startTime = ctx.currentTime - time;\n                srcNode.start(0, time);\n                started = true;\n                stopTime = 0;\n            }\n        },\n\n        // TODO: affect time()\n        set speed(val: number) {\n            srcNode.playbackRate.value = val;\n        },\n\n        get speed() {\n            return srcNode.playbackRate.value;\n        },\n\n        set detune(val: number) {\n            srcNode.detune.value = val;\n        },\n\n        get detune() {\n            return srcNode.detune.value;\n        },\n\n        set volume(val: number) {\n            gainNode.gain.value = Math.max(val, 0);\n        },\n\n        get volume() {\n            return gainNode.gain.value;\n        },\n\n        set pan(pan: number) {\n            panNode.pan.value = pan;\n        },\n\n        get pan() {\n            return panNode.pan.value;\n        },\n\n        set loop(l: boolean) {\n            srcNode.loop = l;\n        },\n\n        get loop() {\n            return srcNode.loop;\n        },\n\n        duration(): number {\n            return srcNode.buffer?.duration ?? 0;\n        },\n\n        time(): number {\n            return getTime() % this.duration();\n        },\n\n        onEnd(action: () => void) {\n            return onEndEvents.add(action);\n        },\n\n        then(action: () => void) {\n            return this.onEnd(action);\n        },\n\n        connect(node?: AudioNode) {\n            gainNode.disconnect();\n            gainNode.connect(node ?? _k.audio.masterNode);\n        },\n    };\n}\n", "import { _k } from \"../shared\";\nimport { type AudioPlay, type AudioPlayOpt, play } from \"./play\";\n\n// core KAPLAY logic\nexport function burp(opt?: AudioPlayOpt): AudioPlay {\n    if (!_k.game.defaultAssets.burp) {\n        throw new Error(\"You can't use burp in kaplay/mini\");\n    }\n\n    return play(_k.game.defaultAssets.burp, opt);\n}\n", "import { _k } from \"../shared\";\nimport { deprecateMsg } from \"../utils/log\";\nexport function setVolume(v: number) {\n    _k.audio.masterNode.gain.value = v;\n}\n\nexport function getVolume() {\n    return _k.audio.masterNode.gain.value;\n}\n\n// get / set master volume\nexport function volume(v?: number): number {\n    deprecateMsg(\"volume\", \"setVolume / getVolume\");\n\n    if (v !== undefined) {\n        setVolume(v);\n    }\n    return getVolume();\n}\n", "import { SoundData } from \"../assets/sound\";\nimport { play } from \"../audio/play\";\nimport { _k } from \"../shared\";\nimport { downloadBlob } from \"../utils/dataURL\";\n\n/**\n * Screen recording control handle.\n *\n * @group Data\n */\nexport interface Recording {\n    /**\n     * Pause the recording.\n     */\n    pause(): void;\n    /**\n     * Resume the recording.\n     */\n    resume(): void;\n    /**\n     * Stop the recording and get the video data as a Blob. This\n     * finalizes the recording, so trying to do anything else with it\n     * later will throw an error.\n     *\n     * @since v3000.0\n     */\n    stop(): Promise<Blob>;\n    /**\n     * Stop the recording and downloads the file. Like `stop()`, this finalizes\n     * the recording, and trying to do anything else with it later will throw\n     * an error.\n     *\n     * @param filename - The suggested file name to initially present to the player\n     * (they can always change it in their browser's save dialog). If none is specified\n     * the format is 'kaplay-{current date and time}.{file extension}'.\n     */\n    download(filename?: string): void;\n    /**\n     * The currently used MIME type that was selected when the recording was\n     * started.\n     */\n    readonly mimeType: string;\n    /**\n     * The recommended file extension for the output file, minus the dot. For\n     * MP4 this will be `\"mp4\"`, for WEBM, `\"webm\"`, etc.\n     *\n     * This value is calculated using the MIME type and so it might be wrong.\n     * For example if you're in Safari and manage to get a recording started using\n     * the `video/quicktime` format, this property will report `\"quicktime\"`, even\n     * though the correct file extension is `.mov`.\n     */\n    readonly fileExt: string;\n}\n\n// https://stackoverflow.com/a/57168358/23626926\n\nconst a = new AudioBuffer({ length: 1, sampleRate: 44100 });\na.getChannelData(0).set([.01], 0);\nconst dummy = new SoundData(a);\n\nexport const record = (frameRate?: number, mimeTypes?: string[]): Recording => {\n    if (_k.debug.curRecording !== null) {\n        throw new Error(\"Recording is already in progress.\");\n    }\n\n    const options: MediaRecorderOptions = {};\n\n    if (mimeTypes !== undefined) {\n        const mimeType = mimeTypes.find(mime =>\n            MediaRecorder.isTypeSupported(mime)\n        );\n\n        if (mimeType === undefined) {\n            throw new Error(\n                `None of the provided MIME types (${\n                    mimeTypes.join(\", \")\n                }) are supported for recording${\n                    mimeTypes.some(mime => /^video\\//.test(mime))\n                        ? \"\"\n                        : \" (hint: it must look like 'video/xxx')\"\n                }.`,\n            );\n        }\n\n        options.mimeType = mimeType;\n    }\n\n    const audioDest = _k.audio.ctx.createMediaStreamDestination();\n\n    _k.audio.masterNode.connect(audioDest);\n\n    const audioStream = audioDest.stream;\n    const [firstAudioTrack] = audioStream.getAudioTracks();\n    const canvasStream = _k.app.canvas.captureStream(frameRate);\n    const [firstCanvasTrack] = canvasStream.getVideoTracks();\n\n    const recorder = new MediaRecorder(\n        new MediaStream([firstAudioTrack, firstCanvasTrack]),\n        options,\n    );\n\n    // dummy to make audio work\n    play(dummy);\n\n    const chunks: any[] = [];\n\n    const defaultExt = /\\/(.+?)(;|$)/.exec(recorder.mimeType)![1]!;\n    recorder.ondataavailable = (e) => {\n        if (e.data.size > 0) {\n            chunks.push(e.data);\n        }\n    };\n\n    recorder.onerror = () => {\n        _k.audio.masterNode.disconnect(audioDest);\n        canvasStream.getTracks().forEach(t => t.stop());\n    };\n\n    recorder.start();\n\n    var finalized = false;\n\n    const checkFinalized = () => {\n        if (finalized) {\n            throw new Error(\n                \"Recording has been finalized, you must start a new recording\",\n            );\n        }\n    };\n\n    const rec: Recording = {\n        resume() {\n            checkFinalized();\n            recorder.resume();\n        },\n\n        pause() {\n            checkFinalized();\n            recorder.pause();\n        },\n\n        stop(): Promise<Blob> {\n            checkFinalized();\n            finalized = true;\n            _k.debug.curRecording = null;\n            recorder.stop();\n            // cleanup\n            _k.audio.masterNode.disconnect(audioDest);\n            canvasStream.getTracks().forEach(t => t.stop());\n            return new Promise((resolve) => {\n                recorder.onstop = () => {\n                    resolve(\n                        new Blob(chunks, {\n                            type: recorder.mimeType,\n                        }),\n                    );\n                };\n            });\n        },\n\n        get mimeType() {\n            return recorder.mimeType;\n        },\n\n        get fileExt() {\n            return defaultExt;\n        },\n\n        download(\n            filename = `kaplay-${new Date().toISOString()}.${defaultExt}`,\n        ) {\n            this.stop().then((blob) => downloadBlob(filename, blob));\n        },\n    };\n\n    _k.debug.curRecording = rec;\n\n    return rec;\n};\n", "import { BlendMode, type Comp } from \"../../../types\";\n\n/**\n * The serialized {@link blend `blend()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedBlendComp {\n    blend: BlendMode;\n}\n\n/**\n * The {@link blend `blend()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface BlendComp extends Comp {\n    blend: BlendMode;\n    serialize(): SerializedBlendComp;\n}\n\nexport function blend(blend: BlendMode): BlendComp {\n    return {\n        id: \"blend\",\n        blend: blend ?? BlendMode.Normal,\n        inspect() {\n            return `blend: ${\n                this.blend == BlendMode.Normal\n                    ? \"normal\"\n                    : this.blend == BlendMode.Add\n                    ? \"add\"\n                    : this.blend == BlendMode.Multiply\n                    ? \"multiply\"\n                    : \"screen\"\n            }`;\n        },\n        serialize() {\n            return { blend: this.blend };\n        },\n    };\n}\n\nexport function blendFactory(data: SerializedBlendComp) {\n    return blend(data.blend);\n}\n", "import type { Color } from \"../../math/color\";\nimport { getArcPts } from \"../../math/various\";\nimport { Vec2 } from \"../../math/Vec2\";\nimport type { Anchor, RenderProps } from \"../../types\";\nimport { anchorPt } from \"../anchor\";\nimport { drawPolygon } from \"./drawPolygon\";\n\n/**\n * How the ellipse should look like.\n *\n * @group Draw\n * @subgroup Types\n */\nexport type DrawEllipseOpt = RenderProps & {\n    /**\n     * The horizontal radius.\n     */\n    radiusX: number;\n    /**\n     * The vertical radius.\n     */\n    radiusY: number;\n    /**\n     * Starting angle.\n     */\n    start?: number;\n    /**\n     * Ending angle.\n     */\n    end?: number;\n    /**\n     * If fill the shape with color (set this to false if you only want an outline).\n     */\n    fill?: boolean;\n    /**\n     * Use gradient instead of solid color.\n     *\n     * @since v3000.0\n     */\n    gradient?: [Color, Color];\n    /**\n     * Multiplier for circle vertices resolution (default 1)\n     */\n    resolution?: number;\n    /**\n     * The anchor point, or the pivot point. Default to \"topleft\".\n     */\n    anchor?: Anchor | Vec2;\n};\n\nexport function drawEllipse(opt: DrawEllipseOpt) {\n    if (opt.radiusX === undefined || opt.radiusY === undefined) {\n        throw new Error(\n            \"drawEllipse() requires properties \\\"radiusX\\\" and \\\"radiusY\\\".\",\n        );\n    }\n\n    if (opt.radiusX === 0 || opt.radiusY === 0) {\n        return;\n    }\n\n    const start = opt.start ?? 0;\n    const end = opt.end ?? 360;\n    const offset = anchorPt(opt.anchor ?? \"center\").scale(\n        new Vec2(-opt.radiusX, -opt.radiusY),\n    );\n\n    const pts = getArcPts(\n        offset,\n        opt.radiusX,\n        opt.radiusY,\n        start,\n        end,\n        opt.resolution,\n    );\n\n    // center\n    pts.unshift(offset);\n\n    const polyOpt = Object.assign({}, opt, {\n        pts,\n        radius: 0,\n        ...(opt.gradient\n            ? {\n                colors: [\n                    opt.gradient[0],\n                    ...Array(pts.length - 1).fill(opt.gradient[1]),\n                ],\n            }\n            : {}),\n    });\n\n    // full circle with outline shouldn't have the center point\n    if (end - start >= 360 && opt.outline) {\n        if (opt.fill !== false) {\n            drawPolygon(Object.assign({}, polyOpt, {\n                outline: null,\n            }));\n        }\n        drawPolygon(Object.assign({}, polyOpt, {\n            pts: pts.slice(1),\n            fill: false,\n        }));\n        return;\n    }\n\n    drawPolygon(polyOpt);\n}\n", "import type { Color } from \"../../math/color\";\nimport type { Vec2 } from \"../../math/Vec2\";\nimport type { Anchor, RenderProps } from \"../../types\";\nimport { drawEllipse } from \"./drawEllipse\";\n\n/**\n * How the circle should look like.\n * @group Draw\n * @subgroup Types\n */\nexport type DrawCircleOpt = Omit<RenderProps, \"angle\"> & {\n    /**\n     * Radius of the circle.\n     */\n    radius: number;\n    /**\n     * Starting angle.\n     */\n    start?: number;\n    /**\n     * Ending angle.\n     */\n    end?: number;\n    /**\n     * If fill the shape with color (set this to false if you only want an outline).\n     */\n    fill?: boolean;\n    /**\n     * Use gradient instead of solid color.\n     *\n     * @since v3000.0\n     */\n    gradient?: [Color, Color];\n    /**\n     * Multiplier for circle vertices resolution (default 1)\n     */\n    resolution?: number;\n    /**\n     * The anchor point, or the pivot point. Default to \"topleft\".\n     */\n    anchor?: Anchor | Vec2;\n};\n\nexport function drawCircle(opt: DrawCircleOpt) {\n    if (typeof opt.radius !== \"number\") {\n        throw new Error(\"drawCircle() requires property \\\"radius\\\".\");\n    }\n\n    if (opt.radius === 0) {\n        return;\n    }\n\n    drawEllipse(Object.assign({}, opt, {\n        radiusX: opt.radius,\n        radiusY: opt.radius,\n        angle: 0,\n    }));\n}\n", "import { getRenderProps } from \"../../../game/utils\";\nimport { drawCircle } from \"../../../gfx/draw/drawCircle\";\nimport { Circle, Rect } from \"../../../math/math\";\nimport { Vec2 } from \"../../../math/Vec2\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { AnchorComp } from \"../transform/anchor\";\nimport type { outline } from \"./outline\";\n\n/**\n * The serialized {@link circle `circle()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedCircleComp {\n    radius: number;\n    fill?: boolean;\n}\n\n/**\n * The {@link circle `circle()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface CircleComp extends Comp {\n    draw: Comp[\"draw\"];\n    /** Radius of circle. */\n    radius: number;\n    /**\n     * Render area of the circle.\n     *\n     * @since v3000.0\n     */\n    renderArea(): Circle;\n    serialize(): SerializedCircleComp;\n}\n\n/**\n * Options for the {@link circle `circle()``} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface CircleCompOpt {\n    /**\n     * If fill the circle (useful if you only want to render outline with\n     * {@link outline `outline()`} component).\n     */\n    fill?: boolean;\n}\n\nexport function circle(radius: number, opt: CircleCompOpt = {}): CircleComp {\n    let _shape: Circle | undefined;\n    let _radius = radius;\n    return {\n        id: \"circle\",\n        get radius() {\n            return _radius;\n        },\n        set radius(value: number) {\n            _radius = value;\n            if (_shape) _shape.radius = value;\n        },\n        draw(this: GameObj<CircleComp>) {\n            drawCircle(Object.assign(getRenderProps(this), {\n                radius: _radius,\n                fill: opt.fill,\n            }));\n        },\n        renderArea(this: GameObj<AnchorComp | CircleComp>) {\n            if (!_shape) {\n                _shape = new Circle(\n                    new Vec2(0),\n                    _radius,\n                );\n            }\n            return _shape;\n        },\n        inspect() {\n            return `radius: ${Math.ceil(_radius)}`;\n        },\n        serialize() {\n            const data: SerializedCircleComp = { radius: _radius };\n            if (opt.fill) data.fill = true;\n            return data;\n        },\n    };\n}\n\nexport function circleFactory(data: SerializedCircleComp) {\n    const opt: CircleCompOpt = {};\n    if (data.fill) opt.fill = data.fill;\n    return circle(\n        data.radius,\n        opt,\n    );\n}\n", "import type { Picture } from \"../../../gfx/draw/drawPicture\";\nimport type { FrameBuffer } from \"../../../gfx/FrameBuffer\";\nimport type { Comp, GameObj } from \"../../../types\";\n\n/**\n * Options for the {@link drawon `drawon()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport type DrawonCompOpt = {\n    childrenOnly?: boolean;\n    refreshOnly?: boolean;\n};\n\n/**\n * The {@link drawon `drawon()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface DrawonComp extends Comp {\n    refresh(): void;\n}\n\nexport function drawon(c: FrameBuffer | Picture, opt?: DrawonCompOpt) {\n    return {\n        add(this: GameObj) {\n            this.target = {\n                destination: c,\n                childrenOnly: opt?.childrenOnly,\n                refreshOnly: opt?.refreshOnly,\n            };\n        },\n        refresh(this: GameObj<DrawonComp>) {\n            if (this.target) {\n                this.target.isFresh = false;\n            }\n        },\n    };\n}\n", "import { getRenderProps } from \"../../../game/utils\";\nimport { drawEllipse } from \"../../../gfx/draw/drawEllipse\";\nimport { Ellipse } from \"../../../math/math\";\nimport { Vec2 } from \"../../../math/Vec2\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { AnchorComp } from \"../transform/anchor\";\nimport type { outline } from \"./outline\";\n\n/**\n * The serialized {@link ellipse `ellipse()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedEllipseComp {\n    radiusX: number;\n    radiusY: number;\n    fill?: boolean;\n}\n\n/**\n * The {@link ellipse `ellipse()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface EllipseComp extends Comp {\n    draw: Comp[\"draw\"];\n    /** Semi-major axis of ellipse. */\n    radiusX: number;\n    /** Semi-minor axis of ellipse. */\n    radiusY: number;\n    /**\n     * Render area of the ellipse.\n     */\n    renderArea(): Ellipse;\n    serialize(): SerializedEllipseComp;\n}\n\n/**\n * Options for the {@link ellipse `ellipse()``} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface EllipseCompOpt {\n    /**\n     * If fill is false, the ellipse is not filled (useful if you only want to render outline with\n     * {@link outline `outline()`} component).\n     */\n    fill?: boolean;\n}\n\nexport function ellipse(\n    radiusX: number,\n    radiusY: number,\n    opt: EllipseCompOpt = {},\n): EllipseComp {\n    let _shape: Ellipse | undefined;\n    let _radiusX = radiusX;\n    let _radiusY = radiusY;\n    return {\n        id: \"ellipse\",\n        get radiusX() {\n            return _radiusX;\n        },\n        set radiusX(value: number) {\n            _radiusX = value;\n            if (_shape) _shape.radiusX = value;\n        },\n        get radiusY() {\n            return _radiusY;\n        },\n        set radiusY(value: number) {\n            _radiusY = value;\n            if (_shape) _shape.radiusY = value;\n        },\n        draw(this: GameObj<EllipseComp>) {\n            drawEllipse(Object.assign(getRenderProps(this), {\n                radiusX: this.radiusX,\n                radiusY: this.radiusY,\n                fill: opt.fill,\n            }));\n        },\n        renderArea(this: GameObj<AnchorComp | EllipseComp>) {\n            if (!_shape) {\n                return new Ellipse(\n                    new Vec2(0),\n                    _radiusX,\n                    _radiusY,\n                );\n            }\n            return _shape;\n        },\n        inspect() {\n            return `radiusX: ${Math.ceil(_radiusX)} radiusY: ${\n                Math.ceil(_radiusY)\n            }`;\n        },\n        serialize() {\n            return {\n                radiusX: this.radiusX,\n                radiusY: this.radiusY,\n                fill: opt.fill,\n            };\n        },\n    };\n}\n\nexport function ellipseFactory(data: SerializedEllipseComp) {\n    const opt: EllipseCompOpt = {};\n\n    if (data.fill) opt.fill = data.fill;\n\n    return ellipse(data.radiusX, data.radiusY, opt);\n}\n", "import { map } from \"../../../math/math\";\nimport { _k } from \"../../../shared\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { OpacityComp } from \"./opacity\";\n\nexport function fadeIn(time: number = 1): Comp {\n    let finalOpacity: number;\n    let t = 0;\n    let done = false;\n\n    return {\n        require: [\"opacity\"],\n        add(this: GameObj<OpacityComp>) {\n            finalOpacity = this.opacity;\n            this.opacity = 0;\n        },\n        update(this: GameObj<OpacityComp>) {\n            if (done) return;\n            t += _k.app.dt();\n            this.opacity = map(t, 0, time, 0, finalOpacity);\n\n            if (t >= time) {\n                this.opacity = finalOpacity;\n                done = true;\n            }\n        },\n    };\n}\n", "import type { Comp, Mask } from \"../../../types\";\n\n/**\n * The serialized {@link mask `mask()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedMaskComp {\n    mask: Mask;\n}\n\n/**\n * The {@link mask `mask()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface MaskComp extends Comp {\n    mask: Mask;\n    serialize(): SerializedMaskComp;\n}\n\nexport function mask(m: Mask = \"intersect\"): MaskComp {\n    return {\n        id: \"mask\",\n        mask: m,\n        serialize() {\n            return { mask: this.mask };\n        },\n    };\n}\n\nexport function maskFactory(data: SerializedMaskComp) {\n    return mask(data.mask);\n}\n", "import type { LineCap, LineJoin } from \"../../../gfx/draw/drawLine\";\nimport { Color, rgb, type SerializedColor } from \"../../../math/color\";\nimport type { Comp, Outline } from \"../../../types\";\n\n/**\n * The serialized {@link outline `outline()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedOutlineComp {\n    outline: {\n        width: number;\n        color: SerializedColor;\n        opacity: number;\n        join: LineJoin;\n        miterLimit: number;\n        cap: LineCap;\n    };\n}\n\n/**\n * The {@link outline `outline()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface OutlineComp extends Comp {\n    outline: Outline;\n    serialize(): SerializedOutlineComp;\n}\n\nexport function outline(\n    width: number = 1,\n    color: Color = rgb(0, 0, 0),\n    opacity: number = 1,\n    join: LineJoin = \"miter\",\n    miterLimit: number = 10,\n    cap: LineCap = \"butt\",\n): OutlineComp {\n    return {\n        id: \"outline\",\n        outline: {\n            width,\n            color,\n            opacity,\n            join,\n            miterLimit,\n            cap,\n        },\n        inspect() {\n            return `outline: ${this.outline.width}px, ${this.outline.color}`;\n        },\n        serialize() {\n            return {\n                outline: {\n                    width: this.outline.width ?? 1,\n                    color: {\n                        r: this.outline.color?.r ?? 255,\n                        g: this.outline.color?.g ?? 255,\n                        b: this.outline.color?.b ?? 255,\n                    },\n                    opacity: this.outline.opacity ?? 1,\n                    join: this.outline.join ?? \"miter\",\n                    miterLimit: this.outline.miterLimit ?? 10,\n                    cap: this.outline.cap ?? \"butt\",\n                },\n            };\n        },\n    };\n}\n\nexport function outlineFactory(data: SerializedOutlineComp) {\n    return outline(\n        data.outline.width,\n        Color.deserialize(data.outline.color),\n        data.outline.opacity,\n        data.outline.join,\n        data.outline.miterLimit,\n        data.outline.cap,\n    );\n}\n", "import { KEvent } from \"../../../events/events\";\nimport { drawRaw } from \"../../../gfx/draw/drawRaw\";\nimport type { Texture } from \"../../../gfx/gfx\";\nimport { Color } from \"../../../math/color\";\nimport { lerp } from \"../../../math/lerp\";\nimport {\n    deg2rad,\n    map,\n    Quad,\n    rand,\n    type ShapeType,\n    vec2,\n} from \"../../../math/math\";\nimport { Vec2 } from \"../../../math/Vec2\";\nimport { _k } from \"../../../shared\";\nimport type { Comp } from \"../../../types\";\n\n/**\n * A particle. Used on the {@link particles `particles()`} component.\n */\nclass Particle {\n    pos: Vec2 = vec2(0);\n    vel: Vec2 = vec2(0);\n    acc: Vec2 = vec2(0);\n    angle: number = 0;\n    angularVelocity: number = 0;\n    damping: number = 0;\n    t: number = 0;\n    lt: number | null = null;\n    gc: boolean = true;\n\n    constructor() {\n    }\n\n    get progress() {\n        return this.lt ? this.t / this.lt : this.t;\n    }\n}\n\n/**\n * Options for the {@link particles `particles()`}'s component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport type EmitterOpt = {\n    /**\n     * Shape of the emitter. If given, particles spawn within this shape.\n     */\n    shape?: ShapeType;\n    /**\n     * Lifetime of the emitter.\n     */\n    lifetime?: number;\n    /**\n     * Rate of emission in particles per second if the emitter should emit out of itself.\n     */\n    rate?: number;\n    /**\n     * Position (relative) of emission.\n     */\n    position: Vec2;\n    /**\n     * Direction of emission.\n     */\n    direction: number;\n    /**\n     * Spread (cone) of emission around the direction.\n     */\n    spread: number;\n};\n\n/**\n * Options for the {@link particles `particles()`}'s component\n *\n * @group Components\n * @subgroup Component Types\n */\nexport type ParticlesOpt = {\n    /**\n     * Maximum number of simultaneously rendered particles.\n     */\n    max: number;\n    /**\n     * Minimum and maximum lifetime of a particle in seconds.\n     */\n    lifeTime?: [number, number];\n    /**\n     * Minimum and maximum speed of a particle in pixels per second.\n     */\n    speed?: [number, number];\n    /**\n     * Minimum and maximum acceleration of a particle in pixels per second^2.\n     */\n    acceleration?: [Vec2, Vec2];\n    /**\n     * Minimum and maximum damping of a particle.\n     */\n    damping?: [number, number];\n    /**\n     * Minimum and maximum start angle of a particle.\n     */\n    angle?: [number, number];\n    /**\n     * Minimum and maximum angular velocity of a particle.\n     */\n    angularVelocity?: [number, number];\n    /**\n     * Scale from start to end for a particle.\n     */\n    scales?: number[];\n    /**\n     * Colors from start to end for a particle.\n     */\n    colors?: Color[];\n    /**\n     * Opacity from start to end for a particle.\n     */\n    opacities?: number[];\n    /**\n     * Quads from start to end for a particle.\n     */\n    quads?: Quad[];\n    /**\n     * Texture used for the particle.\n     */\n    texture: Texture;\n};\n\n/**\n * The {@link particles `particles()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface ParticlesComp extends Comp {\n    emitter: {\n        /**\n         * Relative position of the emitter\n         */\n        position: Vec2;\n        /**\n         * Relative direction of the emitter\n         */\n        direction: number;\n    };\n    /**\n     * Emit a number of particles\n     */\n    emit(n: number): void;\n    /**\n     * Called when the emitter expires\n     */\n    onEnd(cb: () => void): void;\n}\n\nexport function particles(popt: ParticlesOpt, eopt: EmitterOpt): ParticlesComp {\n    let emitterLifetime = eopt.lifetime;\n\n    const particles: Particle[] = new Array<Particle>(popt.max);\n    const colors = popt.colors || [Color.WHITE];\n    const opacities = popt.opacities || [1];\n    const quads = popt.quads || [new Quad(0, 0, 1, 1)];\n    const scales = popt.scales || [1];\n    const lifetime = popt.lifeTime;\n    const spread = eopt.spread || 0;\n    const speed = popt.speed || [0, 0];\n    const angleRange = popt.angle || [0, 0];\n    const angularVelocityRange = popt.angularVelocity || [0, 0];\n    const accelerationRange = popt.acceleration || [vec2(0), vec2(0)];\n    const dampingRange = popt.damping || [0, 0];\n\n    const indices: number[] = new Array<number>(popt.max * 6);\n    const attributes = {\n        pos: new Array<number>(popt.max * 4 * 2),\n        uv: new Array<number>(popt.max * 4 * 2),\n        color: new Array<number>(popt.max * 4 * 3),\n        opacity: new Array<number>(popt.max * 4),\n    };\n    let count = 0;\n    let time = 0;\n\n    for (let i = 0; i < popt.max; i++) {\n        indices[i * 6 + 0] = i * 4 + 0;\n        indices[i * 6 + 1] = i * 4 + 1;\n        indices[i * 6 + 2] = i * 4 + 3;\n        indices[i * 6 + 3] = i * 4 + 1;\n        indices[i * 6 + 4] = i * 4 + 2;\n        indices[i * 6 + 5] = i * 4 + 3;\n\n        attributes.pos.fill(0);\n        attributes.uv.fill(0);\n        attributes.color.fill(255);\n        attributes.opacity.fill(1);\n\n        particles[i] = new Particle();\n    }\n\n    const onEndEvents = new KEvent();\n\n    function nextFree(index: number = 0): number | null {\n        while (index < popt.max) {\n            if (particles[index].gc) {\n                return index;\n            }\n            index++;\n        }\n        return null;\n    }\n\n    return {\n        id: \"particles\",\n        emitter: {\n            position: eopt.position || vec2(),\n            direction: eopt.direction || 0,\n        },\n        emit(n: number) {\n            n = Math.min(n, popt.max - count);\n            let index: number | null = 0;\n            for (let i = 0; i < n; i++) {\n                index = nextFree(index);\n                if (index == null) return;\n\n                const velocityAngle = rand(\n                    this.emitter.direction - spread,\n                    this.emitter.direction + spread,\n                );\n                const vel = Vec2.fromAngle(velocityAngle).scale(\n                    rand(speed[0], speed[1]),\n                );\n                const angle = rand(angleRange[0], angleRange[1]);\n                const angularVelocity = rand(\n                    angularVelocityRange[0],\n                    angularVelocityRange[1],\n                );\n                const acceleration = vec2(\n                    rand(accelerationRange[0].x, accelerationRange[1].x),\n                    rand(accelerationRange[0].y, accelerationRange[1].y),\n                );\n                const damping = rand(\n                    dampingRange[0],\n                    dampingRange[1],\n                );\n                const lt = lifetime ? rand(lifetime[0], lifetime[1]) : null;\n                const pos = this.emitter.position.add(\n                    eopt.shape\n                        ? eopt.shape.random()\n                        : vec2(),\n                );\n\n                const p = particles[index];\n                p.t = 0;\n                p.lt = lt;\n                p.pos = pos;\n                p.vel = vel;\n                p.acc = acceleration;\n                p.angle = angle;\n                p.angularVelocity = angularVelocity;\n                p.damping = damping;\n                p.gc = false;\n            }\n            count += n;\n        },\n        update() {\n            if (emitterLifetime !== undefined && emitterLifetime <= 0) {\n                return;\n            }\n\n            const DT = _k.app.dt();\n            // Update all particles\n            for (let i = 0; i < particles.length; i++) {\n                const p = particles[i];\n                if (p.gc) {\n                    continue;\n                }\n                p.t += DT;\n                if (p.lt !== null && p.t >= p.lt) {\n                    p.gc = true;\n                    count--;\n                    continue;\n                }\n                p.vel = p.vel.add(p.acc.scale(DT)).scale(1 - p.damping * DT);\n                p.pos = p.pos.add(p.vel.scale(DT));\n                p.angle += p.angularVelocity * DT;\n            }\n            // Check if the emitter has a limited lifetime\n            if (emitterLifetime !== undefined) {\n                emitterLifetime -= DT;\n                if (emitterLifetime <= 0) {\n                    onEndEvents.trigger();\n                }\n            }\n            // Create new particles according to accumulated time\n            time += DT;\n            while (\n                count < popt.max && eopt.rate\n                && time > 1 / eopt.rate\n            ) {\n                this.emit(1);\n                time -= 1 / eopt.rate;\n            }\n        },\n        draw() {\n            if (\n                (emitterLifetime !== undefined && emitterLifetime <= 0)\n                || count == 0\n            ) {\n                return;\n            }\n\n            // Draw active particles\n            for (let i = 0; i < particles.length; i++) {\n                const p = particles[i];\n                if (p.gc) {\n                    attributes.opacity[i * 4] = 0;\n                    attributes.opacity[i * 4 + 1] = 0;\n                    attributes.opacity[i * 4 + 2] = 0;\n                    attributes.opacity[i * 4 + 3] = 0;\n                    continue;\n                }\n                const progress = p.progress;\n                const colorIndex = Math.floor(progress * colors.length);\n                const color = colorIndex < colors.length - 1\n                    ? lerp(\n                        colors[colorIndex],\n                        colors[colorIndex + 1],\n                        map(\n                            progress,\n                            colorIndex / colors.length,\n                            (colorIndex + 1) / colors.length,\n                            0,\n                            1,\n                        ),\n                    )\n                    : colors[colorIndex];\n                const opacityIndex = Math.floor(progress * opacities.length);\n                const opacity = opacityIndex < opacities.length - 1\n                    ? lerp(\n                        opacities[opacityIndex],\n                        opacities[opacityIndex + 1],\n                        map(\n                            progress,\n                            opacityIndex / opacities.length,\n                            (opacityIndex + 1) / opacities.length,\n                            0,\n                            1,\n                        ),\n                    )\n                    : opacities[opacityIndex];\n\n                const quadIndex = Math.floor(progress * quads.length);\n                const quad = quads[quadIndex];\n                const scaleIndex = Math.floor(progress * scales.length);\n                const scale = scales[scaleIndex];\n                // TODO: lerp scale\n                const angle = deg2rad(p.angle);\n                const c = Math.cos(angle);\n                const s = Math.sin(angle);\n\n                const hw = popt.texture.width * quad.w / 2;\n                const hh = popt.texture.height * quad.h / 2;\n\n                let j = i * 4;\n                // Left top\n                attributes.pos[j * 2] = p.pos.x + (-hw) * scale * c\n                    - (-hh) * scale * s;\n                attributes.pos[j * 2 + 1] = p.pos.y + (-hw) * scale * s\n                    + (-hh) * scale * c;\n                attributes.uv[j * 2] = quad.x;\n                attributes.uv[j * 2 + 1] = quad.y;\n                attributes.color[j * 3] = color.r;\n                attributes.color[j * 3 + 1] = color.g;\n                attributes.color[j * 3 + 2] = color.b;\n                attributes.opacity[j] = opacity;\n                // Right top\n                j++;\n                attributes.pos[j * 2] = p.pos.x + hw * scale * c\n                    - (-hh) * scale * s;\n                attributes.pos[j * 2 + 1] = p.pos.y + hw * scale * s\n                    + (-hh) * scale * c;\n                attributes.uv[j * 2] = quad.x + quad.w;\n                attributes.uv[j * 2 + 1] = quad.y;\n                attributes.color[j * 3] = color.r;\n                attributes.color[j * 3 + 1] = color.g;\n                attributes.color[j * 3 + 2] = color.b;\n                attributes.opacity[j] = opacity;\n                // Right bottom\n                j++;\n                attributes.pos[j * 2] = p.pos.x + hw * scale * c\n                    - hh * scale * s;\n                attributes.pos[j * 2 + 1] = p.pos.y + hw * scale * s\n                    + hh * scale * c;\n                attributes.uv[j * 2] = quad.x + quad.w;\n                attributes.uv[j * 2 + 1] = quad.y + quad.h;\n                attributes.color[j * 3] = color.r;\n                attributes.color[j * 3 + 1] = color.g;\n                attributes.color[j * 3 + 2] = color.b;\n                attributes.opacity[j] = opacity;\n                // Left bottom\n                j++;\n                attributes.pos[j * 2] = p.pos.x + (-hw) * scale * c\n                    - hh * scale * s;\n                attributes.pos[j * 2 + 1] = p.pos.y + (-hw) * scale * s\n                    + hh * scale * c;\n                attributes.uv[j * 2] = quad.x;\n                attributes.uv[j * 2 + 1] = quad.y + quad.h;\n                attributes.color[j * 3] = color.r;\n                attributes.color[j * 3 + 1] = color.g;\n                attributes.color[j * 3 + 2] = color.b;\n                attributes.opacity[j] = opacity;\n            }\n\n            drawRaw(\n                attributes,\n                indices,\n                (this as any).fixed,\n                popt.texture,\n                (this as any).shader,\n                (this as any).uniform,\n            );\n        },\n        onEnd(action: () => void) {\n            return onEndEvents.add(action);\n        },\n        inspect() {\n            return `count: ${count}/${popt.max}`;\n        },\n    };\n}\n", "import type { Shader, Uniform } from \"../../assets/shader\";\nimport { IDENTITY_MATRIX } from \"../../constants/math\";\nimport { getCamTransform } from \"../../game/camera\";\nimport { _k } from \"../../shared\";\nimport type { BlendMode, RenderProps } from \"../../types\";\nimport { Mesh, type Texture } from \"../gfx\";\nimport { height, width } from \"../stack\";\n\n/**\n * @group Draw\n * @subgroup Picture\n */\nexport type Material = {\n    tex?: Texture;\n    shader?: Shader;\n    uniform?: Uniform;\n    blend?: BlendMode;\n};\n\n/**\n * @group Draw\n * @subgroup Picture\n */\nexport type PictureCommand = {\n    material: Material;\n    index: number;\n    count: number;\n};\n\n/**\n * A picture holding drawing data\n *\n * @group Draw\n * @subgroup Picture\n */\nexport class Picture {\n    vertices: number[];\n    indices: number[];\n    commands: PictureCommand[];\n    mesh?: Mesh;\n\n    /**\n     * Creates an empty picture if no data is given, otherwise deserializes the data\n     * @param data - Optional archived picture data\n     */\n    constructor(data?: string) {\n        this.vertices = [];\n        this.indices = [];\n        this.commands = [];\n\n        if (data) {\n            // TODO: deserialize\n        }\n    }\n\n    /**\n     * Serializes this picture to a JSON string\n     * @returns a string containing JSON picture data\n     */\n    archive(): string {\n        return JSON.stringify({\n            vertices: this.vertices,\n            indices: this.indices,\n            commands: this.commands.map(command => {\n                return {\n                    material: {\n                        tex: \"\", // TODO: Find a way to refer to a texture by name (main, font, single, etc)\n                        shader: \"\", // TODO: Find a way to refer to a shader by name command.material.shader.name\n                        uniform: command.material.uniform,\n                        blend: command.material.blend,\n                    },\n                    index: command.index,\n                    count: command.count,\n                };\n            }),\n        });\n    }\n\n    free() {\n        this.mesh?.free();\n    }\n}\n\n/**\n * Drawing options for drawPicture\n *\n * @group Draw\n * @subgroup Types\n */\nexport type DrawPictureOpt = RenderProps & {};\n\n/**\n * Draws a picture to the screen. This function can not be used to draw recursively to a picture.\n * @param picture - The picture to draw\n * @param opt - Drawing options\n */\nexport function drawPicture(\n    picture: Picture,\n    opt: DrawPictureOpt,\n) {\n    const w = width();\n    const h = height();\n    _k.gfx.renderer.flush(w, h);\n\n    // This is the transform we will apply\n    const transform = _k.gfx.transform.clone();\n    if (opt.pos) transform.translateSelfV(opt.pos);\n    if (opt.angle) transform.rotateSelf(opt.angle);\n    if (opt.scale) transform.scaleSelfV(opt.scale);\n    if (opt.skew) transform.skewSelfV(opt.skew);\n\n    const ctx = _k.gfx.renderer.ctx;\n    const gl = ctx.gl;\n\n    // This binds the vertex buffer\n    ctx.pushArrayBuffer(picture.mesh!.glVBuf);\n    // Once bound, we set the pointers, which are offsets relative to the pointer of the array buffer we just bound\n    const a_pos = gl.getAttribLocation(_k.gfx.defShader.glProgram, \"a_pos\");\n    gl.vertexAttribPointer(a_pos, 2, gl.FLOAT, false, 32, 0);\n    const a_uv = gl.getAttribLocation(_k.gfx.defShader.glProgram, \"a_uv\");\n    gl.vertexAttribPointer(a_uv, 2, gl.FLOAT, false, 32, 8);\n    const a_color = gl.getAttribLocation(_k.gfx.defShader.glProgram, \"a_color\");\n    gl.vertexAttribPointer(a_color, 4, gl.FLOAT, false, 32, 16);\n    // Bind the index buffer as well\n    ctx.pushElementArrayBuffer(picture.mesh!.glIBuf);\n\n    let lastShader: Shader | null = null;\n    let lastTexture: Texture | null = null;\n\n    // Execute all commands, basically drawing ranges using a given material\n    for (const command of picture.commands) {\n        const texture = command.material.tex ?? _k.gfx.defTex;\n        const shader = command.material.shader ?? _k.gfx.defShader;\n\n        if (command.material.blend) {\n            _k.gfx.renderer.setBlend(command.material.blend);\n        }\n\n        if (shader != lastShader) {\n            lastShader?.unbind();\n            shader.bind();\n            lastShader = shader;\n            shader.send({\n                width: w,\n                height: h,\n                camera: opt.fixed ? IDENTITY_MATRIX : getCamTransform(),\n                transform: transform,\n            });\n        }\n\n        if (command.material.uniform) {\n            shader?.send(command.material.uniform);\n        }\n\n        if (texture != lastTexture) {\n            lastTexture?.unbind();\n            texture?.bind();\n            lastTexture = texture;\n        }\n\n        // Do the actual draw\n        // TODO: put the mode into the command\n        gl.drawElements(\n            gl.TRIANGLES,\n            command.count,\n            gl.UNSIGNED_SHORT,\n            command.index * 2,\n        );\n    }\n\n    lastShader?.unbind();\n    lastTexture?.unbind();\n\n    // Pop these to balance the stack\n    ctx.popArrayBuffer();\n    ctx.popElementArrayBuffer();\n\n    // So, you would think that once you pop the vertex buffer, the vertex buffer of the renderer is bound again\n    // But that seems not to be happening, so we do it explicitly here\n    ctx.pushArrayBuffer(_k.gfx.renderer.glVBuf);\n    // We set the pointers to this vertex buffer again\n    gl.vertexAttribPointer(a_pos, 2, gl.FLOAT, false, 32, 0);\n    gl.vertexAttribPointer(a_uv, 2, gl.FLOAT, false, 32, 8);\n    gl.vertexAttribPointer(a_color, 4, gl.FLOAT, false, 32, 16);\n    // And pop the buffer to balance\n    ctx.popArrayBuffer();\n}\n\n/**\n * Selects the picture for drawing, erases existing data.\n * @param picture - The picture to write drawing data to.\n */\nexport function beginPicture(picture?: Picture) {\n    picture ??= new Picture();\n    picture.vertices.length = 0;\n    picture.indices.length = 0;\n    picture.commands.length = 0;\n    _k.gfx.renderer.picture = picture;\n}\n\n/**\n * Selects the picture for drawing, keeps existing data.\n * @param picture - The picture to write drawing data to.\n */\nexport function appendToPicture(picture?: Picture) {\n    picture ??= new Picture();\n    _k.gfx.renderer.picture = picture;\n}\n\n/**\n * Deselects the current picture for drawing, returning the picture.\n * @returns The picture which was previously selected.\n */\nexport function endPicture(): Picture {\n    const ctx = _k.gfx.renderer.ctx;\n    const gl = ctx.gl;\n\n    const picture = _k.gfx.renderer.picture;\n    if (!picture) {\n        throw new Error(\"Called endPicture when no picture was started\");\n    }\n    _k.gfx.renderer.picture = null;\n\n    picture.free();\n    picture.mesh = new Mesh(\n        ctx,\n        _k.gfx.renderer.vertexFormat,\n        picture.vertices,\n        picture.indices,\n    );\n\n    return picture;\n}\n", "import { getRenderProps } from \"../../../game/utils\";\nimport { drawPicture, type Picture } from \"../../../gfx/draw/drawPicture\";\nimport type { Comp, GameObj } from \"../../../types\";\n\n/**\n * The {@link picture `picture()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface PictureComp extends Comp {\n    picture: Picture;\n}\n\n/**\n * Options for the {@link picture `picture()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport type PictureCompOpt = {\n    picture: Picture;\n};\n\nexport function picture(picture: Picture): PictureComp {\n    return {\n        id: \"picture\",\n        picture: picture,\n        draw(this: GameObj<PictureComp>) {\n            drawPicture(this.picture, getRenderProps(this));\n        },\n    };\n}\n", "import { getRenderProps } from \"../../../game/utils\";\nimport {\n    drawPolygon,\n    type DrawPolygonOpt,\n} from \"../../../gfx/draw/drawPolygon\";\nimport type { Texture } from \"../../../gfx/gfx\";\nimport type { Color } from \"../../../math/color\";\nimport { Polygon } from \"../../../math/math\";\nimport { type Vec2 } from \"../../../math/Vec2\";\nimport type { Comp, GameObj } from \"../../../types\";\n\n/**\n * The {@link polygon `polygon()`} component.\n *\n * @since v3001.0\n * @group Components\n * @subgroup Component Types\n */\nexport interface PolygonComp extends Comp {\n    draw: Comp[\"draw\"];\n    /**\n     * Points in the polygon.\n     */\n    pts: Vec2[];\n    /**\n     * The radius of each corner.\n     */\n    radius?: number | number[];\n    /**\n     * The color of each vertex.\n     */\n    colors?: Color[];\n    /**\n     * The opacity of each vertex.\n     */\n    opacities?: number[];\n    /**\n     * The uv of each vertex.\n     *\n     * @since v3001.0\n     */\n    uv?: Vec2[];\n    /**\n     * The texture used when uv coordinates are present.\n     *\n     * @since v3001.0\n     */\n    tex?: Texture;\n    renderArea(): Polygon;\n}\n\n/**\n * Options for the {@link polygon `polygon()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport type PolygonCompOpt = Omit<DrawPolygonOpt, \"pts\">;\n\nexport function polygon(pts: Vec2[], opt: PolygonCompOpt = {}): PolygonComp {\n    if (pts.length < 3) {\n        throw new Error(\n            `Polygon's need more than two points, ${pts.length} points provided`,\n        );\n    }\n    return {\n        id: \"polygon\",\n        pts,\n        colors: opt.colors,\n        opacities: opt.opacities,\n        uv: opt.uv,\n        tex: opt.tex,\n        radius: opt.radius,\n        draw(this: GameObj<PolygonComp>) {\n            drawPolygon(Object.assign(getRenderProps(this), {\n                pts: this.pts,\n                colors: this.colors,\n                opacities: this.opacities,\n                uv: this.uv,\n                tex: this.tex,\n                radius: this.radius,\n                fill: opt.fill,\n                triangulate: opt.triangulate,\n            }));\n        },\n        renderArea(this: GameObj<PolygonComp>) {\n            return new Polygon(this.pts);\n        },\n        inspect() {\n            return `polygon: ${this.pts.map(p => `[${p.x},${p.y}]`).join(\",\")}`;\n        },\n    };\n}\n", "import type { RaycastResult } from \"../../../math/math\";\nimport type { Vec2 } from \"../../../math/Vec2\";\nimport { _k } from \"../../../shared\";\n\n// this is not a component lol\nexport function raycast(\n    origin: Vec2,\n    direction: Vec2,\n    exclude?: string[],\n) {\n    let minHit: RaycastResult;\n\n    const shapes = _k.game.root.get(\"area\");\n\n    shapes.forEach(s => {\n        if (exclude && exclude.some(tag => s.is(tag))) return;\n        const shape = s.worldArea();\n        const hit = shape.raycast(origin, direction);\n        if (hit) {\n            if (minHit) {\n                if (hit.fraction < minHit.fraction) {\n                    minHit = hit;\n                    minHit!.object = s;\n                }\n            }\n            else {\n                minHit = hit;\n                minHit!.object = s;\n            }\n        }\n    });\n\n    return minHit!;\n}\n", "import type { Uniform } from \"../../../assets/shader\";\nimport type { Comp } from \"../../../types\";\n\n/**\n * The serialized {@link shader `shader()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializeShaderComp {\n    shader: string;\n}\n\n/**\n * The {@link shader `shader()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface ShaderComp extends Comp {\n    /**\n     * Uniform values to pass to the shader.\n     */\n    uniform?: Uniform;\n    /**\n     * The shader ID.\n     */\n    shader: string;\n    serialize(): SerializeShaderComp;\n}\n\nexport function shader(\n    id: string,\n    uniform?: Uniform | (() => Uniform),\n): ShaderComp {\n    return {\n        id: \"shader\",\n        shader: id,\n        ...(typeof uniform === \"function\"\n            ? {\n                uniform: uniform(),\n                update() {\n                    this.uniform = uniform();\n                },\n            }\n            : {\n                uniform: uniform,\n            }),\n        inspect() {\n            return `shader: ${id}`;\n        },\n        serialize() {\n            return { shader: this.shader };\n        },\n    };\n}\n\nexport function shaderFactory(data: any) {\n    return shader(data.shader);\n}\n", "type Func = (...args: any[]) => any;\n\nexport function overload2<A extends Func, B extends Func>(\n    fn1: A,\n    fn2: B,\n): A & B {\n    return ((...args) => {\n        const al = args.length;\n        if (al === fn1.length) return fn1(...args);\n        if (al === fn2.length) return fn2(...args);\n    }) as A & B;\n}\n\nexport function overload3<\n    A extends Func,\n    B extends Func,\n    C extends Func,\n>(fn1: A, fn2: B, fn3: C): A & B & C {\n    return ((...args) => {\n        const al = args.length;\n        if (al === fn1.length) return fn1(...args);\n        if (al === fn2.length) return fn2(...args);\n        if (al === fn3.length) return fn3(...args);\n    }) as A & B & C;\n}\n\nexport function overload4<\n    A extends Func,\n    B extends Func,\n    C extends Func,\n    D extends Func,\n>(fn1: A, fn2: B, fn3: C, fn4: D): A & B & C & D {\n    return ((...args) => {\n        const al = args.length;\n        if (al === fn1.length) return fn1(...args);\n        if (al === fn2.length) return fn2(...args);\n        if (al === fn3.length) return fn3(...args);\n        if (al === fn4.length) return fn4(...args);\n    }) as A & B & C & D;\n}\n", "// add an event to a tag\n\nimport { type Asset, getFailedAssets } from \"../assets/asset\";\nimport type { Collision } from \"../ecs/systems/Collision\";\nimport { _k } from \"../shared\";\nimport type { GameObj, Tag } from \"../types\";\nimport { overload2 } from \"../utils/overload\";\nimport type { TupleWithoutFirst } from \"../utils/types\";\nimport type { GameObjEventNames, GameObjEvents } from \"./eventMap\";\nimport { KEventController } from \"./events\";\n\nexport function on<Ev extends GameObjEventNames>(\n    event: Ev,\n    tag: Tag,\n    cb: (obj: GameObj, ...args: TupleWithoutFirst<GameObjEvents[Ev]>) => void,\n): KEventController {\n    let paused = false;\n    let obj2Handler = new Map<GameObj, KEventController>();\n\n    const handleNew = (obj: GameObj) => {\n        const ec = obj.on(event, (...args) => {\n            cb(obj, ...<TupleWithoutFirst<GameObjEvents[Ev]>> args);\n        });\n        ec.paused = paused;\n        if (obj2Handler.has(obj)) obj2Handler.get(obj)!.cancel();\n        obj2Handler.set(obj, ec);\n    };\n\n    const ecOnTag = _k.game.events.on(\"tag\", (obj, newTag) => {\n        if (newTag === tag) handleNew(obj);\n    });\n    const ecOnUntag = _k.game.events.on(\"untag\", (obj, oldTag) => {\n        if (oldTag === tag) {\n            const ec = obj2Handler.get(obj)!;\n            ec.cancel();\n            obj2Handler.delete(obj);\n        }\n    });\n    _k.game.root.get(tag, { recursive: true }).forEach(handleNew);\n\n    return {\n        get paused() {\n            return paused;\n        },\n        set paused(p) {\n            paused = p;\n            obj2Handler.forEach(ec => ec.paused = p);\n        },\n        cancel() {\n            obj2Handler.forEach(ec => ec.cancel());\n            obj2Handler.clear();\n            ecOnTag.cancel();\n            ecOnUntag.cancel();\n        },\n    };\n}\n\nexport const trigger = (event: string, tag: string, ...args: any[]) => {\n    for (const obj of _k.game.root.children) {\n        if (obj.is(tag)) {\n            obj.trigger(event, args);\n        }\n    }\n};\n\nexport const onFixedUpdate = overload2(\n    (action: () => void): KEventController => {\n        const obj = _k.game.root.add([{ fixedUpdate: action }]);\n        return {\n            get paused() {\n                return obj.paused;\n            },\n            set paused(p) {\n                obj.paused = p;\n            },\n            cancel: () => obj.destroy(),\n        };\n    },\n    (tag: Tag, action: (obj: GameObj) => void) => {\n        return on(\"fixedUpdate\", tag, action);\n    },\n);\n\nexport const onUpdate = overload2((action: () => void): KEventController => {\n    const obj = _k.game.root.add([{ update: action }]);\n    return {\n        get paused() {\n            return obj.paused;\n        },\n        set paused(p) {\n            obj.paused = p;\n        },\n        cancel: () => obj.destroy(),\n    };\n}, (tag: Tag, action: (obj: GameObj) => void) => {\n    return on(\"update\", tag, action);\n});\n\nexport const onDraw = overload2((action: () => void): KEventController => {\n    const obj = _k.game.root.add([{ draw: action }]);\n    return {\n        get paused() {\n            return obj.hidden;\n        },\n        set paused(p) {\n            obj.hidden = p;\n        },\n        cancel: () => obj.destroy(),\n    };\n}, (tag: Tag, action: (obj: GameObj) => void) => {\n    return on(\"draw\", tag, action);\n});\n\nexport const onAdd = overload2((action: (obj: GameObj) => void) => {\n    return _k.game.events.on(\"add\", action);\n}, (tag: Tag, action: (obj: GameObj) => void) => {\n    return on(\"add\", tag, action);\n});\n\nexport const onDestroy = overload2((action: (obj: GameObj) => void) => {\n    return _k.game.events.on(\"destroy\", action);\n}, (tag: Tag, action: (obj: GameObj) => void) => {\n    return on(\"destroy\", tag, action);\n});\n\nexport const onUse = overload2((action: (obj: GameObj, id: string) => void) => {\n    return _k.game.events.on(\"use\", action);\n}, (tag: Tag, action: (obj: GameObj) => void) => {\n    return on(\"use\", tag, action);\n});\n\nexport const onUnuse = overload2(\n    (action: (obj: GameObj, id: string) => void) => {\n        return _k.game.events.on(\"unuse\", action);\n    },\n    (tag: Tag, action: (obj: GameObj) => void) => {\n        return on(\"unuse\", tag, action);\n    },\n);\n\nexport const onTag = overload2((action: (obj: GameObj, id: string) => void) => {\n    return _k.game.events.on(\"tag\", action);\n}, (tag: Tag, action: (obj: GameObj) => void) => {\n    return on(\"tag\", tag, action);\n});\n\nexport const onUntag = overload2(\n    (action: (obj: GameObj, id: string) => void) => {\n        return _k.game.events.on(\"untag\", action);\n    },\n    (tag: Tag, action: (obj: GameObj) => void) => {\n        return on(\"untag\", tag, action);\n    },\n);\n\n// add an event that runs with objs with t1 collides with objs with t2\nexport function onCollide(\n    t1: Tag,\n    t2: Tag,\n    f: (a: GameObj, b: GameObj, col?: Collision) => void,\n): KEventController {\n    return on(\"collide\", t1, (a, b, col) => b.is(t2) && f(a, b, col));\n}\n\nexport function onCollideUpdate(\n    t1: Tag,\n    t2: Tag,\n    f: (a: GameObj, b: GameObj, col?: Collision) => void,\n): KEventController {\n    return on(\"collideUpdate\", t1, (a, b, col) => b.is(t2) && f(a, b, col));\n}\n\nexport function onCollideEnd(\n    t1: Tag,\n    t2: Tag,\n    f: (a: GameObj, b: GameObj, col?: Collision) => void,\n): KEventController {\n    return on(\"collideEnd\", t1, (a, b, col) => b.is(t2) && f(a, b, col));\n}\n\nexport function forAllCurrentAndFuture(t: Tag, action: (obj: GameObj) => void) {\n    _k.game.root.get(t, { recursive: true }).forEach(action);\n    onAdd(t, action);\n    onTag((obj, tag) => {\n        if (tag === t) {\n            action(obj);\n        }\n    });\n}\n\nexport const onClick = overload2((action: () => void) => {\n    return _k.app.onMousePress(action);\n}, (tag: Tag, action: (obj: GameObj) => void) => {\n    const events: KEventController[] = [];\n\n    forAllCurrentAndFuture(tag, (obj) => {\n        if (!obj.area) {\n            throw new Error(\n                \"onClick() requires the object to have area() component\",\n            );\n        }\n        events.push(obj.onClick(() => action(obj)));\n    });\n    return KEventController.join(events);\n});\n\n// add an event that runs once when objs with tag t is hovered\nexport function onHover(\n    t: Tag,\n    action: (obj: GameObj) => void,\n): KEventController {\n    const events: KEventController[] = [];\n\n    forAllCurrentAndFuture(t, (obj) => {\n        if (!obj.area) {\n            throw new Error(\n                \"onHover() requires the object to have area() component\",\n            );\n        }\n        events.push(obj.onHover(() => action(obj)));\n    });\n    return KEventController.join(events);\n}\n\n// add an event that runs once when objs with tag t is hovered\nexport function onHoverUpdate(\n    t: Tag,\n    action: (obj: GameObj) => void,\n): KEventController {\n    const events: KEventController[] = [];\n\n    forAllCurrentAndFuture(t, (obj) => {\n        if (!obj.area) {\n            throw new Error(\n                \"onHoverUpdate() requires the object to have area() component\",\n            );\n        }\n        events.push(obj.onHoverUpdate(() => action(obj)));\n    });\n    return KEventController.join(events);\n}\n\n// add an event that runs once when objs with tag t is unhovered\nexport function onHoverEnd(\n    t: Tag,\n    action: (obj: GameObj) => void,\n): KEventController {\n    const events: KEventController[] = [];\n\n    forAllCurrentAndFuture(t, (obj) => {\n        if (!obj.area) {\n            throw new Error(\n                \"onHoverEnd() requires the object to have area() component\",\n            );\n        }\n        events.push(obj.onHoverEnd(() => action(obj)));\n    });\n    return KEventController.join(events);\n}\n\nexport function onLoading(action: (progress: number) => void) {\n    return _k.game.events.on(\"loading\", action);\n}\n\nexport function onResize(action: () => void) {\n    return _k.app.onResize(action);\n}\n\nexport function onError(action: (err: Error) => void) {\n    return _k.game.events.on(\"error\", action);\n}\n\nexport function onLoad(cb: () => void) {\n    if (_k.assets.loaded) {\n        cb();\n    }\n    else {\n        return _k.game.events.on(\"load\", cb);\n    }\n}\n\nexport function onLoadError(\n    cb: (name: string, failedAsset: Asset<any>) => void,\n) {\n    if (_k.assets.loaded) {\n        getFailedAssets().forEach(asset => cb(...asset));\n    }\n    else {\n        return _k.game.events.on(\"loadError\", cb);\n    }\n}\n", "import { DEF_ANCHOR, UV_PAD } from \"../../constants/general\";\nimport { Color } from \"../../math/color\";\nimport { Quad } from \"../../math/math\";\nimport { Vec2 } from \"../../math/Vec2\";\nimport { type Anchor, BlendMode, type RenderProps } from \"../../types\";\nimport { anchorPt } from \"../anchor\";\nimport type { Texture } from \"../gfx\";\nimport {\n    multRotate,\n    multScaleV,\n    multSkewV,\n    multTranslate,\n    multTranslateV,\n    popTransform,\n    pushTransform,\n} from \"../stack\";\nimport { drawRaw } from \"./drawRaw\";\n\n/**\n * How the UV Quad should look like.\n *\n * @group Draw\n * @subgroup Types\n */\nexport type DrawUVQuadOpt = RenderProps & {\n    /**\n     * Width of the UV quad.\n     */\n    width: number;\n    /**\n     * Height of the UV quad.\n     */\n    height: number;\n    /**\n     * If flip the texture horizontally.\n     */\n    flipX?: boolean;\n    /**\n     * If flip the texture vertically.\n     */\n    flipY?: boolean;\n    /**\n     * The texture to sample for this quad.\n     */\n    tex?: Texture;\n    /**\n     * The texture sampling area.\n     */\n    quad?: Quad;\n    /**\n     * The anchor point, or the pivot point. Default to \"topleft\".\n     */\n    anchor?: Anchor | Vec2;\n};\n\nexport function drawUVQuad(opt: DrawUVQuadOpt) {\n    if (opt.width === undefined || opt.height === undefined) {\n        throw new Error(\n            \"drawUVQuad() requires property \\\"width\\\" and \\\"height\\\".\",\n        );\n    }\n\n    if (opt.width <= 0 || opt.height <= 0) {\n        return;\n    }\n\n    const w = opt.width;\n    const h = opt.height;\n    const anchor = anchorPt(opt.anchor || DEF_ANCHOR);\n    const offsetX = anchor.x * w * -0.5;\n    const offsetY = anchor.y * h * -0.5;\n    const q = opt.quad || new Quad(0, 0, 1, 1);\n    const color = opt.color || Color.WHITE;\n    const opacity = opt.opacity ?? 1;\n\n    pushTransform();\n    multTranslateV(opt.pos);\n    multRotate(opt.angle);\n    multScaleV(opt.scale);\n    multSkewV(opt.skew);\n    multTranslate(offsetX, offsetY);\n\n    drawRaw(\n        {\n            pos: [\n                -w / 2,\n                h / 2,\n                -w / 2,\n                -h / 2,\n                w / 2,\n                -h / 2,\n                w / 2,\n                h / 2,\n            ],\n            uv: [\n                opt.flipX ? q.x + q.w : q.x,\n                opt.flipY ? q.y : q.y + q.h,\n                opt.flipX ? q.x + q.w : q.x,\n                opt.flipY ? q.y + q.h : q.y,\n                opt.flipX ? q.x : q.x + q.w,\n                opt.flipY ? q.y + q.h : q.y,\n                opt.flipX ? q.x : q.x + q.w,\n                opt.flipY ? q.y : q.y + q.h,\n            ],\n            color: [\n                color.r,\n                color.g,\n                color.b,\n                color.r,\n                color.g,\n                color.b,\n                color.r,\n                color.g,\n                color.b,\n                color.r,\n                color.g,\n                color.b,\n            ],\n            opacity: [\n                opacity,\n                opacity,\n                opacity,\n                opacity,\n            ],\n        },\n        [0, 1, 3, 1, 2, 3],\n        opt.fixed,\n        opt.tex,\n        opt.shader,\n        opt.uniform ?? undefined,\n        opt.blend ?? BlendMode.Normal,\n    );\n\n    popTransform();\n}\n", "import { DEF_ANCHOR } from \"../../constants/general\";\nimport { Color } from \"../../math/color\";\nimport { Quad } from \"../../math/math\";\nimport { Vec2 } from \"../../math/Vec2\";\nimport { type Anchor, BlendMode, type RenderProps } from \"../../types\";\nimport { anchorPt } from \"../anchor\";\nimport type { Texture } from \"../gfx\";\nimport { drawRaw } from \"./drawRaw\";\nimport { drawUVQuad } from \"./drawUVQuad\";\n\n/**\n * How the texture should look like.\n *\n * @group Draw\n * @subgroup Types\n */\nexport type DrawTextureOpt = RenderProps & {\n    tex: Texture;\n    width?: number;\n    height?: number;\n    tiled?: boolean;\n    flipX?: boolean;\n    flipY?: boolean;\n    quad?: Quad;\n    anchor?: Anchor | Vec2;\n};\n\nexport function drawTexture(opt: DrawTextureOpt) {\n    if (!opt.tex) {\n        throw new Error(\"drawTexture() requires property \\\"tex\\\".\");\n    }\n\n    const q = opt.quad ?? new Quad(0, 0, 1, 1);\n    const w = opt.tex.width * q.w;\n    const h = opt.tex.height * q.h;\n    const scale = Vec2.ONE;\n\n    if (opt.tiled) {\n        const offset = anchorPt(opt.anchor || DEF_ANCHOR);\n        const offsetX = (opt.pos?.x || 0)\n            - (offset.x + 1) * 0.5 * (opt.width || w);\n        const offsetY = (opt.pos?.y || 0)\n            - (offset.y + 1) * 0.5 * (opt.height || h);\n\n        const fcols = (opt.width || w) / w;\n        const frows = (opt.height || h) / h;\n        const cols = Math.floor(fcols);\n        const rows = Math.floor(frows);\n        const fracX = fcols - cols;\n        const fracY = frows - rows;\n        const n = (cols + fracX ? 1 : 0) * (rows + fracY ? 1 : 0);\n        const indices = new Array<number>(n * 6);\n        const attributes = {\n            pos: new Array<number>(n * 4 * 2),\n            uv: new Array<number>(n * 4 * 2),\n            color: new Array<number>(n * 4 * 3),\n            opacity: new Array<number>(n * 4),\n        };\n        let index = 0;\n\n        /*drawUVQuad(Object.assign({}, opt, {\n            scale: scale.scale(opt.scale || new Vec2(1)),\n        }));*/\n\n        const color = opt.color || Color.WHITE;\n        const opacity = opt.opacity || 1;\n\n        const addQuad = (\n            x: number,\n            y: number,\n            w: number,\n            h: number,\n            q: Quad,\n        ) => {\n            indices[index * 6 + 0] = index * 4 + 0;\n            indices[index * 6 + 1] = index * 4 + 1;\n            indices[index * 6 + 2] = index * 4 + 3;\n            indices[index * 6 + 3] = index * 4 + 1;\n            indices[index * 6 + 4] = index * 4 + 2;\n            indices[index * 6 + 5] = index * 4 + 3;\n\n            let s = index * 4;\n            attributes.pos[s * 2] = x + offsetX;\n            attributes.pos[s * 2 + 1] = y + offsetY;\n            attributes.uv[s * 2] = q.x;\n            attributes.uv[s * 2 + 1] = q.y;\n            attributes.color[s * 3] = color.r;\n            attributes.color[s * 3 + 1] = color.g;\n            attributes.color[s * 3 + 2] = color.b;\n            attributes.opacity[s] = opacity;\n            s++;\n            attributes.pos[s * 2] = x + w + offsetX;\n            attributes.pos[s * 2 + 1] = y + offsetY;\n            attributes.uv[s * 2] = q.x + q.w;\n            attributes.uv[s * 2 + 1] = q.y;\n            attributes.color[s * 3] = color.r;\n            attributes.color[s * 3 + 1] = color.g;\n            attributes.color[s * 3 + 2] = color.b;\n            attributes.opacity[s] = opacity;\n            s++;\n            attributes.pos[s * 2] = x + w + offsetX;\n            attributes.pos[s * 2 + 1] = y + h + offsetY;\n            attributes.uv[s * 2] = q.x + q.w;\n            attributes.uv[s * 2 + 1] = q.y + q.h;\n            attributes.color[s * 3] = color.r;\n            attributes.color[s * 3 + 1] = color.g;\n            attributes.color[s * 3 + 2] = color.b;\n            attributes.opacity[s] = opacity;\n            s++;\n            attributes.pos[s * 2] = x + offsetX;\n            attributes.pos[s * 2 + 1] = y + h + offsetY;\n            attributes.uv[s * 2] = q.x;\n            attributes.uv[s * 2 + 1] = q.y + q.h;\n            attributes.color[s * 3] = color.r;\n            attributes.color[s * 3 + 1] = color.g;\n            attributes.color[s * 3 + 2] = color.b;\n            attributes.opacity[s] = opacity;\n            index++;\n        };\n\n        for (let j = 0; j < rows; j++) {\n            for (let i = 0; i < cols; i++) {\n                addQuad(i * w, j * h, w, h, q);\n            }\n\n            if (fracX) {\n                addQuad(\n                    cols * w,\n                    j * h,\n                    w * fracX,\n                    h,\n                    new Quad(q.x, q.y, q.w * fracX, q.h),\n                );\n            }\n        }\n\n        if (fracY) {\n            for (let i = 0; i < cols; i++) {\n                addQuad(\n                    i * w,\n                    rows * h,\n                    w,\n                    h * fracY,\n                    new Quad(q.x, q.y, q.w, q.h * fracY),\n                );\n            }\n\n            if (fracX) {\n                addQuad(\n                    cols * w,\n                    rows * h,\n                    w * fracX,\n                    h * fracY,\n                    new Quad(q.x, q.y, q.w * fracX, q.h * fracY),\n                );\n            }\n        }\n\n        drawRaw(\n            attributes,\n            indices,\n            opt.fixed,\n            opt.tex,\n            opt.shader,\n            opt.uniform ?? undefined,\n            opt.blend ?? BlendMode.Normal,\n        );\n    }\n    else {\n        drawUVQuad(Object.assign({}, opt, {\n            scale: opt.scale ?? Vec2.ONE,\n            tex: opt.tex,\n            quad: q,\n            width: opt.width ?? w,\n            height: opt.height ?? h,\n        }));\n    }\n}\n", "// TODO: accept canvas\n\nimport type { Asset } from \"../../../assets/asset\";\nimport {\n    resolveSprite,\n    type SpriteAnim,\n    type SpriteData,\n} from \"../../../assets/sprite\";\nimport { DEF_ANCHOR } from \"../../../constants/general\";\nimport { KEvent, type KEventController } from \"../../../events/events\";\nimport { onLoad } from \"../../../events/globalEvents\";\nimport { getRenderProps } from \"../../../game/utils\";\nimport { anchorPt } from \"../../../gfx/anchor\";\nimport { drawTexture } from \"../../../gfx/draw/drawTexture\";\nimport type { Texture } from \"../../../gfx/gfx\";\nimport { Quad, quad, Rect, vec2 } from \"../../../math/math\";\nimport { type Vec2 } from \"../../../math/Vec2\";\nimport { _k } from \"../../../shared\";\nimport type { Comp, GameObj, SpriteAnimPlayOpt } from \"../../../types\";\n\n/**\n * The serialized {@link sprite `sprite()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport type SerializedSpriteComp = SpriteCompOpt & {\n    sprite: string;\n};\n\n/**\n * Current animation data.\n */\nexport interface SpriteCurAnim {\n    name: string;\n    timer: number;\n    loop: boolean;\n    speed: number;\n    /**\n     * The current index relative to the start of the\n     * associated `frames` array for this animation.\n     * This may be greater than the number of frames\n     * in the sprite.\n     */\n    frameIndex: number;\n    pingpong: boolean;\n    onEnd: () => void;\n}\n\n/**\n * The {@link sprite `sprite()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface SpriteComp extends Comp {\n    draw: Comp[\"draw\"];\n    /**\n     * Name of the sprite.\n     */\n    sprite: string;\n    /**\n     * Width for sprite.\n     */\n    width: number;\n    /**\n     * Height for sprite.\n     */\n    height: number;\n    /**\n     * Current frame in the entire spritesheet.\n     */\n    frame: number;\n    /**\n     * Current frame in relative to the animation that is currently playing.\n     */\n    animFrame: number;\n    /**\n     * The rectangular area of the texture to render.\n     */\n    quad: Quad;\n    /**\n     * Play a piece of anim.\n     */\n    play(anim: string, options?: SpriteAnimPlayOpt): void;\n    /**\n     * Stop current anim.\n     */\n    stop(): void;\n    /**\n     * Get total number of frames.\n     */\n    numFrames(): number;\n    /**\n     * Get the current animation data.\n     *\n     * @since v3001.0\n     */\n    getCurAnim(): SpriteCurAnim | null;\n    /**\n     * Get current anim name.\n     *\n     * @deprecated Use `getCurAnim().name` instead.\n     */\n    curAnim(): string | undefined;\n    /**\n     * Check if object's sprite has an animation.\n     */\n    hasAnim(name: string): boolean;\n    /**\n     * Get an animation.\n     */\n    getAnim(name: string): SpriteAnim | null;\n    /**\n     * Speed multiplier for all animations (for the actual fps for an anim use .play(\"anim\", { speed: 10 })).\n     */\n    animSpeed: number;\n    /**\n     * Flip texture horizontally.\n     */\n    flipX: boolean;\n    /**\n     * Flip texture vertically.\n     */\n    flipY: boolean;\n    /**\n     * Register an event that runs when an animation is played.\n     */\n    onAnimStart(action: (anim: string) => void): KEventController;\n    /**\n     * Register an event that runs when an animation is ended.\n     */\n    onAnimEnd(action: (anim: string) => void): KEventController;\n    /**\n     * @since v3000.0\n     */\n    renderArea(): Rect;\n\n    serialize(): SerializedSpriteComp;\n}\n\n/**\n * Options for the {@link sprite `sprite()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface SpriteCompOpt {\n    /**\n     * If the sprite is loaded with multiple frames, or sliced, use the frame option to specify which frame to draw.\n     */\n    frame?: number;\n    /**\n     * If provided width and height, don't stretch but instead render tiled.\n     */\n    tiled?: boolean;\n    /**\n     * Stretch sprite to a certain width.\n     */\n    width?: number;\n    /**\n     * Stretch sprite to a certain height.\n     */\n    height?: number;\n    /**\n     * Play an animation on start.\n     */\n    anim?: string;\n    /**\n     * Speed multiplier for all animations (for the actual fps for an anim use .play(\"anim\", { speed: 10 })).\n     */\n    animSpeed?: number;\n    /**\n     * Flip texture horizontally.\n     */\n    flipX?: boolean;\n    /**\n     * Flip texture vertically.\n     */\n    flipY?: boolean;\n    /**\n     * The rectangular sub-area of the texture to render, default to full texture `quad(0, 0, 1, 1)`.\n     */\n    quad?: Quad;\n    /**\n     * If fill the sprite (useful if you only want to render outline with outline() component).\n     */\n    fill?: boolean;\n}\n\n// TODO: clean\nexport function sprite(\n    src: string | SpriteData | Asset<SpriteData>,\n    opt: SpriteCompOpt = {},\n): SpriteComp {\n    let spriteData: SpriteData | null = null;\n    let curAnim: SpriteCurAnim | null = null;\n    // 1  - from small index to large index\n    // -1 - reverse\n    let curAnimDir: -1 | 1 | null = null;\n    const spriteLoadedEvent = new KEvent<[SpriteData]>();\n\n    if (!src) {\n        throw new Error(\n            \"Please pass the resource name or data to sprite()\",\n        );\n    }\n\n    const calcTexScale = (\n        tex: Texture,\n        q: Quad,\n        w?: number,\n        h?: number,\n    ): Vec2 => {\n        const scale = vec2(1, 1);\n        if (w && h) {\n            scale.x = w / (tex.width * q.w);\n            scale.y = h / (tex.height * q.h);\n        }\n        else if (w) {\n            scale.x = w / (tex.width * q.w);\n            scale.y = scale.x;\n        }\n        else if (h) {\n            scale.y = h / (tex.height * q.h);\n            scale.x = scale.y;\n        }\n        return scale;\n    };\n\n    const setSpriteData = (\n        obj: GameObj<SpriteComp>,\n        spr: SpriteData | null,\n    ) => {\n        if (!spr) return;\n\n        let q = spr.frames[0].clone();\n\n        if (opt.quad) {\n            q = q.scale(opt.quad);\n        }\n\n        const scale = calcTexScale(\n            spr.tex,\n            q,\n            opt.width,\n            opt.height,\n        );\n\n        obj.width = spr.tex.width * q.w * scale.x;\n        obj.height = spr.tex.height * q.h * scale.y;\n\n        if (spr.anims) {\n            for (let animName in spr.anims) {\n                const anim = spr.anims[animName];\n                if (typeof anim !== \"number\") {\n                    anim.frames = createAnimFrames(anim);\n                }\n            }\n        }\n\n        spriteData = spr;\n        spriteLoadedEvent.trigger(spriteData);\n\n        if (opt.anim) {\n            obj.play(opt.anim);\n        }\n    };\n\n    const createAnimFrames = (anim: Exclude<SpriteAnim, number>) => {\n        if (anim.frames) {\n            return anim.frames;\n        }\n        const frames = [];\n        if (anim.from === undefined || anim.to === undefined) {\n            throw new Error(\n                \"Sprite anim 'from' and 'to' must be defined if 'frames' is not defined\",\n            );\n        }\n        const frameSeqLength = Math.abs(anim.to - anim.from) + 1;\n        for (let i = 0; i < frameSeqLength; i++) {\n            frames.push(anim.from + i * Math.sign(anim.to - anim.from));\n        }\n        if (anim.pingpong) {\n            for (let i = frameSeqLength - 2; i > 0; i--) {\n                frames.push(frames[i]);\n            }\n        }\n        return frames;\n    };\n\n    let _shape: Rect | undefined;\n    let _width = 0;\n    let _height = 0;\n\n    return {\n        id: \"sprite\",\n        // TODO: allow update\n        get width() {\n            return _width;\n        },\n        set width(value) {\n            _width = value;\n            if (_shape) _shape.width = value;\n        },\n        get height() {\n            return _height;\n        },\n        set height(value) {\n            _height = value;\n            if (_shape) _shape.height = value;\n        },\n        frame: opt.frame || 0,\n        quad: opt.quad || new Quad(0, 0, 1, 1),\n        animSpeed: opt.animSpeed ?? 1,\n        flipX: opt.flipX ?? false,\n        flipY: opt.flipY ?? false,\n\n        get sprite() {\n            return src.toString();\n        },\n\n        set sprite(src) {\n            const spr = resolveSprite(src);\n\n            if (spr) {\n                spr.onLoad(spr =>\n                    setSpriteData(this as unknown as GameObj<SpriteComp>, spr)\n                );\n            }\n        },\n\n        get animFrame() {\n            if (!spriteData || !curAnim || curAnimDir === null) {\n                return this.frame;\n            }\n\n            const anim = spriteData.anims[curAnim.name];\n\n            if (typeof anim === \"number\") {\n                return anim;\n            }\n\n            if (anim.from === undefined || anim.to === undefined) {\n                return curAnim.frameIndex;\n            }\n\n            return this.frame - Math.min(anim.from, anim.to);\n        },\n\n        draw(this: GameObj<SpriteComp>) {\n            if (!spriteData) return;\n\n            const q = spriteData.frames[this.frame ?? 0];\n\n            if (!q) {\n                throw new Error(`Frame not found: ${this.frame ?? 0}`);\n            }\n\n            if (spriteData.slice9) {\n                // TODO: tile\n                // TODO: use scale or width / height, or both?\n                const { left, right, top, bottom } = spriteData.slice9;\n                const tw = spriteData.tex.width * q.w;\n                const th = spriteData.tex.height * q.h;\n                const iw = this.width - left - right;\n                const ih = this.height - top - bottom;\n                const w1 = left / tw;\n                const w3 = right / tw;\n                const w2 = 1 - w1 - w3;\n                const h1 = top / th;\n                const h3 = bottom / th;\n                const h2 = 1 - h1 - h3;\n                const quads = [\n                    // uv\n                    quad(0, 0, w1, h1),\n                    quad(w1, 0, w2, h1),\n                    quad(w1 + w2, 0, w3, h1),\n                    quad(0, h1, w1, h2),\n                    quad(w1, h1, w2, h2),\n                    quad(w1 + w2, h1, w3, h2),\n                    quad(0, h1 + h2, w1, h3),\n                    quad(w1, h1 + h2, w2, h3),\n                    quad(w1 + w2, h1 + h2, w3, h3),\n                    // transform\n                    quad(0, 0, left, top),\n                    quad(left, 0, iw, top),\n                    quad(left + iw, 0, right, top),\n                    quad(0, top, left, ih),\n                    quad(left, top, iw, ih),\n                    quad(left + iw, top, right, ih),\n                    quad(0, top + ih, left, bottom),\n                    quad(left, top + ih, iw, bottom),\n                    quad(left + iw, top + ih, right, bottom),\n                ];\n                const props = getRenderProps(this);\n                const offset = anchorPt(props.anchor || DEF_ANCHOR);\n                const offsetX = -(offset.x + 1) * 0.5 * this.width;\n                const offsetY = -(offset.y + 1) * 0.5 * this.height;\n                for (let i = 0; i < 9; i++) {\n                    const uv = quads[i];\n                    const transform = quads[i + 9];\n                    if (transform.w == 0 || transform.h == 0) {\n                        continue;\n                    }\n                    drawTexture(\n                        Object.assign(props, {\n                            pos: transform.pos().add(offsetX, offsetY),\n                            anchor: \"topleft\",\n                            tex: spriteData.tex,\n                            quad: q.scale(uv),\n                            flipX: this.flipX,\n                            flipY: this.flipY,\n                            tiled: opt.tiled,\n                            width: transform.w,\n                            height: transform.h,\n                        }),\n                    );\n                }\n            }\n            else {\n                drawTexture(\n                    Object.assign(getRenderProps(this), {\n                        tex: spriteData.tex,\n                        quad: q.scale(this.quad ?? new Quad(0, 0, 1, 1)),\n                        flipX: this.flipX,\n                        flipY: this.flipY,\n                        tiled: opt.tiled,\n                        width: this.width,\n                        height: this.height,\n                    }),\n                );\n            }\n        },\n\n        add(this: GameObj<SpriteComp>) {\n            const spr = resolveSprite(src);\n\n            if (spr) {\n                // The sprite exists\n                spr.onLoad(spr => setSpriteData(this, spr));\n            }\n            else {\n                // The sprite may be loaded later in the script, check again when all resources have been loaded\n                onLoad(() => setSpriteData(this, resolveSprite(src)!.data));\n            }\n        },\n\n        update(this: GameObj<SpriteComp>) {\n            if (!spriteData || !curAnim || curAnimDir === null) {\n                return;\n            }\n\n            const anim = spriteData!.anims[curAnim.name];\n\n            if (typeof anim === \"number\") {\n                this.frame = anim;\n                return;\n            }\n\n            if (anim.speed === 0) {\n                throw new Error(\"Sprite anim speed cannot be 0\");\n            }\n\n            curAnim.timer += _k.app.dt() * this.animSpeed;\n\n            if (curAnim.timer >= (1 / curAnim.speed)) {\n                curAnim.timer = 0;\n                curAnim.frameIndex += curAnimDir;\n\n                const frames = anim.frames!;\n                if (curAnim.frameIndex >= frames.length) {\n                    if (curAnim.pingpong && !anim.pingpong) {\n                        curAnimDir = -1;\n                        curAnim.frameIndex = frames.length - 2;\n                    }\n                    else if (curAnim.loop) {\n                        curAnim.frameIndex = 0;\n                    }\n                    else {\n                        this.frame = frames.at(-1)!;\n                        curAnim.onEnd();\n                        this.stop();\n                        return;\n                    }\n                }\n                else if (curAnim.frameIndex < 0) {\n                    if (curAnim.pingpong && curAnim.loop) {\n                        curAnimDir = 1;\n                        curAnim.frameIndex = 1;\n                    }\n                    else if (curAnim.loop) {\n                        curAnim.frameIndex = frames.length - 1;\n                    }\n                    else {\n                        this.frame = frames[0];\n                        curAnim.onEnd();\n                        this.stop();\n                        return;\n                    }\n                }\n\n                this.frame = frames[curAnim.frameIndex];\n            }\n        },\n\n        play(\n            this: GameObj<SpriteComp>,\n            name: string,\n            opt: SpriteAnimPlayOpt = {},\n        ) {\n            if (!spriteData) {\n                spriteLoadedEvent.add(() => this.play(name, opt));\n                return;\n            }\n\n            const anim = spriteData.anims[name];\n\n            if (anim === undefined) {\n                throw new Error(`Anim not found: ${name}`);\n            }\n\n            if (curAnim) {\n                if (opt.preventRestart && curAnim.name === name) return;\n                this.stop();\n            }\n\n            curAnim = typeof anim === \"number\"\n                ? {\n                    name: name,\n                    timer: 0,\n                    loop: false,\n                    pingpong: false,\n                    speed: 0,\n                    frameIndex: 0,\n                    onEnd: () => {},\n                }\n                : {\n                    name: name,\n                    timer: 0,\n                    loop: opt.loop ?? anim.loop ?? false,\n                    pingpong: opt.pingpong ?? anim.pingpong ?? false,\n                    speed: opt.speed ?? anim.speed ?? 10,\n                    frameIndex: 0,\n                    onEnd: opt.onEnd ?? (() => {}),\n                };\n\n            curAnimDir = typeof anim === \"number\" ? null : 1;\n            this.frame = typeof anim === \"number\" ? anim : anim.frames![0];\n\n            this.trigger(\"animStart\", name);\n        },\n\n        stop(this: GameObj<SpriteComp>) {\n            if (!curAnim) {\n                return;\n            }\n            const prevAnim = curAnim.name;\n            curAnim = null;\n            this.trigger(\"animEnd\", prevAnim);\n        },\n\n        numFrames() {\n            return spriteData?.frames.length ?? 0;\n        },\n\n        getCurAnim() {\n            return curAnim;\n        },\n\n        curAnim() {\n            return curAnim?.name;\n        },\n\n        getAnim(name) {\n            return spriteData?.anims[name] ?? null;\n        },\n\n        hasAnim(name) {\n            return Boolean(this.getAnim(name));\n        },\n\n        onAnimEnd(\n            this: GameObj<SpriteComp>,\n            action: (name: string) => void,\n        ): KEventController {\n            return this.on(\"animEnd\", action);\n        },\n\n        onAnimStart(\n            this: GameObj<SpriteComp>,\n            action: (name: string) => void,\n        ): KEventController {\n            return this.on(\"animStart\", action);\n        },\n\n        renderArea() {\n            if (!_shape) {\n                _shape = new Rect(vec2(0), _width, _height);\n            }\n            return _shape;\n        },\n\n        inspect() {\n            if (typeof src === \"string\") {\n                return `sprite: \"${src}\"`;\n            }\n            return null;\n        },\n\n        serialize() {\n            const data: any = { sprite: this.sprite };\n            if (opt.frame) data.frame = opt.frame;\n            if (opt.tiled) data.tiled = opt.tiled;\n            if (opt.width) data.width = opt.width;\n            if (opt.height) data.height = opt.height;\n            if (opt.anim) data.anim = opt.anim;\n            if (opt.animSpeed) data.animSpeed = opt.animSpeed;\n            if (this.flipX) data.flipX = this.flipX;\n            if (this.flipY) data.flipY = this.flipY;\n            if (opt.quad) {\n                data.quad = {\n                    x: opt.quad.x,\n                    y: opt.quad.y,\n                    w: opt.quad.w,\n                    h: opt.quad.h,\n                };\n            }\n            return data;\n        },\n    };\n}\n\nexport function spriteFactory(data: SerializedSpriteComp) {\n    const opt: SpriteCompOpt = {};\n    if (data.frame) opt.frame = data.frame;\n    if (data.tiled) opt.tiled = data.tiled;\n    if (data.width) opt.width = data.width;\n    if (data.height) opt.height = data.height;\n    if (data.anim) opt.anim = data.anim;\n    if (data.animSpeed) opt.animSpeed = data.animSpeed;\n    if (data.flipX) opt.flipX = data.flipX;\n    if (data.flipY) opt.flipY = data.flipY;\n    if (data.quad) {\n        opt.quad = quad(data.quad.x, data.quad.y, data.quad.w, data.quad.h);\n    }\n    return sprite(\n        data.sprite,\n        opt,\n    );\n}\n", "import type { FontData } from \"../../assets/font\";\nimport type { Uniform } from \"../../assets/shader\";\nimport type { Color } from \"../../math/color\";\nimport type { Quad } from \"../../math/math\";\nimport type { Vec2 } from \"../../math/Vec2\";\nimport { anchorPt } from \"../anchor\";\nimport type { Texture } from \"../gfx\";\nimport {\n    multRotate,\n    multTranslateV,\n    popTransform,\n    pushTransform,\n} from \"../stack\";\nimport type { DrawTextOpt } from \"./drawText\";\nimport { drawUVQuad } from \"./drawUVQuad\";\n\n/**\n * Formatted text with info on how and where to render each character.\n *\n * @group Rendering\n * @subgroup Text\n */\nexport type FormattedText = {\n    width: number;\n    height: number;\n    chars: FormattedChar[];\n    opt: DrawTextOpt;\n    renderedText: string;\n};\n\n/**\n * One formatted character.\n *\n * @group Rendering\n * @subgroup Text\n */\nexport interface FormattedChar {\n    ch: string;\n    tex: Texture;\n    width: number;\n    height: number;\n    quad: Quad;\n    pos: Vec2;\n    scale: Vec2;\n    angle: number;\n    color: Color;\n    opacity: number;\n    font?: string | FontData;\n    stretchInPlace: boolean;\n    shader?: string;\n    uniform?: Uniform;\n}\n\nexport function drawFormattedText(ftext: FormattedText) {\n    pushTransform();\n    multTranslateV(ftext.opt.pos!);\n    multRotate(ftext.opt.angle!);\n    multTranslateV(\n        anchorPt(ftext.opt.anchor ?? \"topleft\").add(1, 1).scale(\n            ftext.width,\n            ftext.height,\n        ).scale(-0.5),\n    );\n\n    const charsByTexture = new Map<Texture, FormattedChar[]>();\n\n    ftext.chars.forEach((ch) => {\n        if (!charsByTexture.has(ch.tex)) charsByTexture.set(ch.tex, []);\n        const chars = charsByTexture.get(ch.tex) ?? [];\n        chars.push(ch);\n    });\n\n    const sortedChars = Array.from(charsByTexture.values()).flat();\n\n    sortedChars.forEach((ch) => {\n        drawUVQuad({\n            tex: ch.tex,\n            width: ch.width,\n            height: ch.height,\n            pos: ch.pos,\n            scale: ch.scale,\n            angle: ch.angle,\n            color: ch.color,\n            opacity: ch.opacity,\n            quad: ch.quad,\n            anchor: \"center\",\n            uniform: ch.uniform ?? ftext.opt.uniform,\n            shader: ch.shader ?? ftext.opt.shader,\n            fixed: ftext.opt.fixed,\n        });\n    });\n\n    popTransform();\n}\n", "const enum EnumRunesCode {\n    HIGH_SURROGATE_START = 0xd800,\n    HIGH_SURROGATE_END = 0xdbff,\n\n    LOW_SURROGATE_START = 0xdc00,\n\n    REGIONAL_INDICATOR_START = 0x1f1e6,\n    REGIONAL_INDICATOR_END = 0x1f1ff,\n\n    FITZPATRICK_MODIFIER_START = 0x1f3fb,\n    FITZPATRICK_MODIFIER_END = 0x1f3ff,\n\n    VARIATION_MODIFIER_START = 0xfe00,\n    VARIATION_MODIFIER_END = 0xfe0f,\n\n    DIACRITICAL_MARKS_START = 0x20d0,\n    DIACRITICAL_MARKS_END = 0x20ff,\n\n    SUBDIVISION_INDICATOR_START = 0x1f3f4,\n    TAGS_START = 0xe0000,\n    TAGS_END = 0xe007f,\n\n    ZWJ = 0x200d,\n}\n\nconst GRAPHEMES = Object.freeze([\n    0x0308, // ( \u25CC\u0308 ) COMBINING DIAERESIS\n    0x0937, // ( \u0937 ) DEVANAGARI LETTER SSA\n    0x093F, // ( \u093F ) DEVANAGARI VOWEL SIGN I\n    0x0BA8, // ( \u0BA8 ) TAMIL LETTER NA\n    0x0BBF, // ( \u0BBF ) TAMIL VOWEL SIGN I\n    0x0BCD, // ( \u25CC\u0BCD) TAMIL SIGN VIRAMA\n    0x0E31, // ( \u25CC\u0E31 ) THAI CHARACTER MAI HAN-AKAT\n    0x0E33, // ( \u0E33 ) THAI CHARACTER SARA AM\n    0x0E40, // ( \u0E40 ) THAI CHARACTER SARA E\n    0x0E49, // ( \u0E40 ) THAI CHARACTER MAI THO\n    0x1100, // ( \u1100 ) HANGUL CHOSEONG KIYEOK\n    0x1161, // ( \u1161 ) HANGUL JUNGSEONG A\n    0x11A8, // ( \u11A8 ) HANGUL JONGSEONG KIYEOK\n]);\n\nenum EnumCodeUnits {\n    unit_1 = 1,\n    unit_2 = 2,\n    unit_4 = 4,\n}\n\nexport function runes(string: string): string[] {\n    if (typeof string !== \"string\") {\n        throw new TypeError(\"string cannot be undefined or null\");\n    }\n    const result: string[] = [];\n    let i = 0;\n    let increment = 0;\n    while (i < string.length) {\n        increment += nextUnits(i + increment, string);\n        if (isGrapheme(string[i + increment])) {\n            increment++;\n        }\n        if (isVariationSelector(string[i + increment])) {\n            increment++;\n        }\n        if (isDiacriticalMark(string[i + increment])) {\n            increment++;\n        }\n        if (isZeroWidthJoiner(string[i + increment])) {\n            increment++;\n            continue;\n        }\n        result.push(string.substring(i, i + increment));\n        i += increment;\n        increment = 0;\n    }\n    return result;\n}\n\n// Decide how many code units make up the current character.\n// BMP characters: 1 code unit\n// Non-BMP characters (represented by surrogate pairs): 2 code units\n// Emoji with skin-tone modifiers: 4 code units (2 code points)\n// Country flags: 4 code units (2 code points)\n// Variations: 2 code units\n// Subdivision flags: 14 code units (7 code points)\nfunction nextUnits(i: number, string: string) {\n    const current = string[i];\n    // If we don't have a value that is part of a surrogate pair, or we're at\n    // the end, only take the value at i\n    if (!isFirstOfSurrogatePair(current) || i === string.length - 1) {\n        return EnumCodeUnits.unit_1;\n    }\n\n    const currentPair = current + string[i + 1];\n    const nextPair = string.substring(i + 2, i + 5);\n\n    // Country flags are comprised of two regional indicator symbols,\n    // each represented by a surrogate pair.\n    // See http://emojipedia.org/flags/\n    // If both pairs are regional indicator symbols, take 4\n    if (isRegionalIndicator(currentPair) && isRegionalIndicator(nextPair)) {\n        return EnumCodeUnits.unit_4;\n    }\n\n    // https://unicode.org/emoji/charts/full-emoji-list.html#subdivision-flag\n    // See https://emojipedia.org/emoji-tag-sequence/\n    // If nextPair is in Tags(https://en.wikipedia.org/wiki/Tags_(Unicode_block)),\n    // then find next closest U+E007F(CANCEL TAG)\n    if (\n        isSubdivisionFlag(currentPair)\n        && isSupplementarySpecialpurposePlane(nextPair)\n    ) {\n        return string.slice(i).indexOf(\n            String.fromCodePoint(EnumRunesCode.TAGS_END),\n        ) + 2;\n    }\n\n    // If the next pair make a Fitzpatrick skin tone\n    // modifier, take 4\n    // See http://emojipedia.org/modifiers/\n    // Technically, only some code points are meant to be\n    // combined with the skin tone modifiers. This function\n    // does not check the current pair to see if it is\n    // one of them.\n    if (isFitzpatrickModifier(nextPair)) {\n        return EnumCodeUnits.unit_4;\n    }\n    return EnumCodeUnits.unit_2;\n}\n\nfunction isFirstOfSurrogatePair(string: string) {\n    return string\n        && betweenInclusive(\n            string[0].charCodeAt(0),\n            EnumRunesCode.HIGH_SURROGATE_START,\n            EnumRunesCode.HIGH_SURROGATE_END,\n        );\n}\n\nfunction isRegionalIndicator(string: string) {\n    return betweenInclusive(\n        codePointFromSurrogatePair(string),\n        EnumRunesCode.REGIONAL_INDICATOR_START,\n        EnumRunesCode.REGIONAL_INDICATOR_END,\n    );\n}\n\nfunction isSubdivisionFlag(string: string) {\n    return betweenInclusive(\n        codePointFromSurrogatePair(string),\n        EnumRunesCode.SUBDIVISION_INDICATOR_START,\n        EnumRunesCode.SUBDIVISION_INDICATOR_START,\n    );\n}\n\nfunction isFitzpatrickModifier(string: string) {\n    return betweenInclusive(\n        codePointFromSurrogatePair(string),\n        EnumRunesCode.FITZPATRICK_MODIFIER_START,\n        EnumRunesCode.FITZPATRICK_MODIFIER_END,\n    );\n}\n\nfunction isVariationSelector(string: string) {\n    return typeof string === \"string\"\n        && betweenInclusive(\n            string.charCodeAt(0),\n            EnumRunesCode.VARIATION_MODIFIER_START,\n            EnumRunesCode.VARIATION_MODIFIER_END,\n        );\n}\n\nfunction isDiacriticalMark(string: string) {\n    return typeof string === \"string\"\n        && betweenInclusive(\n            string.charCodeAt(0),\n            EnumRunesCode.DIACRITICAL_MARKS_START,\n            EnumRunesCode.DIACRITICAL_MARKS_END,\n        );\n}\n\nfunction isSupplementarySpecialpurposePlane(string: string) {\n    const codePoint = string.codePointAt(0);\n    return (typeof string === \"string\" && typeof codePoint === \"number\"\n        && betweenInclusive(\n            codePoint,\n            EnumRunesCode.TAGS_START,\n            EnumRunesCode.TAGS_END,\n        ));\n}\n\nfunction isGrapheme(string: string) {\n    return typeof string === \"string\"\n        && GRAPHEMES.includes(string.charCodeAt(0));\n}\n\nfunction isZeroWidthJoiner(string: string) {\n    return typeof string === \"string\"\n        && string.charCodeAt(0) === EnumRunesCode.ZWJ;\n}\n\nfunction codePointFromSurrogatePair(pair: string) {\n    const highOffset = pair.charCodeAt(0) - EnumRunesCode.HIGH_SURROGATE_START;\n    const lowOffset = pair.charCodeAt(1) - EnumRunesCode.LOW_SURROGATE_START;\n    return (highOffset << 10) + lowOffset + 0x10000;\n}\n\nfunction betweenInclusive(value: number, lower: number, upper: number) {\n    return value >= lower && value <= upper;\n}\n\nexport function substring(string: string, start?: number, width?: number) {\n    const chars = runes(string);\n    if (start === undefined) {\n        return string;\n    }\n    if (start >= chars.length) {\n        return \"\";\n    }\n    const rest = chars.length - start;\n    const stringWidth = width === undefined ? rest : width;\n    let endIndex: number | null = start + stringWidth;\n\n    if (endIndex > (start + rest)) {\n        endIndex = null;\n    }\n\n    if (endIndex === null) {\n        return chars.slice(start).join(\"\");\n    }\n\n    return chars.slice(start, endIndex).join(\"\");\n}\n", "import { Asset } from \"../assets/asset\";\nimport type { BitmapFontData, GfxFont } from \"../assets/bitmapFont\";\nimport { FontData, resolveFont } from \"../assets/font\";\nimport {\n    DEF_FONT_FILTER,\n    DEF_TEXT_CACHE_SIZE,\n    FONT_ATLAS_HEIGHT,\n    FONT_ATLAS_WIDTH,\n} from \"../constants/general\";\nimport { Color } from \"../math/color\";\nimport { Quad, vec2 } from \"../math/math\";\nimport { Vec2 } from \"../math/Vec2\";\nimport { _k } from \"../shared\";\nimport type { Outline, TexFilter } from \"../types\";\nimport { runes } from \"../utils/runes\";\nimport { alignPt } from \"./anchor\";\nimport type { FormattedChar, FormattedText } from \"./draw/drawFormattedText\";\nimport type { CharTransform, DrawTextOpt } from \"./draw/drawText\";\nimport { Texture } from \"./gfx\";\n\n/**\n * @group Rendering\n * @subgroup Text\n */\nexport type FontAtlas = {\n    font: BitmapFontData;\n    cursor: Vec2;\n    maxHeight: number;\n    outline: Outline | null;\n};\n\n/**\n * @group Rendering\n * @subgroup Text\n */\nexport type StyledTextInfo = {\n    charStyleMap: Record<number, string[]>;\n    text: string;\n};\n\nfunction applyCharTransform(fchar: FormattedChar, tr: CharTransform) {\n    if (tr.font) fchar.font = tr.font;\n    if (tr.stretchInPlace !== undefined) {\n        fchar.stretchInPlace = tr.stretchInPlace;\n    }\n    if (tr.shader !== undefined) fchar.shader = tr.shader;\n    if (tr.uniform !== undefined) fchar.uniform = tr.uniform;\n    if (tr.override) {\n        Object.assign(fchar, tr);\n        return;\n    }\n    if (tr.pos) fchar.pos = fchar.pos.add(tr.pos);\n    if (tr.scale) fchar.scale = fchar.scale.scale(vec2(tr.scale));\n    if (tr.angle) fchar.angle += tr.angle;\n    if (tr.color && fchar.ch.length === 1) {\n        fchar.color = fchar.color.mult(tr.color);\n    }\n    // attention to type coercion, 0 is a valid value, only null & undefined are not\n    if (tr.opacity != null) fchar.opacity *= tr.opacity;\n}\n\nexport function compileStyledText(txt: any): StyledTextInfo {\n    const charStyleMap = {} as Record<number, string[]>;\n    let renderText = \"\";\n    let styleStack: string[] = [];\n    let text = String(txt);\n\n    const emit = (ch: string) => {\n        if (styleStack.length > 0) {\n            charStyleMap[renderText.length] = styleStack.slice();\n        }\n        renderText += ch;\n    };\n\n    while (text !== \"\") {\n        if (text[0] === \"\\\\\") {\n            if (text.length === 1) {\n                throw new Error(\"Styled text error: \\\\ at end of string\");\n            }\n            emit(text[1]);\n            text = text.slice(2);\n            continue;\n        }\n        if (text[0] === \"[\") {\n            const execResult = /^\\[(\\/)?(\\w+?)\\]/.exec(text);\n            if (!execResult) {\n                // xxx: should throw an error here?\n                emit(text[0]);\n                text = text.slice(1);\n                continue;\n            }\n            const [m, e, gn] = execResult;\n            if (e !== undefined) {\n                const x = styleStack.pop();\n                if (x !== gn) {\n                    if (x !== undefined) {\n                        throw new Error(\n                            `Styled text error: mismatched tags. Expected [/${x}], got [/${gn}]`,\n                        );\n                    }\n                    else {\n                        throw new Error(\n                            `Styled text error: stray end tag [/${gn}]`,\n                        );\n                    }\n                }\n            }\n            else styleStack.push(gn);\n            text = text.slice(m.length);\n            continue;\n        }\n        emit(text[0]);\n        text = text.slice(1);\n    }\n\n    if (styleStack.length > 0) {\n        throw new Error(\n            `Styled text error: unclosed tags ${styleStack.join(\", \")}`,\n        );\n    }\n\n    return {\n        charStyleMap,\n        text: renderText,\n    };\n}\n\nfunction getFontName(font: FontData | string): string {\n    return font instanceof FontData\n        ? font.fontface.family\n        : font;\n}\n\nfunction getFontAtlasForFont(font: FontData | string): FontAtlas {\n    const fontName = getFontName(font);\n    let atlas = _k.gfx.fontAtlases[fontName];\n    if (!atlas) {\n        // create a new atlas\n        const opts: {\n            outline: Outline | null;\n            filter: TexFilter;\n        } = font instanceof FontData\n            ? {\n                outline: font.outline,\n                filter: font.filter,\n            }\n            : {\n                outline: null,\n                filter: DEF_FONT_FILTER,\n            };\n\n        // TODO: customizable font tex filter\n        atlas = {\n            font: {\n                tex: new Texture(\n                    _k.gfx.ggl,\n                    FONT_ATLAS_WIDTH,\n                    FONT_ATLAS_HEIGHT,\n                    {\n                        filter: opts.filter,\n                    },\n                ),\n                map: {},\n                size: DEF_TEXT_CACHE_SIZE,\n            },\n            cursor: new Vec2(0),\n            maxHeight: 0,\n            outline: opts.outline,\n        };\n\n        _k.gfx.fontAtlases[fontName] = atlas;\n    }\n    return atlas;\n}\n\nfunction updateFontAtlas(font: FontData | string, ch: string) {\n    const atlas = getFontAtlasForFont(font);\n    const fontName = getFontName(font);\n    if (!atlas.font.map[ch]) {\n        // TODO: use assets.packer to pack font texture\n        const c2d = _k.fontCacheC2d;\n        if (!c2d) throw new Error(\"fontCacheC2d is not defined.\");\n\n        if (!_k.fontCacheCanvas) {\n            throw new Error(\"fontCacheCanvas is not defined.\");\n        }\n\n        c2d.clearRect(\n            0,\n            0,\n            _k.fontCacheCanvas.width,\n            _k.fontCacheCanvas.height,\n        );\n\n        c2d.font = `${atlas.font.size}px ${fontName}`;\n        c2d.textBaseline = \"top\";\n        c2d.textAlign = \"left\";\n        c2d.fillStyle = \"#ffffff\";\n        const m = c2d.measureText(ch);\n        let w = Math.ceil(m.width);\n        if (!w) return;\n        let h = (Math.ceil(Math.abs(m.actualBoundingBoxAscent))\n            + Math.ceil(Math.abs(m.actualBoundingBoxDescent)))\n            || atlas.font.size;\n\n        // TODO: Test if this works with the verification of width and color\n        if (\n            atlas.outline && atlas.outline.width\n            && atlas.outline.color\n        ) {\n            c2d.lineJoin = \"round\";\n            c2d.lineWidth = atlas.outline.width * 2;\n            c2d.strokeStyle = atlas.outline.color.toHex();\n            c2d.strokeText(\n                ch,\n                atlas.outline.width,\n                atlas.outline.width,\n            );\n\n            w += atlas.outline.width * 2;\n            h += atlas.outline.width * 3;\n        }\n\n        c2d.fillText(\n            ch,\n            atlas.outline?.width ?? 0,\n            atlas.outline?.width ?? 0,\n        );\n\n        const img = c2d.getImageData(\n            0,\n            0,\n            w,\n            h,\n        );\n\n        // if we are about to exceed the X axis of the texture, go to another line\n        if (atlas.cursor.x + w > FONT_ATLAS_WIDTH) {\n            atlas.cursor.x = 0;\n            atlas.cursor.y += atlas.maxHeight;\n            atlas.maxHeight = 0;\n            if (atlas.cursor.y > FONT_ATLAS_HEIGHT) {\n                // TODO: create another atlas\n                throw new Error(\n                    \"Font atlas exceeds character limit\",\n                );\n            }\n        }\n\n        atlas.font.tex.update(img, atlas.cursor.x, atlas.cursor.y);\n\n        atlas.font.map[ch] = new Quad(\n            atlas.cursor.x,\n            atlas.cursor.y,\n            w,\n            h,\n        );\n\n        atlas.cursor.x += w + 1;\n        atlas.maxHeight = Math.max(atlas.maxHeight, h);\n    }\n}\n\nexport function formatText(opt: DrawTextOpt): FormattedText {\n    if (opt.text === undefined) {\n        throw new Error(\"formatText() requires property \\\"text\\\".\");\n    }\n\n    let font = resolveFont(opt.font);\n\n    // if it's still loading\n    if (!opt.text || opt.text === \"\" || font instanceof Asset || !font) {\n        return {\n            width: 0,\n            height: 0,\n            chars: [],\n            opt: opt,\n            renderedText: \"\",\n        };\n    }\n\n    const { charStyleMap, text } = compileStyledText(opt.text + \"\");\n    const chars = runes(text);\n\n    let defGfxFont = (font instanceof FontData || typeof font === \"string\")\n        ? getFontAtlasForFont(font).font\n        : font;\n\n    const size = opt.size || defGfxFont.size;\n    const scale = vec2(opt.scale ?? 1).scale(size / defGfxFont.size);\n    const lineSpacing = opt.lineSpacing ?? 0;\n    const letterSpacing = opt.letterSpacing ?? 0;\n    let curX: number = 0;\n    let tw = 0;\n    const lines: Array<{\n        width: number;\n        chars: { ch: FormattedChar; font: GfxFont }[];\n    }> = [];\n    let curLine: typeof lines[number][\"chars\"] = [];\n    let cursor = 0;\n    let lastSpace: number | null = null;\n    let lastSpaceWidth: number = 0;\n    let paraIndentX: number | undefined = undefined;\n\n    // TODO: word break\n    while (cursor < chars.length) {\n        let ch = chars[cursor];\n\n        // always new line on '\\n'\n        if (ch === \"\\n\") {\n            lines.push({\n                width: curX - letterSpacing,\n                chars: curLine,\n            });\n\n            lastSpace = null;\n            lastSpaceWidth = 0;\n            curX = 0;\n            curLine = [];\n            paraIndentX = undefined;\n        }\n        else {\n            const defaultFontValue =\n                (font instanceof FontData || typeof font === \"string\")\n                    ? font\n                    : undefined;\n            type PartialBy<T, K extends keyof T> =\n                & Omit<T, K>\n                & Partial<Pick<T, K>>;\n            const theFChar: PartialBy<\n                FormattedChar,\n                \"width\" | \"height\" | \"quad\"\n            > = {\n                tex: defGfxFont.tex,\n                ch: ch,\n                pos: vec2(curX, 0),\n                opacity: opt.opacity ?? 1,\n                color: opt.color ?? Color.WHITE,\n                scale: vec2(scale),\n                angle: 0,\n                font: defaultFontValue,\n                stretchInPlace: true,\n            };\n\n            if (opt.transform) {\n                const tr = typeof opt.transform === \"function\"\n                    ? opt.transform(cursor, ch)\n                    : opt.transform;\n                if (tr) {\n                    applyCharTransform(theFChar as any, tr);\n                }\n            }\n\n            if (charStyleMap[cursor]) {\n                const styles = charStyleMap[cursor];\n                for (const name of styles) {\n                    const style = opt.styles?.[name];\n                    const tr = typeof style === \"function\"\n                        ? style(cursor, ch)\n                        : style;\n\n                    if (tr) {\n                        applyCharTransform(theFChar as any, tr);\n                    }\n                }\n            }\n\n            const requestedFont = theFChar.font;\n            const resolvedFont = resolveFont(requestedFont);\n            if (resolvedFont instanceof Asset || !resolvedFont) {\n                // abort, not all fonts have loaded yet\n                return {\n                    width: 0,\n                    height: 0,\n                    chars: [],\n                    opt: opt,\n                    renderedText: \"\",\n                };\n            }\n            var requestedFontData = defGfxFont;\n            if (requestedFont && requestedFont !== defaultFontValue) {\n                if (\n                    resolvedFont instanceof FontData\n                    || typeof resolvedFont === \"string\"\n                ) {\n                    requestedFontData = getFontAtlasForFont(requestedFont).font;\n                }\n                else requestedFontData = resolvedFont;\n                theFChar.tex = requestedFontData.tex;\n            }\n            if (\n                requestedFont\n                && (resolvedFont instanceof FontData\n                    || typeof resolvedFont === \"string\")\n            ) updateFontAtlas(requestedFont, ch);\n\n            let q = requestedFontData.map[ch];\n\n            // TODO: leave space if character not found?\n            if (q) {\n                let gw = q.w\n                    * (theFChar.stretchInPlace\n                        ? scale\n                        : theFChar.scale).x;\n\n                if (opt.width && curX + gw > opt.width) {\n                    // new line on last word if width exceeds\n                    if (lastSpace != null) {\n                        cursor -= curLine.length - lastSpace;\n                        // omit trailing space\n                        curLine = curLine.slice(0, lastSpace - 1);\n                        curX = lastSpaceWidth;\n                    }\n                    lastSpace = null;\n                    lastSpaceWidth = 0;\n\n                    lines.push({\n                        width: curX - letterSpacing,\n                        chars: curLine,\n                    });\n\n                    curX = paraIndentX ?? 0;\n                    curLine = [];\n                    continue;\n                }\n\n                theFChar.width = q.w;\n                theFChar.height = q.h;\n                theFChar.quad = new Quad(\n                    q.x / requestedFontData.tex.width,\n                    q.y / requestedFontData.tex.height,\n                    q.w / requestedFontData.tex.width,\n                    q.h / requestedFontData.tex.height,\n                );\n\n                theFChar.pos = theFChar.pos.add(\n                    gw * 0.5,\n                    q.h * theFChar.scale.y * 0.5,\n                );\n\n                // push char\n                curLine.push({\n                    ch: theFChar as FormattedChar,\n                    font: requestedFontData,\n                });\n\n                if (ch === \" \") {\n                    lastSpace = curLine.length;\n                    lastSpaceWidth = curX;\n                }\n                if (\n                    opt.indentAll\n                    && paraIndentX === undefined\n                    && /\\S/.test(ch)\n                ) {\n                    paraIndentX = curX;\n                }\n\n                curX += gw;\n                tw = Math.max(tw, curX);\n                curX += letterSpacing;\n            }\n        }\n\n        cursor++;\n    }\n\n    lines.push({\n        width: curX - letterSpacing,\n        chars: curLine,\n    });\n\n    if (opt.width) {\n        tw = opt.width;\n    }\n\n    const formattedChars: FormattedChar[] = [];\n\n    let th = 0;\n\n    for (let i = 0; i < lines.length; i++) {\n        if (i > 0) th += lineSpacing;\n        const ox = (tw - lines[i].width) * alignPt(opt.align ?? \"left\");\n        var thisLineHeight = size;\n        for (const { ch } of lines[i].chars) {\n            ch.pos = ch.pos.add(ox, th);\n            formattedChars.push(ch);\n            thisLineHeight = Math.max(\n                thisLineHeight,\n                size * (ch.stretchInPlace ? scale : ch.scale).y / scale.y,\n            );\n        }\n        th += thisLineHeight;\n    }\n\n    return {\n        width: tw,\n        height: th,\n        chars: formattedChars,\n        opt,\n        renderedText: text,\n    };\n}\n", "import type { BitmapFontData } from \"../../../assets/bitmapFont\";\nimport { DEF_TEXT_SIZE } from \"../../../constants/general\";\nimport { onLoad } from \"../../../events/globalEvents\";\nimport { getRenderProps } from \"../../../game/utils\";\nimport {\n    drawFormattedText,\n    type FormattedText,\n} from \"../../../gfx/draw/drawFormattedText\";\nimport type {\n    CharTransform,\n    CharTransformFunc,\n    TextAlign,\n} from \"../../../gfx/draw/drawText\";\nimport { formatText } from \"../../../gfx/formatText\";\nimport { Rect, vec2 } from \"../../../math/math\";\nimport type { Comp, GameObj } from \"../../../types\";\n\n/**\n * The serialized {@link text `text()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedTextComp {\n    text: string;\n    size?: number;\n    font?: string;\n    width?: number;\n    align?: TextAlign;\n    lineSpacing?: number;\n    letterSpacing?: number;\n    indentAll?: boolean;\n}\n\n/**\n * The {@link text `text()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface TextComp extends Comp {\n    draw: Comp[\"draw\"];\n    /**\n     * The text to render.\n     */\n    text: string;\n    /**\n     * The text size.\n     */\n    textSize: number;\n    /**\n     * The font to use.\n     */\n    font: string | BitmapFontData;\n    /**\n     * Width of text.\n     */\n    width: number;\n    /**\n     * Height of text.\n     */\n    height: number;\n    /**\n     * Text alignment (\"left\", \"center\" or \"right\", default \"left\").\n     *\n     * @since v3000.0\n     */\n    align: TextAlign;\n    /**\n     * The gap between each line.\n     *\n     * @since v2000.2\n     */\n    lineSpacing: number;\n    /**\n     * The gap between each character.\n     *\n     * @since v2000.2\n     */\n    letterSpacing: number;\n    /**\n     * Transform the pos, scale, rotation or color for each character based on the index or char.\n     *\n     * @since v2000.1\n     */\n    textTransform: CharTransform | CharTransformFunc;\n    /**\n     * Stylesheet for styled chunks, in the syntax of \"this is a [style]text[/style] word\".\n     *\n     * @since v2000.2\n     */\n    textStyles: Record<string, CharTransform | CharTransformFunc>;\n    /**\n     * @since v3000.0\n     */\n    renderArea(): Rect;\n    /**\n     * The text data object after formatting, that contains the\n     * renering info as well as the parse data of the formatting tags.\n     */\n    formattedText(): FormattedText;\n\n    serialize(): SerializedTextComp;\n}\n\n/**\n * Options for the {@link text `text()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface TextCompOpt {\n    /**\n     * Height of text.\n     */\n    size?: number;\n    /**\n     * The font to use.\n     */\n    font?: string | BitmapFontData;\n    /**\n     * Wrap text to a certain width.\n     */\n    width?: number;\n    /**\n     * Text alignment (\"left\", \"center\" or \"right\", default \"left\").\n     *\n     * @since v3000.0\n     */\n    align?: TextAlign;\n    /**\n     * The gap between each line.\n     *\n     * @since v2000.2\n     */\n    lineSpacing?: number;\n    /**\n     * The gap between each character.\n     *\n     * @since v2000.2\n     */\n    letterSpacing?: number;\n    /**\n     * Transform the pos, scale, rotation or color for each character based on the index or char.\n     *\n     * @since v2000.1\n     */\n    transform?: CharTransform | CharTransformFunc;\n    /**\n     * Stylesheet for styled chunks, in the syntax of \"this is a [style]text[/style] word\".\n     *\n     * @since v2000.2\n     */\n    styles?: Record<string, CharTransform | CharTransformFunc>;\n    /**\n     * If true, any (whitespace) indent on the first line of the paragraph\n     * will be copied to all of the lines for those parts that text-wrap.\n     */\n    indentAll?: boolean;\n}\n\nexport function text(t: string, opt: TextCompOpt = {}): TextComp {\n    let theFormattedText: FormattedText;\n    function update(obj: GameObj<TextComp | any>) {\n        theFormattedText = formatText(Object.assign(getRenderProps(obj), {\n            text: obj.text + \"\",\n            size: obj.textSize,\n            font: obj.font,\n            width: opt.width && obj.width,\n            align: obj.align,\n            letterSpacing: obj.letterSpacing,\n            lineSpacing: obj.lineSpacing,\n            transform: obj.textTransform,\n            styles: obj.textStyles,\n            indentAll: opt.indentAll,\n        }));\n\n        if (!opt.width) {\n            obj.width = theFormattedText.width / (obj.scale?.x || 1);\n        }\n\n        obj.height = theFormattedText.height / (obj.scale?.y || 1);\n    }\n\n    let _shape: Rect | undefined;\n    let _width = opt.width ?? 0;\n    let _height = 0;\n\n    const obj = {\n        id: \"text\",\n        set text(nt) {\n            t = nt;\n            // @ts-expect-error\n            update(this);\n        },\n        get text() {\n            return t;\n        },\n        textSize: opt.size ?? DEF_TEXT_SIZE,\n        font: opt.font,\n        get width() {\n            return _width;\n        },\n        set width(value) {\n            _width = value;\n            if (_shape) _shape.width = value;\n        },\n        get height() {\n            return _height;\n        },\n        set height(value) {\n            _height = value;\n            if (_shape) _shape.height = value;\n        },\n        align: opt.align,\n        lineSpacing: opt.lineSpacing,\n        letterSpacing: opt.letterSpacing,\n        textTransform: opt.transform,\n        textStyles: opt.styles,\n\n        formattedText(this: GameObj<TextComp>) {\n            return theFormattedText;\n        },\n\n        add(this: GameObj<TextComp>) {\n            onLoad(() => update(this));\n        },\n\n        draw(this: GameObj<TextComp>) {\n            drawFormattedText(theFormattedText);\n        },\n\n        update(this: GameObj<TextComp>) {\n            update(this);\n        },\n\n        renderArea() {\n            if (!_shape) {\n                _shape = new Rect(vec2(0), _width, _height);\n            }\n            return _shape;\n        },\n    };\n\n    // @ts-expect-error\n    update(obj);\n\n    // @ts-ignore Deep check in text related methods\n    return obj;\n}\n\nexport function textFactory(data: SerializedTextComp) {\n    return text(data.text, {\n        align: data.align,\n        font: data.font,\n        width: data.width,\n        size: data.size,\n        indentAll: data.indentAll,\n        letterSpacing: data.letterSpacing,\n        lineSpacing: data.letterSpacing,\n    });\n}\n", "import { getRenderProps } from \"../../../game/utils\";\nimport { drawUVQuad } from \"../../../gfx/draw/drawUVQuad\";\nimport { Rect, vec2 } from \"../../../math/math\";\nimport type { Comp, GameObj } from \"../../../types\";\n\n/**\n * The {@link uvquad `uvquad()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface UVQuadComp extends Comp {\n    draw: Comp[\"draw\"];\n    /**\n     * Width of rect.\n     */\n    width: number;\n    /**\n     * Height of height.\n     */\n    height: number;\n    /**\n     * @since v3000.0\n     */\n    renderArea(): Rect;\n}\n\nexport function uvquad(w: number, h: number): UVQuadComp {\n    let _shape: Rect | undefined;\n    let _width = w;\n    let _height = h;\n    return {\n        id: \"uvquad\",\n        get width() {\n            return _width;\n        },\n        set width(value) {\n            _width = value;\n            if (_shape) _shape.width = value;\n        },\n        get height() {\n            return _height;\n        },\n        set height(value) {\n            _height = value;\n            if (_shape) _shape.height = value;\n        },\n        draw(this: GameObj<UVQuadComp>) {\n            drawUVQuad(Object.assign(getRenderProps(this), {\n                width: _width,\n                height: _height,\n            }));\n        },\n        renderArea() {\n            if (!_shape) {\n                _shape = new Rect(vec2(0), _width, _height);\n            }\n            return _shape;\n        },\n        inspect() {\n            return `uvquad: (${Math.ceil(_width)}w, ${Math.ceil(_height)})h`;\n        },\n    };\n}\n", "import { getRenderProps } from \"../../../game/utils\";\nimport { drawRect } from \"../../../gfx/draw/drawRect\";\nimport { drawUVQuad } from \"../../../gfx/draw/drawUVQuad\";\nimport { Texture } from \"../../../gfx/gfx\";\nimport { Rect, vec2 } from \"../../../math/math\";\nimport { _k } from \"../../../shared\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { PosComp } from \"../transform/pos\";\n\nexport interface VideoComp extends Comp {\n    width: number;\n    height: number;\n    currentTime: number;\n    duration: number;\n    play(): void;\n    pause(): void;\n    mute: boolean;\n    renderArea(): Rect;\n}\n\nexport type VideoCompOpt = {\n    width: number;\n    height: number;\n};\n\n// region video\nexport function video(url: string, opt: VideoCompOpt): VideoComp {\n    const _video: HTMLVideoElement = document.createElement(\"video\");\n    let _playing = false;\n    let _timeupdate = false;\n    let _canCopyVideo = false;\n    let _texture = new Texture(_k.gfx.ggl, opt.width, opt.height);\n    let _shape: Rect | undefined;\n    let _width = opt.width;\n    let _height = opt.height;\n    return {\n        id: \"video\",\n        get width() {\n            return _width;\n        },\n        set width(value) {\n            _width = value;\n            if (_shape) _shape.width = value;\n        },\n        get height() {\n            return _height;\n        },\n        set height(value) {\n            _height = value;\n            if (_shape) _shape.height = value;\n        },\n        get currentTime() {\n            return _video.currentTime;\n        },\n        set currentTime(value) {\n            _video.currentTime = value;\n        },\n        get duration() {\n            return _video.duration;\n        },\n        play() {\n            _video.play();\n        },\n        pause() {\n            _video.pause();\n        },\n        get mute() {\n            return _video.muted;\n        },\n        set mute(value) {\n            _video.muted = value;\n        },\n        add() {\n            _video.playsInline = true;\n            // _video.muted = true; Don't use this, sound will not work\n            _video.loop = true;\n            _video.autoplay = false;\n            _video.crossOrigin = \"anonymous\";\n\n            _video.addEventListener(\n                \"playing\",\n                () => {\n                    _playing = true;\n                    updateCopyFlag();\n                },\n                true,\n            );\n\n            _video.addEventListener(\n                \"timeupdate\",\n                () => {\n                    _timeupdate = true;\n                    updateCopyFlag();\n                },\n                true,\n            );\n\n            if (url.startsWith(\"http\")) { // Make sure redirects work\n                // console.log(`Fetching ${url}`);\n\n                fetch(url, {\n                    method: \"HEAD\",\n                    mode: \"no-cors\",\n                }).then((response) => {\n                    _video.src = response.url ? response.url : url;\n                });\n            }\n            else {\n                // console.log(`Not fetching ${url}`);\n\n                _video.src = url;\n            }\n\n            function updateCopyFlag() {\n                // console.log(`${_playing} ${_timeupdate}`);\n\n                if (_playing && _timeupdate) {\n                    _canCopyVideo = true;\n                }\n            }\n        },\n        update() {\n            if (_canCopyVideo) {\n                const gl = _k.gfx.ggl.gl;\n                _texture.bind();\n                gl.texImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    gl.RGBA,\n                    gl.RGBA,\n                    gl.UNSIGNED_BYTE,\n                    _video,\n                );\n                _texture.unbind();\n\n                // console.log(`${this.currentTime}/${this.duration}`);\n            }\n        },\n        draw(this: GameObj<PosComp | VideoComp>) {\n            if (_canCopyVideo) {\n                drawUVQuad(Object.assign(getRenderProps(this), {\n                    width: this.width,\n                    height: this.height,\n                    tex: _texture,\n                }));\n            }\n            else {\n                drawRect(Object.assign(getRenderProps(this), {\n                    width: this.width,\n                    height: this.height,\n                }));\n            }\n        },\n        renderArea() {\n            if (!_shape) {\n                _shape = new Rect(vec2(0), _width, _height);\n            }\n            return _shape;\n        },\n    };\n}\n", "import type { KEventController } from \"../../../events/events\";\nimport type { Vec2 } from \"../../../math/Vec2\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { PosComp } from \"../transform/pos\";\nimport type { TileComp } from \"./tile\";\n\n/**\n * The {@link agent `agent()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface AgentComp extends Comp {\n    agentSpeed: number;\n    allowDiagonals: boolean;\n    getDistanceToTarget(): number;\n    getNextLocation(): Vec2 | null;\n    getPath(): Vec2[] | null;\n    getTarget(): Vec2 | null;\n    isNavigationFinished(): boolean;\n    isTargetReachable(): boolean;\n    isTargetReached(): boolean;\n    setTarget(target: Vec2): void;\n    onNavigationStarted(cb: () => void): KEventController;\n    onNavigationNext(cb: () => void): KEventController;\n    onNavigationEnded(cb: () => void): KEventController;\n    onTargetReached(cb: () => void): KEventController;\n}\n\n/**\n * Options for the {@link agent `agent()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport type AgentCompOpt = {\n    speed?: number;\n    allowDiagonals?: boolean;\n};\n\nexport function agent(opts: AgentCompOpt = {}): AgentComp {\n    let target: Vec2 | null = null;\n    let path: Vec2[] | null = null;\n    let index: number | null = null;\n    let navMapChangedEvent: KEventController | null = null;\n    return {\n        id: \"agent\",\n        require: [\"pos\", \"tile\"],\n        agentSpeed: opts.speed ?? 100,\n        allowDiagonals: opts.allowDiagonals ?? true,\n        getDistanceToTarget(this: GameObj<AgentComp | PosComp>) {\n            return target ? this.pos.dist(target) : 0;\n        },\n        getNextLocation() {\n            return path && index ? path[index] : null;\n        },\n        getPath() {\n            return path ? path.slice() : null;\n        },\n        getTarget() {\n            return target;\n        },\n        isNavigationFinished() {\n            return path ? index === null : true;\n        },\n        isTargetReachable() {\n            return path !== null;\n        },\n        isTargetReached(this: GameObj<AgentComp | PosComp>) {\n            return target ? this.pos.eq(target) : true;\n        },\n        setTarget(this: GameObj<AgentComp | TileComp | PosComp>, p: Vec2) {\n            target = p;\n            path = this.getLevel().getPath(this.pos, target, {\n                allowDiagonals: this.allowDiagonals,\n            });\n            index = path ? 0 : null;\n            if (path && index !== null) {\n                if (!navMapChangedEvent) {\n                    navMapChangedEvent = this.getLevel()\n                        .onNavigationMapChanged(() => {\n                            if (target && path && index !== null) {\n                                path = this.getLevel().getPath(\n                                    this.pos,\n                                    target,\n                                    {\n                                        allowDiagonals: this.allowDiagonals,\n                                    },\n                                );\n                                if (path) {\n                                    index = 0;\n                                    this.trigger(\n                                        \"navigationNext\",\n                                        this,\n                                        path[index],\n                                    );\n                                }\n                                else {\n                                    index = null;\n                                    this.trigger(\"navigationEnded\", this);\n                                }\n                            }\n                        });\n                    this.onDestroy(() => navMapChangedEvent?.cancel());\n                }\n                this.trigger(\"navigationStarted\", this);\n                this.trigger(\"navigationNext\", this, path[index]);\n            }\n            else {\n                this.trigger(\"navigationEnded\", this);\n            }\n        },\n        update(this: GameObj<AgentComp | PosComp>) {\n            if (target && path && index !== null) {\n                if (this.pos.sdist(path[index]) < 2) {\n                    if (index === path.length - 1) {\n                        this.pos = target.clone();\n                        index = null;\n                        this.trigger(\"navigationEnded\", this);\n                        this.trigger(\"targetReached\", this);\n                        return;\n                    }\n                    else {\n                        index++;\n                        this.trigger(\"navigationNext\", this, path[index]);\n                    }\n                }\n                this.moveTo(path[index], this.agentSpeed);\n            }\n        },\n        onNavigationStarted(this: GameObj<AgentComp>, cb: () => void) {\n            return this.on(\"navigationStarted\", cb);\n        },\n        onNavigationNext(this: GameObj<AgentComp>, cb: () => void) {\n            return this.on(\"navigationNext\", cb);\n        },\n        onNavigationEnded(this: GameObj<AgentComp>, cb: () => void) {\n            return this.on(\"navigationEnded\", cb);\n        },\n        onTargetReached(this: GameObj<AgentComp>, cb: () => void) {\n            return this.on(\"targetReached\", cb);\n        },\n        inspect() {\n            return `agent: ` + JSON.stringify({\n                target: JSON.stringify(target),\n                path: JSON.stringify(path),\n            });\n        },\n    };\n}\n", "export class BinaryHeap<T> {\n    _items: T[];\n    _compareFn: (a: T, b: T) => boolean;\n\n    /**\n     * Creates a binary heap with the given compare function\n     * Not passing a compare function will give a min heap\n     */\n    constructor(compareFn = (a: T, b: T) => a < b) {\n        this._compareFn = compareFn;\n        this._items = [];\n    }\n\n    /**\n     * Insert an item into the binary heap\n     */\n    insert(item: T) {\n        this._items.push(item);\n        this.moveUp(this._items.length - 1);\n    }\n\n    /**\n     * Remove the smallest item from the binary heap in case of a min heap\n     * or the greatest item from the binary heap in case of a max heap\n     */\n    remove() {\n        if (this._items.length === 0) {\n            return null;\n        }\n        const item = this._items[0];\n        const lastItem = this._items.pop();\n        if (this._items.length !== 0) {\n            this._items[0] = lastItem as T;\n            this.moveDown(0);\n        }\n        return item;\n    }\n\n    /**\n     * Remove all items\n     */\n    clear() {\n        this._items.splice(0, this._items.length);\n    }\n\n    moveUp(pos: number) {\n        while (pos > 0) {\n            const parent = Math.floor((pos - 1) / 2);\n            if (!this._compareFn(this._items[pos], this._items[parent])) {\n                if (this._items[pos] >= this._items[parent]) {\n                    break;\n                }\n            }\n            this.swap(pos, parent);\n            pos = parent;\n        }\n    }\n\n    moveDown(pos: number) {\n        while (pos < Math.floor(this._items.length / 2)) {\n            let child = 2 * pos + 1;\n            if (\n                child < this._items.length - 1\n                && !this._compareFn(this._items[child], this._items[child + 1])\n            ) {\n                ++child;\n            }\n            if (this._compareFn(this._items[pos], this._items[child])) {\n                break;\n            }\n            this.swap(pos, child);\n            pos = child;\n        }\n    }\n\n    swap(index1: number, index2: number) {\n        [this._items[index1], this._items[index2]] = [\n            this._items[index2],\n            this._items[index1],\n        ];\n    }\n\n    /**\n     * Returns the amount of items\n     */\n    get length() {\n        return this._items.length;\n    }\n}\n", "import { Asset, fetchJSON } from \"../../assets/asset\";\nimport { fixURL } from \"../../assets/utils\";\nimport { _k } from \"../../shared\";\nimport type { Comp, CompList, GameObj } from \"../../types\";\nimport type { GameObjRaw, InternalGameObjRaw } from \"./GameObjRaw\";\n\n/**\n * A serialized game object. Created using {@link GameObjRaw.serialize `GameObjRaw.serialize()` } method.\n *\n * @since v4000.0\n * @group Game Obj\n * @subgroup Prefabs\n */\nexport interface SerializedGameObj {\n    components: Record<string, any>;\n    tags: string[];\n    children?: SerializedGameObj[];\n}\n\nconst factoryMethods: { [key: string]: (data: object) => Comp } = {};\n\n// #region Deserialization\nexport function registerPrefabFactory(\n    id: string,\n    factoryMethod: (data: any) => Comp,\n) {\n    factoryMethods[id] = factoryMethod;\n}\n\nexport function deserializePrefabAsset(serializedPrefab: SerializedGameObj) {\n    const list: CompList<unknown> = [];\n\n    for (const id in serializedPrefab.components) {\n        if (id in factoryMethods) {\n            list.push(factoryMethods[id](serializedPrefab.components[id]));\n        }\n    }\n\n    for (const tag of serializedPrefab.tags) {\n        list.push(tag);\n    }\n\n    return list;\n}\n\nexport function deserializeComp(id: string, data: any) {\n    if (id in factoryMethods) {\n        return factoryMethods[id](data);\n    }\n    throw new Error(`No factory found to deserialize component with id ${id}`);\n}\n// #endregion\n\n// #region Loading\nexport function loadPrefab(name: string, url: string) {\n    return _k.assets.prefabAssets.add(name, fetchJSON(fixURL(url)));\n}\n// #endregion\n\n// #region Serialization\nexport function createPrefab(nameOrObject: string | GameObj, object?: GameObj) {\n    const obj: InternalGameObjRaw = object\n        ? object as InternalGameObjRaw\n        : nameOrObject as InternalGameObjRaw;\n\n    const data = obj.serialize();\n\n    if (object) {\n        _k.assets.prefabAssets.add(\n            nameOrObject as string,\n            Promise.resolve(\n                new Asset<SerializedGameObj>(Promise.resolve(data)),\n            ),\n        );\n    }\n    return data;\n}\n// #endregion\n", "import { toScreen, toWorld } from \"../../../game/camera\";\nimport { drawCircle } from \"../../../gfx/draw/drawCircle\";\nimport { rgb } from \"../../../math/color\";\nimport { vec2, type Vec2Args } from \"../../../math/math\";\nimport { type Vec2 } from \"../../../math/Vec2\";\nimport { _k } from \"../../../shared\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport { isFixed } from \"../../entity/utils\";\nimport type { FixedComp } from \"./fixed\";\n\n/**\n * The serialized {@link pos `pos()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedPosComp {\n    pos: { x: number; y: number };\n}\n\n/**\n * The {@link pos `pos()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface PosComp extends Comp {\n    /**\n     * Object's current world position.\n     */\n    pos: Vec2;\n    /**\n     * Move how many pixels per second. If object is 'solid', it won't move into other 'solid' objects.\n     */\n    move(xVel: number, yVel: number): void;\n    move(vel: Vec2): void;\n    /**\n     * Move how many pixels, without multiplying dt, but still checking for 'solid'.\n     */\n    moveBy(dx: number, dy: number): void;\n    moveBy(d: Vec2): void;\n    /**\n     * Move to a spot with a speed (pixels per second), teleports if speed is not given.\n     */\n    moveTo(dest: Vec2, speed?: number): void;\n    moveTo(x: number, y: number, speed?: number): void;\n    /**\n     * Get / Set the position of the object on the screen.\n     *\n     * @since v2000.0\n     */\n    screenPos(newPos?: Vec2): Vec2 | null;\n    /**\n     * Get / Set the position of the object relative to the root.\n     *\n     * @since v2000.0\n     */\n    worldPos(newPos?: Vec2): Vec2 | null;\n    /**\n     * Transform a local point (relative to this) to a screen point (relative to the camera)\n     */\n    toScreen(this: GameObj<PosComp | FixedComp>, p: Vec2): Vec2;\n    /**\n     * Transform a local point (relative to this) to a world point (relative to the root)\n     *\n     * @since v3001.0\n     */\n    toWorld(this: GameObj<PosComp>, p: Vec2): Vec2;\n    /**\n     * Transform a screen point (relative to the camera) to a local point (relative to this)\n     *\n     * @since v3001.0\n     */\n    fromScreen(this: GameObj<PosComp | FixedComp>, p: Vec2): Vec2;\n    /**\n     * Transform a world point (relative to the root) to a local point (relative to this)\n     *\n     * @since v3001.0\n     */\n    fromWorld(this: GameObj<PosComp>, p: Vec2): Vec2;\n    /**\n     * Transform a point relative to this to a point relative to other\n     *\n     * @since v3001.0\n     */\n    toOther(this: GameObj<PosComp>, other: GameObj<PosComp>, p: Vec2): Vec2;\n    /**\n     * Transform a point relative to other to a point relative to this\n     *\n     * @since v3001.0\n     */\n    fromOther(this: GameObj<PosComp>, other: GameObj<PosComp>, p: Vec2): Vec2;\n    /**\n     * Serialize the current state comp\n     */\n    serialize(): SerializedPosComp;\n}\n\nexport function pos(...args: Vec2Args): PosComp {\n    return {\n        id: \"pos\",\n        pos: vec2(...args),\n\n        moveBy(...args: Vec2Args) {\n            this.pos = this.pos.add(vec2(...args));\n        },\n\n        // move with velocity (pixels per second)\n        move(...args: Vec2Args) {\n            this.moveBy(vec2(...args).scale(_k.app.dt()));\n        },\n\n        // move to a destination, with optional speed\n        // Adress all ts ignores\n        moveTo(...args) {\n            if (\n                typeof args[0] === \"number\" && typeof args[1] === \"number\"\n            ) {\n                // @ts-ignore Use overload functions here?\n                return this.moveTo(vec2(args[0], args[1]), args[2]);\n            }\n            const dest = args[0];\n            const speed = args[1];\n            if (speed === undefined) {\n                this.pos = vec2(dest);\n                return;\n            }\n            // @ts-ignore\n            const diff = dest.sub(this.pos);\n            if (diff.len() <= speed * _k.app.dt()) {\n                this.pos = vec2(dest);\n                return;\n            }\n            this.move(diff.unit().scale(speed));\n        },\n\n        // Get the position of the object relative to the root\n        worldPos(this: GameObj<PosComp>, pos: Vec2 | null = null) {\n            if (pos) {\n                this.pos = this.pos.add(this.fromWorld(pos));\n                return null;\n            }\n            else {\n                return this.parent\n                    ? this.parent.transform.transformPointV(this.pos, vec2())\n                    : this.pos;\n            }\n        },\n\n        // Transform a local point to a world point\n        toWorld(this: GameObj<PosComp>, p: Vec2): Vec2 {\n            return this.parent\n                ? this.parent.transform.transformPointV(this.pos.add(p), vec2())\n                : this.pos.add(p);\n        },\n\n        // Transform a world point (relative to the root) to a local point (relative to this)\n        fromWorld(this: GameObj<PosComp>, p: Vec2): Vec2 {\n            return this.parent\n                ? this.parent.transform.inverse.transformPointV(p, vec2()).sub(\n                    this.pos,\n                )\n                : p.sub(this.pos);\n        },\n\n        // Transform a screen point (relative to the camera) to a local point (relative to this)\n        screenPos(\n            this: GameObj<PosComp | FixedComp>,\n            pos: Vec2 | null = null,\n        ) {\n            if (pos) {\n                this.pos = this.pos.add(this.fromScreen(pos));\n                return null;\n            }\n            else {\n                const pos = this.worldPos();\n\n                // This is not really possible, because worldPos() will always return a value\n                // if it doesn't have arguments\n\n                // I left this like that for compatibility, maybe if it returns a value\n                // will break something?\n\n                if (!pos) {\n                    return null;\n                }\n\n                return isFixed(this)\n                    ? pos\n                    : toScreen(pos);\n            }\n        },\n\n        // Transform a local point (relative to this) to a screen point (relative to the camera)\n        toScreen(this: GameObj<PosComp | FixedComp>, p: Vec2): Vec2 {\n            const pos = this.toWorld(p);\n            return isFixed(this)\n                ? pos\n                : toScreen(pos);\n        },\n\n        // Transform a screen point (relative to the camera) to a local point (relative to this)\n        fromScreen(this: GameObj<PosComp>, p: Vec2): Vec2 {\n            return isFixed(this)\n                ? this.fromWorld(p)\n                : this.fromWorld(toWorld(p));\n        },\n\n        // Transform a point relative to this to a point relative to other\n        toOther(this: GameObj<PosComp>, other: GameObj<PosComp>, p: Vec2) {\n            return other.fromWorld(this.toWorld(p));\n        },\n\n        // Transform a point relative to other to a point relative to this\n        fromOther(this: GameObj<PosComp>, other: GameObj<PosComp>, p: Vec2) {\n            return other.toOther(this, p);\n        },\n\n        inspect() {\n            return `pos: (${Math.round(this.pos.x)}x, ${\n                Math.round(this.pos.y)\n            }y)`;\n        },\n\n        drawInspect() {\n            drawCircle({\n                color: rgb(255, 0, 0),\n                radius: 4 / _k.gfx.viewport.scale,\n            });\n        },\n\n        serialize() {\n            return { pos: this.pos.serialize() };\n        },\n    };\n}\n\nexport function posFactory(data: SerializedPosComp) {\n    return pos(data.pos.x, data.pos.y);\n}\n", "import { vec2 } from \"../../../math/math\";\nimport { Vec2 } from \"../../../math/Vec2\";\nimport { type Comp, type Edge, EdgeMask, type GameObj } from \"../../../types\";\nimport type { LevelComp } from \"./level\";\n\n/**\n * The {@link tile `tile()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface TileComp extends Comp {\n    /**\n     * The tile position inside the level.\n     */\n    tilePos: Vec2;\n    /**\n     * If the tile is an obstacle in pathfinding.\n     */\n    isObstacle: boolean;\n    /**\n     * How much a tile is cost to traverse in pathfinding (default 0).\n     */\n    cost: number;\n    /**\n     * If the tile has hard edges that cannot pass in pathfinding.\n     */\n    edges: Edge[];\n    /**\n     * Position offset when setting `tilePos`.\n     */\n    tilePosOffset: Vec2;\n    readonly edgeMask: EdgeMask;\n    getLevel(): GameObj<LevelComp>;\n    tileMove(dir: Vec2): void;\n    moveLeft(): void;\n    moveRight(): void;\n    moveUp(): void;\n    moveDown(): void;\n}\n\n/**\n * Options for the {@link tile `tile()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport type TileCompOpt = {\n    /**\n     * If the tile is an obstacle in pathfinding.\n     */\n    isObstacle?: boolean;\n    /**\n     * How much a tile is cost to traverse in pathfinding (default 0).\n     */\n    cost?: number;\n    /**\n     * If the tile has hard edges that cannot pass in pathfinding.\n     */\n    edges?: Edge[];\n    /**\n     * Position offset when setting `tilePos`.\n     */\n    offset?: Vec2;\n};\n\nexport function tile(opts: TileCompOpt = {}): TileComp {\n    let tilePos = vec2(0);\n    let isObstacle = opts.isObstacle ?? false;\n    let cost = opts.cost ?? 0;\n    let edges = opts.edges ?? [];\n\n    const getEdgeMask = () => {\n        const loopup = {\n            \"left\": EdgeMask.Left,\n            \"top\": EdgeMask.Top,\n            \"right\": EdgeMask.Right,\n            \"bottom\": EdgeMask.Bottom,\n        };\n        return edges.map(s => loopup[s] || 0).reduce(\n            (mask, dir) => mask | dir,\n            0,\n        );\n    };\n\n    let edgeMask = getEdgeMask();\n\n    return {\n        id: \"tile\",\n        tilePosOffset: opts.offset ?? vec2(0),\n\n        set tilePos(p: Vec2) {\n            const level = this.getLevel();\n            tilePos = p.clone();\n            // @ts-ignore\n            this.pos = vec2(\n                this.tilePos.x * level.tileWidth(),\n                this.tilePos.y * level.tileHeight(),\n            ).add(this.tilePosOffset);\n        },\n\n        get tilePos() {\n            return tilePos;\n        },\n\n        set isObstacle(is: boolean) {\n            if (isObstacle === is) return;\n            isObstacle = is;\n            this.getLevel().invalidateNavigationMap();\n        },\n\n        get isObstacle() {\n            return isObstacle;\n        },\n\n        set cost(n: number) {\n            if (cost === n) return;\n            cost = n;\n            this.getLevel().invalidateNavigationMap();\n        },\n\n        get cost() {\n            return cost;\n        },\n\n        set edges(e: Edge[]) {\n            edges = e;\n            edgeMask = getEdgeMask();\n            this.getLevel().invalidateNavigationMap();\n        },\n\n        get edges() {\n            return edges;\n        },\n\n        get edgeMask() {\n            return edgeMask;\n        },\n\n        getLevel(this: GameObj) {\n            return this.parent as GameObj<LevelComp>;\n        },\n\n        tileMove(dir: Vec2) {\n            const level = this.getLevel();\n            level.removeFromSpatialMap(this as unknown as GameObj<TileComp>);\n            this.tilePos = this.tilePos.add(dir);\n            level.insertIntoSpatialMap(this as unknown as GameObj<TileComp>);\n            level.trigger(\"spatialMapChanged\");\n        },\n\n        moveLeft() {\n            this.tileMove(vec2(-1, 0));\n        },\n\n        moveRight() {\n            this.tileMove(vec2(1, 0));\n        },\n\n        moveUp() {\n            this.tileMove(vec2(0, -1));\n        },\n\n        moveDown() {\n            this.tileMove(vec2(0, 1));\n        },\n    };\n}\n", "import type { KEventController } from \"../../../events/events\";\nimport {\n    raycastGrid,\n    type RaycastResult,\n    vec2,\n    type Vec2Args,\n} from \"../../../math/math\";\nimport { calcTransform } from \"../../../math/various\";\nimport { type Vec2 } from \"../../../math/Vec2\";\nimport {\n    type Comp,\n    type CompList,\n    EdgeMask,\n    type GameObj,\n} from \"../../../types\";\nimport { BinaryHeap } from \"../../../utils/binaryheap\";\nimport { deserializeComp } from \"../../entity/prefab\";\nimport { pos, type PosComp } from \"../transform/pos\";\nimport { tile } from \"./tile\";\n\n/**\n * The {@link level `level()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface LevelComp extends Comp {\n    tileWidth(): number;\n    tileHeight(): number;\n    numRows(): number;\n    numColumns(): number;\n    /**\n     * Spawn a tile from a symbol defined previously.\n     */\n    spawn(sym: string, p: Vec2): GameObj | null;\n    spawn(sym: string, x: number, y: number): GameObj | null;\n    /**\n     * Spawn a tile from a component list.\n     *\n     * @returns The spawned game object, or null if the obj hasn't components.\n     */\n    spawn<T>(obj: CompList<T>, p: Vec2): GameObj<T> | null;\n    spawn<T>(sym: CompList<T>, x: number, y: number): GameObj<T> | null;\n    /**\n     * Total width of level in pixels.\n     */\n    levelWidth(): number;\n    /**\n     * Total height of level in pixels.\n     */\n    levelHeight(): number;\n    /**\n     * Get all game objects that's currently inside a given tile.\n     */\n    getAt(tilePos: Vec2): GameObj[];\n    /**\n     * Raycast all game objects on the given path.\n     */\n    raycast(origin: Vec2, direction: Vec2): RaycastResult;\n    /**\n     * Convert tile position to pixel position.\n     */\n    tile2Pos(tilePos: Vec2): Vec2;\n    tile2Pos(x: number, y: number): Vec2;\n    /**\n     * Convert pixel position to tile position.\n     */\n    pos2Tile(pos: Vec2): Vec2;\n    pos2Tile(x: number, y: number): Vec2;\n    /**\n     * Find the path to navigate from one tile to another tile.\n     *\n     * @returns A list of traverse points in tile positions.\n     */\n    getTilePath(from: Vec2, to: Vec2, opts?: PathFindOpt): Vec2[] | null;\n    /**\n     * Find the path to navigate from one tile to another tile.\n     *\n     * @returns A list of traverse points in pixel positions.\n     */\n    getPath(from: Vec2, to: Vec2, opts?: PathFindOpt): Vec2[] | null;\n    getSpatialMap(): GameObj[][];\n    removeFromSpatialMap(obj: GameObj): void;\n    insertIntoSpatialMap(obj: GameObj): void;\n    onSpatialMapChanged(cb: () => void): KEventController;\n    onNavigationMapInvalid(cb: () => void): KEventController;\n    invalidateNavigationMap(): void;\n    onNavigationMapChanged(cb: () => void): KEventController;\n\n    serialize(): any;\n}\n\n/**\n * Options for the {@link level `level()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface LevelCompOpt {\n    /**\n     * Width of each block.\n     */\n    tileWidth: number;\n    /**\n     * Height of each block.\n     */\n    tileHeight: number;\n    /**\n     * Definition of each tile.\n     */\n    tiles: {\n        [sym: string]: (pos: Vec2) => CompList<Comp>;\n    };\n    /**\n     * Called when encountered a symbol not defined in \"tiles\".\n     */\n    wildcardTile?: (\n        sym: string,\n        pos: Vec2,\n    ) => CompList<Comp> | null | undefined;\n}\n\n/**\n * @group Components\n * @subgroup Component Types\n */\nexport type PathFindOpt = {\n    allowDiagonals?: boolean;\n};\n\nexport function level(map: string[], opt: LevelCompOpt): LevelComp {\n    const numRows = map.length;\n    let numColumns = 0;\n\n    // The spatial map keeps track of the objects at each location\n    let spatialMap: GameObj[][] | null = null;\n    let costMap: number[] | null = null;\n    let edgeMap: number[] | null = null;\n    let connectivityMap: number[] | null = null;\n\n    const tile2Hash = (tilePos: Vec2) => tilePos.x + tilePos.y * numColumns;\n    const hash2Tile = (hash: number) =>\n        vec2(Math.floor(hash % numColumns), Math.floor(hash / numColumns));\n\n    const createSpatialMap = (level: GameObj<LevelComp>) => {\n        spatialMap = [];\n        for (const child of level.children) {\n            insertIntoSpatialMap(child);\n        }\n    };\n\n    const insertIntoSpatialMap = (obj: GameObj) => {\n        const i = tile2Hash(obj.tilePos);\n        if (spatialMap![i]) {\n            spatialMap![i].push(obj);\n        }\n        else {\n            spatialMap![i] = [obj];\n        }\n    };\n\n    const removeFromSpatialMap = (obj: GameObj) => {\n        const i = tile2Hash(obj.tilePos);\n        if (spatialMap![i]) {\n            const index = spatialMap![i].indexOf(obj);\n            if (index >= 0) {\n                spatialMap![i].splice(index, 1);\n            }\n        }\n    };\n\n    const updateSpatialMap = (level: GameObj<LevelComp>) => {\n        let spatialMapChanged = false;\n        for (const child of level.children) {\n            const tilePos = level.pos2Tile(child.pos);\n            if (child.tilePos.x != tilePos.x || child.tilePos.y != tilePos.y) {\n                spatialMapChanged = true;\n                removeFromSpatialMap(child);\n                child.tilePos.x = tilePos.x;\n                child.tilePos.y = tilePos.y;\n                insertIntoSpatialMap(child);\n            }\n        }\n        if (spatialMapChanged) {\n            level.trigger(\"spatialMapChanged\");\n        }\n    };\n\n    // The obstacle map tells which tiles are accessible\n    // Cost: accessible with cost\n    // Infinite: inaccessible\n    const createCostMap = (level: GameObj<LevelComp>) => {\n        const spatialMap = level.getSpatialMap();\n        const size = level.numRows() * level.numColumns();\n        if (!costMap) {\n            costMap = new Array<number>(size);\n        }\n        else {\n            costMap.length = size;\n        }\n        costMap.fill(1, 0, size);\n        for (let i = 0; i < spatialMap.length; i++) {\n            const objects = spatialMap[i];\n            if (objects) {\n                let cost = 0;\n                for (const obj of objects) {\n                    if (obj.isObstacle) {\n                        cost = Infinity;\n                        break;\n                    }\n                    else {\n                        cost += obj.cost;\n                    }\n                }\n                costMap[i] = cost || 1;\n            }\n        }\n    };\n\n    // The edge map tells which edges between nodes are walkable\n    const createEdgeMap = (level: GameObj<LevelComp>) => {\n        const spatialMap = level.getSpatialMap();\n        const size = level.numRows() * level.numColumns();\n        if (!edgeMap) {\n            edgeMap = new Array<number>(size);\n        }\n        else {\n            edgeMap.length = size;\n        }\n        edgeMap.fill(EdgeMask.All, 0, size);\n        for (let i = 0; i < spatialMap.length; i++) {\n            const objects = spatialMap[i];\n            if (objects) {\n                const len = objects.length;\n                let mask = EdgeMask.All;\n                for (let j = 0; j < len; j++) {\n                    mask |= objects[j].edgeMask;\n                }\n                edgeMap[i] = mask;\n            }\n        }\n    };\n\n    // The connectivity map is used to see whether two locations are connected\n    // -1: inaccesible n: connectivity group\n    const createConnectivityMap = (level: GameObj<LevelComp>) => {\n        const size = level.numRows() * level.numColumns();\n        const traverse = (i: number, index: number) => {\n            const frontier: number[] = [];\n            frontier.push(i);\n            while (frontier.length > 0) {\n                // TODO: Remove non-null assertion\n                const i = frontier.pop()!;\n\n                getNeighbours(i).forEach((i) => {\n                    if (connectivityMap![i] < 0) {\n                        connectivityMap![i] = index;\n                        frontier.push(i);\n                    }\n                });\n            }\n        };\n        if (!connectivityMap) {\n            connectivityMap = new Array<number>(size);\n        }\n        else {\n            connectivityMap.length = size;\n        }\n        connectivityMap.fill(-1, 0, size);\n        let index = 0;\n        for (let i = 0; i < costMap!.length; i++) {\n            if (connectivityMap[i] >= 0) {\n                index++;\n                continue;\n            }\n            traverse(i, index);\n            index++;\n        }\n    };\n\n    const getCost = (node: number, neighbour: number) => {\n        // Cost of destination tile\n        return costMap![neighbour];\n    };\n\n    const getHeuristic = (node: number, goal: number) => {\n        // Euclidian distance to target\n        const p1 = hash2Tile(node);\n        const p2 = hash2Tile(goal);\n        return p1.dist(p2);\n    };\n\n    const getNeighbours = (node: number, diagonals?: boolean) => {\n        const n = [];\n        const x = Math.floor(node % numColumns);\n        const left = x > 0\n            && edgeMap![node] & EdgeMask.Left\n            && costMap![node - 1] !== Infinity;\n        const top = node >= numColumns\n            && edgeMap![node] & EdgeMask.Top\n            && costMap![node - numColumns] !== Infinity;\n        const right = x < numColumns - 1\n            && edgeMap![node] & EdgeMask.Right\n            && costMap![node + 1] !== Infinity;\n        const bottom = node < numColumns * numRows - numColumns - 1\n            && edgeMap![node] & EdgeMask.Bottom\n            && costMap![node + numColumns] !== Infinity;\n        if (diagonals) {\n            if (left) {\n                if (top) n.push(node - numColumns - 1);\n                n.push(node - 1);\n                if (bottom) n.push(node + numColumns - 1);\n            }\n            if (top) {\n                n.push(node - numColumns);\n            }\n            if (right) {\n                if (top) n.push(node - numColumns + 1);\n                n.push(node + 1);\n                if (bottom) n.push(node + numColumns + 1);\n            }\n            if (bottom) {\n                n.push(node + numColumns);\n            }\n        }\n        else {\n            if (left) {\n                n.push(node - 1);\n            }\n            if (top) {\n                n.push(node - numColumns);\n            }\n            if (right) {\n                n.push(node + 1);\n            }\n            if (bottom) {\n                n.push(node + numColumns);\n            }\n        }\n        return n;\n    };\n\n    return {\n        id: \"level\",\n\n        add(this: GameObj<LevelComp>) {\n            map.forEach((row, i) => {\n                const keys = row.split(\"\");\n                numColumns = Math.max(keys.length, numColumns);\n                keys.forEach((key, j) => {\n                    this.spawn(key, vec2(j, i));\n                });\n            });\n        },\n\n        tileWidth() {\n            return opt.tileWidth;\n        },\n\n        tileHeight() {\n            return opt.tileHeight;\n        },\n\n        spawn(\n            this: GameObj<LevelComp>,\n            key: string | CompList<any>,\n            ...args: Vec2Args\n        ) {\n            const p = vec2(...args);\n\n            const comps = (() => {\n                if (typeof key === \"string\") {\n                    if (opt.tiles[key]) {\n                        if (typeof opt.tiles[key] !== \"function\") {\n                            throw new Error(\n                                \"Level symbol def must be a function returning a component list\",\n                            );\n                        }\n                        return opt.tiles[key](p);\n                    }\n                    else if (opt.wildcardTile) {\n                        return opt.wildcardTile(key, p);\n                    }\n                }\n                else if (Array.isArray(key)) {\n                    return key;\n                }\n                else {\n                    throw new Error(\"Expected a symbol or a component list\");\n                }\n            })();\n\n            // empty tile\n            if (!comps) {\n                return null;\n            }\n\n            let hasPos = false;\n            let hasTile = false;\n\n            for (const comp of comps) {\n                if (comp.id === \"tile\") hasTile = true;\n                if (comp.id === \"pos\") hasPos = true;\n            }\n\n            if (!hasPos) comps.push(pos(this.tile2Pos(p)));\n            if (!hasTile) comps.push(tile());\n\n            const obj = this.add(comps);\n\n            if (hasPos) {\n                obj.tilePosOffset = obj.pos.clone();\n            }\n\n            obj.tilePos = p;\n            // Stale, so recalculate\n            calcTransform(obj, obj.transform);\n\n            if (spatialMap) {\n                insertIntoSpatialMap(obj);\n                this.trigger(\"spatialMapChanged\");\n                this.trigger(\"navigationMapInvalid\");\n            }\n\n            return obj;\n        },\n\n        numColumns() {\n            return numColumns;\n        },\n\n        numRows() {\n            return numRows;\n        },\n\n        levelWidth() {\n            return numColumns * this.tileWidth();\n        },\n\n        levelHeight() {\n            return numRows * this.tileHeight();\n        },\n\n        tile2Pos(...args: Vec2Args) {\n            return vec2(...args).scale(this.tileWidth(), this.tileHeight());\n        },\n\n        pos2Tile(...args: Vec2Args) {\n            const p = vec2(...args);\n            return vec2(\n                Math.floor(p.x / this.tileWidth()),\n                Math.floor(p.y / this.tileHeight()),\n            );\n        },\n\n        getSpatialMap(this: GameObj<LevelComp>) {\n            if (!spatialMap) {\n                createSpatialMap(this);\n            }\n            return spatialMap!;\n        },\n\n        removeFromSpatialMap,\n\n        insertIntoSpatialMap,\n\n        onSpatialMapChanged(this: GameObj<LevelComp>, cb: () => void) {\n            return this.on(\"spatialMapChanged\", cb);\n        },\n\n        onNavigationMapInvalid(this: GameObj<LevelComp>, cb: () => void) {\n            return this.on(\"navigationMapInvalid\", cb);\n        },\n\n        getAt(this: GameObj<LevelComp>, tilePos: Vec2) {\n            if (!spatialMap) {\n                createSpatialMap(this);\n            }\n            const hash = tile2Hash(tilePos);\n            return spatialMap![hash] || [];\n        },\n\n        raycast(\n            this: GameObj<LevelComp | PosComp>,\n            origin: Vec2,\n            direction: Vec2,\n        ) {\n            const worldOrigin = this.toWorld(origin);\n            const worldDirection = this.toWorld(origin.add(direction)).sub(\n                worldOrigin,\n            );\n            const invTileWidth = 1 / this.tileWidth();\n            const levelOrigin = origin.scale(invTileWidth);\n            const hit = raycastGrid(\n                levelOrigin,\n                direction,\n                (tilePos: Vec2) => {\n                    const tiles = this.getAt(tilePos);\n                    if (tiles.some((t) => t.isObstacle)) {\n                        return true;\n                    }\n                    let minHit: RaycastResult = null;\n                    for (const tile of tiles) {\n                        if (tile.has(\"area\")) {\n                            const shape = tile.worldArea();\n                            const hit = shape.raycast(\n                                worldOrigin,\n                                worldDirection,\n                            ) as RaycastResult;\n                            if (hit) {\n                                if (minHit) {\n                                    if (hit.fraction < minHit.fraction) {\n                                        minHit = hit;\n                                        minHit.object = tile;\n                                    }\n                                }\n                                else {\n                                    minHit = hit;\n                                    minHit.object = tile;\n                                }\n                            }\n                        }\n                    }\n                    if (minHit) {\n                        minHit.point = this.fromWorld(minHit.point).scale(\n                            invTileWidth,\n                        );\n                    }\n                    return minHit || false;\n                },\n                64,\n            );\n            if (hit) {\n                hit.point = hit.point.scale(this.tileWidth());\n            }\n            return hit;\n        },\n\n        update(this: GameObj<LevelComp>) {\n            if (spatialMap) {\n                updateSpatialMap(this);\n            }\n        },\n\n        invalidateNavigationMap() {\n            costMap = null;\n            edgeMap = null;\n            connectivityMap = null;\n        },\n\n        onNavigationMapChanged(this: GameObj<LevelComp>, cb: () => void) {\n            return this.on(\"navigationMapChanged\", cb);\n        },\n\n        getTilePath(\n            this: GameObj<LevelComp>,\n            from: Vec2,\n            to: Vec2,\n            opts: PathFindOpt = {},\n        ) {\n            if (!costMap) {\n                createCostMap(this);\n            }\n            if (!edgeMap) {\n                createEdgeMap(this);\n            }\n            if (!connectivityMap) {\n                createConnectivityMap(this);\n            }\n\n            // Tiles are outside the grid\n            if (\n                from.x < 0\n                || from.x >= numColumns\n                || from.y < 0\n                || from.y >= numRows\n            ) {\n                return null;\n            }\n            if (to.x < 0 || to.x >= numColumns || to.y < 0 || to.y >= numRows) {\n                return null;\n            }\n\n            const start = tile2Hash(from);\n            const goal = tile2Hash(to);\n\n            // Tiles are not accessible\n            // If we test the start tile, we may get stuck\n            /*if (costMap[start] === Infinity) {\n            return null\n        }*/\n            if (costMap![goal] === Infinity) {\n                return null;\n            }\n\n            // Same Tile, no waypoints needed\n            if (start === goal) {\n                return [];\n            }\n\n            // Tiles are not within the same section\n            // If we test the start tile when invalid, we may get stuck\n            // TODO: Remove non-null assertion\n            if (\n                connectivityMap![start] != -1\n                && connectivityMap![start] !== connectivityMap![goal]\n            ) {\n                return null;\n            }\n\n            // Find a path\n            interface CostNode {\n                cost: number;\n                node: number;\n            }\n            const frontier = new BinaryHeap<CostNode>((a, b) =>\n                a.cost < b.cost\n            );\n            frontier.insert({ cost: 0, node: start });\n\n            const cameFrom = new Map<number, number>();\n            cameFrom.set(start, start);\n            const costSoFar = new Map<number, number>();\n            costSoFar.set(start, 0);\n\n            while (frontier.length !== 0) {\n                // TODO: Remove non-null assertion\n                const current = frontier.remove()?.node!;\n\n                if (current === goal) {\n                    break;\n                }\n\n                const neighbours = getNeighbours(current, opts.allowDiagonals);\n                for (const next of neighbours) {\n                    const newCost = (costSoFar.get(current) || 0)\n                        + getCost(current, next)\n                        + getHeuristic(next, goal);\n                    if (\n                        !costSoFar.has(next)\n                        // TODO: Remove non-null assertion\n                        || newCost < costSoFar.get(next)!\n                    ) {\n                        costSoFar.set(next, newCost);\n                        frontier.insert({ cost: newCost, node: next });\n                        cameFrom.set(next, current);\n                    }\n                }\n            }\n\n            const path = [];\n            let node = goal;\n            const p = hash2Tile(node);\n            path.push(p);\n\n            while (node !== start) {\n                let cameNode = cameFrom.get(node);\n\n                if (cameNode === undefined) {\n                    throw new Error(\"Bug in pathfinding algorithm\");\n                }\n\n                node = cameNode;\n\n                const p = hash2Tile(node);\n                path.push(p);\n            }\n\n            return path.reverse();\n        },\n\n        getPath(\n            this: GameObj<LevelComp>,\n            from: Vec2,\n            to: Vec2,\n            opts: PathFindOpt = {},\n        ) {\n            const tw = this.tileWidth();\n            const th = this.tileHeight();\n            const path = this.getTilePath(\n                this.pos2Tile(from),\n                this.pos2Tile(to),\n                opts,\n            );\n            if (path) {\n                return [\n                    from,\n                    ...path\n                        .slice(1, -1)\n                        .map((tilePos) =>\n                            tilePos.scale(tw, th).add(tw / 2, th / 2)\n                        ),\n                    to,\n                ];\n            }\n            else {\n                return null;\n            }\n        },\n\n        serialize(): any {\n            const data: any = {};\n            data.tileWidth = opt.tileWidth;\n            data.tileHeight = opt.tileHeight;\n            data.tiles = {}; // { symbol: prefab };\n            // tiles maps symbols to functions returning a list of components\n            // To serialize this, we get the list of components for each symbol, and serialize them\n            for (const key in Object.keys(opt.tiles)) {\n                const compsAndTags = opt.tiles[key](vec2());\n                const comps: any = {};\n                const tags = [];\n                for (const compOrTag of compsAndTags) {\n                    if (typeof compOrTag === \"string\") {\n                        tags.push(compOrTag);\n                    }\n                    else {\n                        if (\"id\" in compOrTag && \"serialize\" in compOrTag) {\n                            comps[compOrTag.id!] =\n                                (compOrTag.serialize as () => any)();\n                        }\n                    }\n                }\n                if (tags.length) comps.tags = tags;\n                data.tiles[key] = comps;\n            }\n            // No idea how to handle this yet\n            data.wildcardTile = {}; // prefab\n            return data;\n        },\n    };\n}\n\nexport function levelFactory(data: any) {\n    const opt: any = { tileWidth: data.tileWidth, tileHeight: data.tileHeight };\n    opt.tiles = {};\n    for (const key in Object.keys(data.tiles)) {\n        const d = data.tiles[key];\n        const tags = d.tags;\n        opt.tiles[key] = (pos: Vec2) => {\n            const comps: Comp[] = Object.keys(d).filter(k => k != \"tags\").map(\n                id => deserializeComp(id, d[id]),\n            );\n            return [...comps, ...tags];\n        };\n    }\n    return level([], opt);\n}\n", "import { BinaryHeap } from \"../utils/binaryheap\";\nimport { Vec2 } from \"./Vec2\";\n\nexport interface Graph {\n    /* Returns the reachable neighbours of this location */\n    getNeighbours(node: number): number[];\n    /* Returns the cost to go from the node to its neighbor */\n    getCost(node: number, neighbor: number): number;\n    /* Returns the cost to go from the node to the goal */\n    getHeuristic(node: number, goal: number): number;\n    /* Returns the path as locations */\n    getPath(from: number, to: number): number[];\n    /* Returns the path as waypoints */\n    getWaypointPath(\n        from: Vec2,\n        to: Vec2,\n        opt: any,\n    ): Vec2[];\n}\n\nfunction buildPath(start: number, goal: number, cameFrom: Map<number, number>) {\n    const path = [];\n    let node = goal;\n    path.push(node);\n    while (node !== start) {\n        // TODO: Remove non-null assertion\n        node = cameFrom.get(node)!;\n        if (node == undefined) return null;\n        path.push(node);\n    }\n    return path.reverse();\n}\n\nexport function breadthFirstSearch(\n    graph: Graph,\n    start: number,\n    goal: number,\n) {\n    let frontier = [];\n    frontier.push(start);\n\n    let cameFrom = new Map<number, number>();\n    cameFrom.set(start, start);\n\n    while (frontier.length !== 0) {\n        let current = frontier.pop();\n\n        if (current === goal) {\n            break;\n        }\n\n        // TODO: Remove non-null assertion\n        const neighbours = graph.getNeighbours(current!);\n        for (let next of neighbours) {\n            if (!cameFrom.get(next)) {\n                frontier.push(next);\n                // TODO: Remove non-null assertion\n                cameFrom.set(next, current!);\n            }\n        }\n    }\n    return buildPath(start, goal, cameFrom);\n}\n\nexport function dijkstraSearch(\n    graph: Graph,\n    start: number,\n    goal: number,\n) {\n    interface CostNode {\n        cost: number;\n        node: number;\n    }\n    const frontier = new BinaryHeap<CostNode>();\n    frontier.insert({ cost: 0, node: start });\n\n    const cameFrom = new Map<number, number>();\n    cameFrom.set(start, start);\n    const costSoFar = new Map<number, number>();\n    costSoFar.set(start, 0);\n\n    while (frontier.length !== 0) {\n        const current = frontier.remove()?.node;\n\n        if (current === goal) {\n            break;\n        }\n\n        // TODO: Remove non-null assertion\n        const neighbours = graph.getNeighbours(current!);\n        for (let next of neighbours) {\n            const newCost = (costSoFar.get(current!) || 0)\n                + graph.getCost(current!, next);\n            if (\n                !costSoFar.has(next)\n                || newCost < costSoFar.get(next)!\n            ) {\n                costSoFar.set(next, newCost);\n                frontier.insert({ cost: newCost, node: next });\n                cameFrom.set(next, current!);\n            }\n        }\n    }\n\n    return buildPath(start, goal, cameFrom);\n}\n\nexport function aStarSearch(\n    graph: Graph,\n    start: number,\n    goal: number,\n): number[] {\n    interface CostNode {\n        cost: number;\n        node: number;\n    }\n    const frontier = new BinaryHeap<CostNode>((a, b) => a.cost < b.cost);\n    frontier.insert({ cost: 0, node: start });\n\n    const cameFrom = new Map<number, number>();\n    cameFrom.set(start, start);\n    const costSoFar = new Map<number, number>();\n    costSoFar.set(start, 0);\n\n    while (frontier.length !== 0) {\n        const current = frontier.remove()?.node;\n\n        if (current === goal) {\n            break;\n        }\n\n        // TODO: Remove non-null assertion\n        const neighbours = graph.getNeighbours(current!);\n        for (let next of neighbours) {\n            const newCost = (costSoFar.get(current!) || 0)\n                + graph.getCost(current!, next)\n                + graph.getHeuristic(next, goal);\n            if (\n                !costSoFar.has(next)\n                || newCost < costSoFar.get(next)!\n            ) {\n                costSoFar.set(next, newCost);\n                frontier.insert({ cost: newCost, node: next });\n                cameFrom.set(next, current!);\n            }\n        }\n    }\n\n    // TODO: Remove non-null assertion\n    return buildPath(start, goal, cameFrom)!;\n}\n", "import { type Graph } from \"../../../math/navigation\";\nimport { Vec2 } from \"../../../math/Vec2\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { PosComp } from \"../transform/pos\";\n\nexport interface PathfinderMapComp extends Comp {\n    /**\n     * Get navigation waypoints to reach the given target from the given origin.\n     */\n    navigate(\n        origin: Vec2,\n        target: Vec2,\n        navigationOpt: any,\n    ): Vec2[] | undefined;\n    /**\n     * The graph to use for navigation.\n     */\n    graph: Graph | undefined;\n}\n\nexport interface PathfinderMapCompOpt {\n    /**\n     * The graph to use for navigation. If null, the ancestors are queried for a pathfinderMap component.\n     */\n    graph?: Graph;\n}\n\nexport function pathfinderMap(\n    opts: PathfinderMapCompOpt,\n): PathfinderMapComp {\n    let graph = opts.graph;\n    return {\n        id: \"pathfinderMap\",\n        get graph(): Graph | undefined {\n            return graph;\n        },\n        set graph(value) {\n            graph = value;\n        },\n        navigate(\n            this: GameObj<PathfinderMapComp>,\n            origin: Vec2,\n            target: Vec2,\n            navigationOpt: any = {},\n        ): Vec2[] | undefined {\n            return graph?.getWaypointPath(origin, target, navigationOpt);\n        },\n    };\n}\n\nexport interface PathfinderComp extends Comp {\n    /**\n     * Get navigation waypoints to reach the given target from the current position.\n     */\n    navigateTo(target: Vec2): Vec2[] | undefined;\n    /**\n     * Get the graph used for navigastion if any.\n     */\n    graph: Graph | undefined;\n}\n\nexport interface PathfinderCompOpt {\n    /**\n     * The graph to use for navigation. If null, the ancestors are queried for a pathfinderMap component.\n     */\n    graph?: Graph;\n    /**\n     * The navigation options depending on the kind of graph used.\n     */\n    navigationOpt?: any;\n}\n\nexport function pathfinder(\n    opts: PathfinderCompOpt,\n): PathfinderComp {\n    let graph = opts.graph;\n    return {\n        id: \"pathfinder\",\n        require: [\"pos\"],\n        navigateTo(\n            this: GameObj<PathfinderComp | PosComp>,\n            target: Vec2,\n        ): Vec2[] | undefined {\n            const graph: Graph | undefined = this.graph;\n            return graph?.getWaypointPath(this.pos, target, opts.navigationOpt);\n        },\n        get graph(): Graph | undefined {\n            if (graph) {\n                return graph;\n            }\n            let parent: GameObj<any> | null =\n                (this as unknown as GameObj<PathfinderComp>).parent;\n            while (parent) {\n                if (parent.has(\"pathfinderMap\")) {\n                    return parent.graph;\n                }\n                parent = parent.parent;\n            }\n            return undefined;\n        },\n        set graph(value) {\n            graph = value;\n        },\n    };\n}\n", "import type { KEventController } from \"../../../events/events\";\nimport type { Vec2 } from \"../../../math/Vec2\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { PosComp } from \"../transform/pos\";\n\nexport interface PatrolComp extends Comp {\n    /**\n     * Path to follow. If null, doesn't move.\n     */\n    waypoints: Vec2[] | undefined;\n    /**\n     * Speed of the movement during patrol.\n     */\n    patrolSpeed: number;\n    /**\n     * Current subgoal, if any.\n     */\n    nextLocation: Vec2 | undefined;\n    /**\n     * Attaches an event handler which is called when using \"stop\" and the end of the path is reached.\n     * @param cb - The event handler called when the patrol finishes.\n     */\n    onPatrolFinished(cb: (objects: GameObj[]) => void): KEventController;\n}\n\ntype PatrolEndBehavior =\n    /* Go directly back to the start */\n    | \"loop\"\n    /* Traveling the reverse path back to the start */\n    | \"ping-pong\"\n    /* Stop */\n    | \"stop\";\n\nexport interface PatrolCompOpt {\n    /**\n     * Path to follow. If null, starts suspended.\n     */\n    waypoints?: Vec2[];\n    /**\n     * Speed of the movement during patrol.\n     */\n    speed?: number;\n    /**\n     * What to do after the last waypoint has been reached.\n     */\n    endBehavior?: PatrolEndBehavior;\n}\n\nexport function patrol(\n    opts: PatrolCompOpt = {},\n): PatrolComp {\n    let waypoints = opts.waypoints;\n    let speed = opts.speed || 100; // Or throw error?\n    let endBehavior = opts.endBehavior || \"stop\"; // Default is stop.\n    let index = 0;\n    let finished = false;\n    return {\n        id: \"patrol\",\n        require: [\"pos\"],\n        get patrolSpeed() {\n            return speed;\n        },\n        set patrolSpeed(value) {\n            speed = value;\n        },\n        get waypoints() {\n            return waypoints;\n        },\n        set waypoints(value) {\n            waypoints = value;\n            index = 0;\n            finished = false;\n        },\n        get nextLocation() {\n            return waypoints ? waypoints[index] : undefined;\n        },\n        update(this: GameObj<PatrolComp | PosComp>) {\n            const nextWaypoint = this.nextLocation;\n            if (!waypoints || !nextWaypoint || finished) return;\n            this.moveTo(nextWaypoint, speed);\n            if (this.pos.sdist(nextWaypoint) < 9) {\n                switch (endBehavior) {\n                    case \"loop\":\n                        index = (index + 1) % waypoints.length;\n                        break;\n                    case \"ping-pong\":\n                        index = index + 1;\n                        if (index == waypoints.length) {\n                            waypoints.reverse();\n                            index = 0;\n                        }\n                        break;\n                    case \"stop\":\n                        if (index < waypoints.length - 1) {\n                            index += 1;\n                        }\n                        else if (!finished) {\n                            finished = true;\n                            this.trigger(\"patrolFinished\", this);\n                        }\n                        break;\n                }\n            }\n        },\n        onPatrolFinished(cb: (objects: GameObj[]) => void) {\n            return (this as unknown as GameObj<PatrolComp>).on(\n                \"patrolFinished\",\n                cb,\n            );\n        },\n    };\n}\n", "import type { KEventController } from \"../../../events/events\";\nimport { Vec2 } from \"../../../math/Vec2\";\nimport { _k } from \"../../../shared\";\nimport type { Comp, GameObj, QueryOpt } from \"../../../types\";\nimport { raycast } from \"../draw/raycast\";\nimport type { PosComp } from \"../transform/pos\";\n\n/**\n * The {@link sentry `sentry()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface SentryComp extends Comp {\n    /**\n     * The direction the sentry is pointing to.\n     */\n    direction?: Vec2;\n    /**\n     * The direction of the sentry as an angle in degrees.\n     */\n    directionAngle?: number;\n    /**\n     * The field of view of the sentry in degrees.\n     */\n    fieldOfView?: number;\n    /**\n     * The objects spotted most recently.\n     */\n    spotted: GameObj<any>[];\n    /**\n     * Attaches an event handler which is called when objects of interest are spotted.\n     * @param cb - The event handler called when objects are spotted.\n     */\n    onObjectsSpotted(cb: (objects: GameObj[]) => void): KEventController;\n    /**\n     * Returns true if the object is within the field of view.\n     * @param obj - The object to test.\n     * @param direction - The direction to look at.\n     * @param fieldOfView - The field of view in degrees.\n     */\n    isWithinFieldOfView(\n        obj: GameObj<PosComp>,\n        direction?: Vec2,\n        fieldOfView?: number,\n    ): boolean;\n    /**\n     * Returns true if there is a line of sight to the object.\n     * @param obj - The object to test.\n     */\n    hasLineOfSight(obj: GameObj<PosComp>): boolean;\n}\n\n/**\n * Options for the {@link sentry `sentry()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface SentryCompOpt {\n    /**\n     * The direction the sentry is pointing to. If undefined, direction has no influence.\n     */\n    direction?: Vec2 | number;\n    /**\n     * The field of view of the sentry in degrees. If undefined, defaults to human fov of 200 degrees.\n     */\n    fieldOfView?: number;\n    /**\n     * If true, line of sight matters. This means that objects which are blocked from view by areas are invisible.\n     */\n    lineOfSight?: boolean;\n    /**\n     * When using line of sight, the objects which are transparent for the ray. Include at least a tag identifying the sentry.\n     */\n    raycastExclude?: string[];\n    /**\n     * The frequency of checking, defaults to every second.\n     */\n    checkFrequency?: number;\n}\n\nexport type SentryCandidatesCb = () => GameObj<any>[];\nexport type SentryCandidates = SentryCandidatesCb | QueryOpt;\n\nexport function sentry(\n    candidates: SentryCandidates,\n    opts: SentryCompOpt = {},\n): SentryComp {\n    const get: SentryCandidatesCb = typeof candidates === \"function\"\n        ? candidates\n        : () => {\n            return _k.game.root.query(candidates);\n        };\n    const checkFrequency = opts.checkFrequency || 1;\n    const directionVector = typeof opts.direction === \"number\"\n        ? Vec2.fromAngle(opts.direction)\n        : opts.direction;\n    let t = 0;\n    return {\n        id: \"sentry\",\n        require: [\"pos\"],\n        direction: typeof opts.direction == \"number\"\n            ? Vec2.fromAngle(opts.direction)\n            : opts.direction,\n        spotted: [],\n        set directionAngle(value: number) {\n            this.direction = value !== undefined\n                ? Vec2.fromAngle(value)\n                : undefined;\n        },\n        get directionAngle(): number | undefined {\n            return this.direction ? this.direction.angle() : undefined;\n        },\n        fieldOfView: opts.fieldOfView || 200, // 200 degrees = Human field of view\n        isWithinFieldOfView(\n            this: GameObj<SentryComp | PosComp>,\n            obj: GameObj<PosComp>,\n            direction?: Vec2,\n            fieldOfView?: number,\n        ) {\n            const dir: Vec2 | undefined = (typeof direction === \"number\"\n                ? Vec2.fromAngle(direction)\n                : direction) || directionVector;\n            const fov: number | undefined = fieldOfView || opts.fieldOfView;\n            if (!dir || !fov || fov >= 360) return true;\n            const halfAngle = fov / 2;\n            return obj.pos\n                && dir.angleBetween(obj.pos.sub(this.pos)) <= halfAngle;\n        },\n        hasLineOfSight(\n            this: GameObj<SentryComp | PosComp>,\n            obj: GameObj<PosComp>,\n        ) {\n            const hit = raycast(\n                this.pos,\n                obj.pos.sub(this.pos),\n                opts.raycastExclude,\n            );\n            return hit != null && hit.object === obj;\n        },\n        update(this: GameObj<SentryComp | PosComp>) {\n            t += _k.app.dt();\n            if (t > checkFrequency) {\n                t -= checkFrequency;\n                let objects = get();\n                // If fieldOfView is used, keep only object within view\n                if (\n                    objects.length && directionVector && this.fieldOfView\n                    && this.fieldOfView < 360\n                ) {\n                    const halfAngle = this.fieldOfView / 2;\n                    objects = objects.filter(o =>\n                        o.pos\n                        && directionVector.angleBetween(o.pos.sub(this.pos))\n                            <= halfAngle\n                    );\n                }\n                // If lineOfSight is used, raycast\n                if (objects.length && opts.lineOfSight) {\n                    objects = objects.filter(o => {\n                        return o.pos\n                            && this.hasLineOfSight(o as GameObj<PosComp>);\n                    });\n                }\n                if (objects.length > 0) {\n                    this.spotted = objects;\n                    this.trigger(\"objectSpotted\", objects);\n                }\n            }\n        },\n        onObjectsSpotted(cb: (objects: GameObj[]) => void) {\n            return (this as unknown as GameObj<SentryComp>).on(\n                \"objectSpotted\",\n                cb,\n            );\n        },\n    };\n}\n", "import type { KEventController } from \"../../../events/events\";\nimport { clamp } from \"../../../math/clamp\";\nimport { Color } from \"../../../math/color\";\nimport { type EaseFunc, easings } from \"../../../math/easings\";\nimport { lerp, type LerpValue } from \"../../../math/lerp\";\nimport { catmullRom, hermiteFirstDerivative, vec2 } from \"../../../math/math\";\nimport { Vec2 } from \"../../../math/Vec2\";\nimport { _k } from \"../../../shared\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { NamedComp } from \"./named\";\n\ntype TimeDirection =\n    /* Animate forward */\n    | \"forward\"\n    /* Animate in reverse */\n    | \"reverse\"\n    /* Alternate animating forward and reverse */\n    | \"ping-pong\";\n\ntype Interpolation =\n    /* No interpolation */\n    | \"none\"\n    /* Linear interpolation */\n    | \"linear\"\n    /* Spherical linear interpolation */\n    | \"slerp\"\n    /* Spline interpolation */\n    | \"spline\";\n\nexport interface AnimateOpt {\n    /**\n     * Duration of the animation in seconds\n     */\n    duration: number;\n    /**\n     * Loops, Default is undefined aka infinite\n     */\n    loops?: number;\n    /**\n     * Behavior when reaching the end of the animation. Default is forward.\n     */\n    direction?: TimeDirection;\n    /**\n     * Easing function. Default is linear time.\n     */\n    easing?: EaseFunc;\n    /**\n     * Interpolation function. Default is linear interpolation.\n     */\n    interpolation?: Interpolation;\n    /**\n     * Timestamps in percent for the given keys, if omitted, keys are equally spaced.\n     */\n    timing?: number[];\n    /**\n     * Easings for the given keys, if omitted, easing is used.\n     */\n    easings?: EaseFunc[];\n}\n\nexport interface AnimateCompOpt {\n    /**\n     * Changes the angle so it follows the motion, requires the rotate component\n     */\n    followMotion?: boolean;\n    /**\n     * The animation is added to the base values of pos, angle, scale and opacity instead of replacing them\n     */\n    relative?: boolean;\n}\n\nexport interface BaseValues {\n    pos: Vec2;\n    angle: number;\n    scale: Vec2;\n    opacity: number;\n}\n\n/**\n * The {@link animate `animate()`} component.\n */\nexport interface AnimateComp extends Comp {\n    /**\n     * Animates a property on this object.\n     * @param name - Name of the property to animate.\n     * @param keys - Keys determining the value at a certain point in time.\n     * @param opts - Options.\n     */\n    animate<T extends LerpValue>(\n        name: string,\n        keys: T[],\n        opts: AnimateOpt,\n    ): void;\n    /**\n     * Removes the animation from the given property.\n     * @param name - Name of the property to remove the animation from.\n     */\n    unanimate(name: string): void;\n    /**\n     * Removes the animations from all properties\n     */\n    unanimateAll(): void;\n    /**\n     * Attaches an event handler which is called when all the animation channels have finished.\n     * @param cb - The event handler called when the animation finishes.\n     */\n    onAnimateFinished(cb: () => void): KEventController;\n    /**\n     * Attaches an event handler which is called when an animation channels has finished.\n     * @param cb - The event handler called when an animation channel finishes.\n     */\n    onAnimateChannelFinished(cb: (name: string) => void): KEventController;\n    /**\n     * Base values for relative animation\n     */\n    base: BaseValues;\n    animation: {\n        /**\n         * Pauses playing\n         */\n        paused: boolean;\n        /**\n         * Move the animation to a specific point in time\n         * @param time - Time to move the animation to in seconds\n         */\n        seek(time: number): void;\n        /**\n         * Returns the duration of the animation\n         */\n        duration: number;\n        /**\n         * Returns the animation with the specified name\n         * @param name - Name of the animation to retrieve\n         */\n        get(name: string): Anim;\n        /**\n         * Play the animation with the specified name\n         * @param name\n         */\n        play(name: string): void;\n        /**\n         * Stop playing the current animation\n         */\n        stop(): void;\n    };\n    /**\n     * Serializes the animation of this object to plain Javascript types\n     */\n    serializeAnimations(): Record<string, AnimationChannels>;\n    /**\n     * Serializes the options of this object to plain Javascript types\n     */\n    serializeAnimationOptions(): { followMotion?: boolean; relative?: boolean };\n}\n\n/**\n * Baseclass for animation channels, only handles parameter normalization and keyframe searches\n */\nclass AnimateChannel {\n    name: string;\n    duration: number;\n    loops: number;\n    direction: TimeDirection;\n    easing: EaseFunc;\n    interpolation: Interpolation;\n    isFinished: boolean;\n    timing: number[] | undefined;\n    easings: EaseFunc[] | undefined;\n    relative: boolean;\n    constructor(name: string, opts: AnimateOpt, relative: boolean) {\n        this.name = name;\n        this.duration = opts.duration;\n        this.loops = opts.loops || 0;\n        this.direction = opts.direction || \"forward\";\n        this.easing = opts.easing || easings.linear;\n        this.interpolation = opts.interpolation || \"linear\";\n        this.isFinished = false;\n        this.timing = opts.timing;\n        this.easings = opts.easings;\n        this.relative = relative;\n    }\n\n    update(obj: GameObj<any>, t: number): boolean {\n        return true;\n    }\n\n    /**\n     * Returns the first key index for the given time, as well as the relative time towards the second key.\n     * @param t - The time in seconds.\n     * @param timing - The optional timestamps in percent.\n     *\n     * @returns The first key index for the given time, as well as the relative time towards the second key.\n     */\n    getLowerKeyIndexAndRelativeTime(\n        t: number,\n        count: number,\n        timing?: number[],\n    ): [number, number, boolean] {\n        const maxIndex = count - 1;\n        // Check how many loops we've made\n        let p = t / this.duration;\n        if (this.loops !== 0 && p >= this.loops) {\n            return [maxIndex, 0, true];\n        }\n        // Split looped and actual time\n        const m = Math.trunc(p);\n        p -= m;\n        // Reverse if needed\n        if (\n            this.direction == \"reverse\"\n            || (this.direction == \"ping-pong\" && (m & 1))\n        ) {\n            p = 1 - p;\n        }\n        // If we have individual keyframe positions, use them, otherwise use uniform spread\n        if (timing) {\n            let index = 0;\n            while (timing[index + 1] !== undefined && timing[index + 1] < p) {\n                index++;\n            }\n            if (index >= maxIndex) {\n                return [maxIndex, 0, true];\n            }\n            return [\n                index,\n                (p - timing[index]) / (timing[index + 1] - timing[index]),\n                false,\n            ];\n        }\n        else {\n            const index = Math.floor((count - 1) * p);\n            return [index, (p - index / maxIndex) * maxIndex, false];\n        }\n    }\n\n    setValue<T>(obj: GameObj<any>, name: string, value: T) {\n        if (this.relative) {\n            switch (name) {\n                case \"pos\":\n                    obj[\"pos\"] = obj.base.pos.add(value as Vec2);\n                    break;\n                case \"angle\":\n                    obj[\"angle\"] = obj.base.angle + (value as number);\n                    break;\n                case \"scale\":\n                    obj[\"scale\"] = obj.base.scale.scale(value as Vec2);\n                    break;\n                case \"opacity\":\n                    obj[\"opacity\"] = obj.base.opacity * (value as number);\n                    break;\n                default:\n                    obj[name] = value;\n            }\n        }\n        else {\n            obj[name] = value;\n        }\n    }\n\n    serialize(): AnimationChannel {\n        const serialization: AnimationChannel = {\n            duration: this.duration,\n            keys: [],\n        };\n        if (this.loops) {\n            serialization.loops = this.loops;\n        }\n        if (this.direction !== \"forward\") {\n            serialization.direction = this.direction;\n        }\n        if (this.easing != easings.linear) {\n            serialization.easing = this.easing.name;\n        }\n        if (this.interpolation !== \"linear\") {\n            serialization.interpolation = this.interpolation;\n        }\n        if (this.timing) {\n            serialization.timing = this.timing;\n        }\n        if (this.easings) {\n            serialization.easings = this.easings.map(e => this.easing.name);\n        }\n        return serialization;\n    }\n}\n\n/**\n * Reflects a point around another point\n * @param a - Point to reflect\n * @param b - Point to reflect around\n *\n * @returns Reflected point\n */\nfunction reflect(a: Vec2, b: Vec2) {\n    return b.add(b.sub(a));\n}\n\n/**\n * Subclass handling number keys\n */\nclass AnimateChannelNumber extends AnimateChannel {\n    keys: number[];\n    constructor(\n        name: string,\n        keys: number[],\n        opts: AnimateOpt,\n        relative: boolean,\n    ) {\n        super(name, opts, relative);\n        this.keys = keys;\n    }\n\n    update(obj: GameObj<any>, t: number): boolean {\n        const [index, alpha, isFinished] = this.getLowerKeyIndexAndRelativeTime(\n            t,\n            this.keys.length,\n            this.timing,\n        );\n        // Return exact value in case of exact hit or no interpolation, otherwise interpolate\n        if (alpha == 0 || this.interpolation === \"none\") {\n            this.setValue(obj, this.name, this.keys[index]);\n        }\n        else {\n            const easing = this.easings ? this.easings[index] : this.easing;\n            this.setValue(\n                obj,\n                this.name,\n                lerp(\n                    this.keys[index],\n                    this.keys[index + 1],\n                    easing(alpha),\n                ),\n            );\n        }\n        return isFinished;\n    }\n\n    serialize() {\n        return Object.assign(super.serialize(), { keys: this.keys });\n    }\n}\n\n/**\n * Subclass handling vector keys\n */\nclass AnimateChannelVec2 extends AnimateChannel {\n    keys: Vec2[];\n    curves?: ((t: number) => Vec2)[];\n    dcurves?: ((t: number) => Vec2)[];\n    constructor(\n        name: string,\n        keys: Vec2[],\n        opts: AnimateOpt,\n        relative: boolean,\n        followMotion: boolean,\n    ) {\n        super(name, opts, relative);\n        this.keys = keys;\n        // If spline interpolation is used, bake splines\n        if (this.interpolation === \"spline\") {\n            this.curves = [];\n            // If following motion, bake derivatives as well\n            if (followMotion) {\n                this.dcurves = [];\n            }\n            for (let i = 0; i < this.keys.length - 1; i++) {\n                const prevKey = this.keys[i];\n                const nextIndex = i + 1;\n                const nextKey = this.keys[nextIndex];\n                const prevPrevKey = i > 0\n                    ? this.keys[i - 1]\n                    : reflect(nextKey, prevKey);\n                const nextNextKey = nextIndex < this.keys.length - 1\n                    ? this.keys[nextIndex + 1]\n                    : reflect(prevKey, nextKey);\n                this.curves.push(\n                    catmullRom(prevPrevKey, prevKey, nextKey, nextNextKey),\n                );\n                if (followMotion) {\n                    this.dcurves?.push(\n                        catmullRom(\n                            prevPrevKey,\n                            prevKey,\n                            nextKey,\n                            nextNextKey,\n                            hermiteFirstDerivative,\n                        ),\n                    );\n                }\n            }\n        }\n    }\n\n    update(obj: GameObj<any>, t: number): boolean {\n        const [index, alpha, isFinished] = this.getLowerKeyIndexAndRelativeTime(\n            t,\n            this.keys.length,\n            this.timing,\n        );\n        // Return exact value in case of exact hit or no interpolation, otherwise interpolate\n        if (alpha == 0 || this.interpolation === \"none\") {\n            this.setValue(obj, this.name, this.keys[index]);\n        }\n        else {\n            const easing = this.easings ? this.easings[index] : this.easing;\n            // Use linear or spline interpolation\n            switch (this.interpolation) {\n                case \"linear\":\n                    this.setValue(\n                        obj,\n                        this.name,\n                        this.keys[index].lerp(\n                            this.keys[index + 1],\n                            easing(alpha),\n                        ),\n                    );\n                    break;\n                case \"slerp\":\n                    this.setValue(\n                        obj,\n                        this.name,\n                        this.keys[index].slerp(\n                            this.keys[index + 1],\n                            easing(alpha),\n                        ),\n                    );\n                    break;\n                case \"spline\":\n                    if (this.curves) {\n                        this.setValue(\n                            obj,\n                            this.name,\n                            this.curves[index](easing(alpha)),\n                        );\n                        if (this.dcurves) {\n                            this.setValue(\n                                obj,\n                                \"angle\",\n                                this.dcurves[index](easing(alpha)).angle(),\n                            );\n                        }\n                        break;\n                    }\n            }\n        }\n        return isFinished;\n    }\n\n    serialize() {\n        return Object.assign(super.serialize(), {\n            keys: this.keys.map(v => [v.x, v.y]),\n        });\n    }\n}\n\n/**\n * Subclass handling color keys\n */\nclass AnimateChannelColor extends AnimateChannel {\n    keys: Color[];\n    constructor(\n        name: string,\n        keys: Color[],\n        opts: AnimateOpt,\n        relative: boolean,\n    ) {\n        super(name, opts, relative);\n        this.keys = keys;\n    }\n\n    update(obj: GameObj<any>, t: number): boolean {\n        const [index, alpha, isFinished] = this.getLowerKeyIndexAndRelativeTime(\n            t,\n            this.keys.length,\n            this.timing,\n        );\n        // Return exact value in case of exact hit or no interpolation, otherwise interpolate\n        if (alpha == 0 || this.interpolation == \"none\") {\n            this.setValue(obj, this.name, this.keys[index]);\n        }\n        else {\n            const easing = this.easings ? this.easings[index] : this.easing;\n            this.setValue(\n                obj,\n                this.name,\n                this.keys[index].lerp(\n                    this.keys[index + 1],\n                    easing(alpha),\n                ),\n            );\n        }\n        return isFinished;\n    }\n\n    serialize() {\n        return Object.assign(super.serialize(), { keys: this.keys });\n    }\n}\n\ntype AnimationChannelKeys = number[] | number[][];\n\ntype AnimationOptions = {\n    duration: number;\n    loops?: number;\n    direction?: TimeDirection;\n    easing?: string;\n    interpolation?: Interpolation;\n    timing?: number[];\n    easings?: string[];\n};\n\ntype AnimationChannel = {\n    keys: AnimationChannelKeys;\n} & AnimationOptions;\n\ntype AnimationChannels = Record<string, AnimationChannel>;\n\ntype Animation = {\n    name: string;\n    followMotion?: boolean;\n    relative?: boolean;\n    anims?: Record<string, AnimationChannels>;\n    children?: Animation[];\n};\n\nclass Anim {\n    name: string;\n    opts: AnimateCompOpt;\n    channels: AnimateChannel[] = [];\n    isFinished: boolean = false;\n\n    constructor(name: string, opts: AnimateCompOpt) {\n        this.name = name;\n        this.opts = opts;\n    }\n\n    get duration() {\n        return this.channels.reduce(\n            (acc, channel) => Math.max(channel.duration, acc),\n            0,\n        );\n    }\n\n    // Add channel\n    animate<T extends LerpValue>(\n        name: string,\n        keys: T[],\n        opts: AnimateOpt,\n    ) {\n        this.unanimate(name);\n        if (typeof keys[0] === \"number\") {\n            this.channels.push(\n                new AnimateChannelNumber(\n                    name,\n                    keys as number[],\n                    opts,\n                    this.opts.relative || false,\n                ),\n            );\n        }\n        else if (keys[0] instanceof Vec2) {\n            this.channels.push(\n                new AnimateChannelVec2(\n                    name,\n                    keys as Vec2[],\n                    opts,\n                    this.opts.relative || false,\n                    name === \"pos\" && (this.opts.followMotion || false),\n                ),\n            );\n        }\n        else if (keys[0] instanceof Color) {\n            this.channels.push(\n                new AnimateChannelColor(\n                    name,\n                    keys as Color[],\n                    opts,\n                    this.opts.relative || false,\n                ),\n            );\n        }\n    }\n\n    // Remove channel\n    unanimate(name: string) {\n        const index = this.channels.findIndex(c => c.name === name);\n        if (index >= 0) {\n            this.channels.splice(index, 1);\n        }\n    }\n\n    unanimateAll() {\n        this.channels.length = 0;\n    }\n\n    // Play methods\n    play() {\n        this.isFinished = false;\n    }\n\n    stop() {\n        this.isFinished = true;\n    }\n\n    serialize() {\n        return this.channels.reduce(\n            (o: Record<string, AnimationChannel>, c) => {\n                o[c.name] = c.serialize();\n                return o;\n            },\n            {},\n        );\n    }\n\n    // Internal update\n    _update(obj: GameObj<AnimateComp>, t: number) {\n        if (this.isFinished) {\n            return;\n        }\n        let allFinished: boolean = true;\n        let localFinished: boolean;\n        for (const c of this.channels) {\n            localFinished = c.update(obj, t);\n            if (localFinished && !c.isFinished) {\n                c.isFinished = true;\n                obj.trigger(\n                    \"animateChannelFinished\",\n                    c.name,\n                );\n            }\n            allFinished &&= localFinished;\n        }\n        if (allFinished) {\n            this.isFinished = true;\n            obj.trigger(\n                \"animateFinished\",\n            );\n        }\n    }\n}\n\nexport function animate(gopts: AnimateCompOpt = {}): AnimateComp {\n    const anims: Anim[] = [];\n    let currentAnim: Anim | null = null;\n    let t = 0;\n    let isFinished = false;\n    return {\n        id: \"animate\",\n        require: gopts.followMotion ? [\"rotate\"] : undefined,\n        base: {\n            pos: vec2(0, 0),\n            angle: 0,\n            scale: vec2(1, 1),\n            opacity: 1,\n        },\n        animation: {\n            paused: false,\n            seek(time: number) {\n                t = clamp(time, 0, this.duration);\n                if (currentAnim) {\n                    currentAnim.play();\n                }\n            },\n            get duration() {\n                return currentAnim?.duration || 0;\n            },\n            get(name: string): Anim {\n                let anim = anims.find(anim => anim.name === name);\n                if (!anim) {\n                    anim = new Anim(name, gopts);\n                    anims.push(anim);\n                }\n                return anim;\n            },\n            play(name: string = \"\") {\n                currentAnim = anims.find(anim => anim.name === name) || null;\n                if (!currentAnim) {\n                    throw new Error(\n                        `Trying to play unknown animation called ${name}`,\n                    );\n                }\n                t = 0;\n                currentAnim.play();\n            },\n            stop() {\n                if (currentAnim) {\n                    currentAnim.stop();\n                }\n            },\n        },\n\n        // Component events\n        add(this: GameObj<AnimateComp>) {\n            if (gopts.relative) {\n                if (this.has(\"pos\")) {\n                    this.base.pos = (this as any).pos.clone();\n                }\n                if (this.has(\"rotate\")) {\n                    this.base.angle = (this as any).angle;\n                }\n                if (this.has(\"scale\")) {\n                    this.base.scale = (this as any).scale.clone();\n                }\n                if (this.has(\"opacity\")) {\n                    this.base.opacity = (this as any).opacity;\n                }\n            }\n        },\n        update(this: GameObj<AnimateComp>) {\n            t += _k.app.dt();\n            if (currentAnim || (currentAnim = this.animation.get(\"\"))) {\n                // debug.log(`playing ${currentAnim.name}`)\n                currentAnim._update(this, t);\n            }\n        },\n\n        // The following methods work on the default animation (named \"\") for compatibility\n        animate<T extends LerpValue>(\n            name: string,\n            keys: T[],\n            opts: AnimateOpt,\n        ) {\n            this.animation.get(\"\").animate(name, keys, opts);\n        },\n        unanimate(name: string) {\n            this.animation.get(\"\").unanimate(name);\n        },\n        unanimateAll() {\n            this.animation.get(\"\").unanimateAll();\n        },\n\n        // Play events\n        onAnimateFinished(cb: () => void) {\n            return (this as unknown as GameObj<any>).on(\"animateFinished\", cb);\n        },\n        onAnimateChannelFinished(cb: (name: string) => void) {\n            return (this as unknown as GameObj<any>).on(\n                \"animateChannelFinished\",\n                cb,\n            );\n        },\n\n        // Serialization\n        serializeAnimations() {\n            return anims.reduce((o: any, anim) => {\n                o[anim.name] = anim.serialize();\n                return o;\n            }, {});\n        },\n        serializeAnimationOptions() {\n            const options: any = {};\n            if (gopts.followMotion) {\n                options.followMotion = true;\n            }\n            if (gopts.relative) {\n                options.relative = true;\n            }\n            return options;\n        },\n    };\n}\n\n/**\n * Serializes an animation to javascript objects for serialization to JSON.\n * @param obj - The root object to serialize from.\n * @param name - Optional name of the root object.\n *\n * @returns A javascript object serialization of the animation.\n */\nexport function serializeAnimation(obj: GameObj<any>, name: string): any {\n    let serialization: Animation = { name: obj.name || name };\n    if (obj.has(\"animate\")) {\n        serialization.anims = (obj as GameObj<AnimateComp>)\n            .serializeAnimations();\n        console.log(serialization);\n        Object.assign(\n            serialization,\n            (obj as GameObj<NamedComp | AnimateComp>)\n                .serializeAnimationOptions(),\n        );\n    }\n    if (obj.children.length > 0) {\n        serialization.children = obj.children.filter(o => o.has(\"named\")).map(\n            o => serializeAnimation(o, o.name),\n        );\n    }\n    return serialization;\n}\n\nfunction deserializeKeys(keys: AnimationChannelKeys) {\n    if (typeof keys[0] == \"number\") {\n        return keys;\n    }\n    else if (Array.isArray(keys[0])) {\n        if (keys[0].length == 2) {\n            return (keys as number[][]).map(k => new Vec2(k[0], k[1]));\n        }\n        else if (keys[0].length == 3) {\n            return (keys as number[][]).map(k => new Color(k[0], k[1], k[2]));\n        }\n    }\n}\n\nfunction deserializeOptions(options: AnimationOptions) {\n    if (options.easing) {\n        options.easing = (easings as any)[options.easing];\n    }\n    if (options.easings) {\n        options.easings = options.easings.map(e => (easings as any)[e]);\n    }\n    return options;\n}\n\n/**\n * Applies the animation to this object and its named children\n * @param obj - The root object to deserialize to.\n * @param animation - A javascript object serialization of the animation.\n */\nexport function applyAnimation(obj: GameObj<any>, animation: Animation) {\n    // TODO: test this\n    obj.use(animate({\n        followMotion: animation.followMotion,\n        relative: animation.relative,\n    }));\n    if (animation.anims) {\n        for (const name in animation.anims) {\n            const anim = obj.animation.get(name);\n            const propchannels = animation.anims[name];\n            for (const prop in propchannels) {\n                const channel = propchannels[prop];\n                obj.animate(\n                    prop,\n                    deserializeKeys(channel.keys),\n                    deserializeOptions(channel),\n                );\n            }\n        }\n    }\n    if (animation.children) {\n        for (const childAnimation of animation.children) {\n            const q = obj.query({ name: childAnimation.name });\n            if (q.length != 0) {\n                applyAnimation(q[0], childAnimation);\n            }\n        }\n    }\n}\n", "import { _k } from \"../../../shared\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { PosComp } from \"../transform/pos\";\n\n/**\n * The {@link fakeMouse `fakeMouse()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface FakeMouseComp extends Comp {\n    /**\n     * Whether the fake mouse is pressed.\n     */\n    get isPressed(): boolean;\n    /**\n     * Trigger press (onClick).\n     */\n    press(): void;\n    /**\n     * Trigger release.\n     */\n    release(): void;\n    /**\n     * Register an event that runs when the fake mouse performs a click.\n     */\n    onPress(action: () => void): void;\n    /**\n     * Register an event that runs when the fake mouse releases.\n     */\n    onRelease(action: () => void): void;\n}\n\n/**\n * Options for the {@link fakeMouse `fakeMouse()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport type FakeMouseOpt = {\n    /**\n     * Whether the fake mouse should follow the real mouse. Defaults to `true`.\n     */\n    followMouse?: boolean;\n};\n\ntype FakeMouse = GameObj<FakeMouseComp | PosComp>;\n\nexport const fakeMouse = (opt: FakeMouseOpt = {\n    followMouse: true,\n}): FakeMouseComp => {\n    let isPressed = false;\n\n    return {\n        id: \"fakeMouse\",\n        require: [\"pos\"],\n        add(this: GameObj<FakeMouse>) {\n            if (_k.game.fakeMouse) {\n                throw new Error(\"Fake mouse already exists\");\n            }\n\n            _k.game.fakeMouse = this;\n        },\n        destroy() {\n            _k.game.fakeMouse = null;\n        },\n        get isPressed() {\n            return isPressed;\n        },\n        update(this: FakeMouse) {\n            if (!opt.followMouse) return;\n\n            if (_k.app.isMouseMoved()) {\n                this.pos = _k.app.mousePos();\n            }\n        },\n        press(this: FakeMouse) {\n            isPressed = true;\n            this.trigger(\"press\");\n        },\n        release(this: FakeMouse) {\n            isPressed = false;\n            this.trigger(\"release\");\n        },\n        onPress(this: FakeMouse, action) {\n            this.on(\"press\", action);\n        },\n        onRelease(this: FakeMouse, action) {\n            this.on(\"release\", action);\n        },\n    };\n};\n", "import type { KEventController } from \"../../../events/events\";\nimport { clamp } from \"../../../math/clamp\";\nimport type { Comp, GameObj } from \"../../../types\";\n\n/**\n * The serialized {@link health `health()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializeHealthComp {\n    hp: number;\n    maxHP: number;\n}\n\n/**\n * The {@link health `health()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface HealthComp extends Comp {\n    /**\n     * Current health points. Setting it to a lower or higher value will trigger onHurt() and onHeal().\n     * Setting it to a value greater than maxHP will set it to maxHP.\n     * Setting it to a value less than 0 will set it to 0 and trigger onDeath().\n     */\n    hp: number;\n    /**\n     * Max amount of HP.\n     */\n    maxHP: number;\n    /**\n     * Whether hp is 0.\n     */\n    readonly dead: boolean;\n    /**\n     * Register an event that runs when the hp is lowered.\n     *\n     * @since v2000.1\n     */\n    onHurt(action: (deltaHP?: number) => void): KEventController;\n    /**\n     * Register an event that runs when the hp is increased.\n     *\n     * @since v2000.1\n     */\n    onHeal(action: (deltaHP?: number) => void): KEventController;\n    /**\n     * Register an event that runs when object's HP becomes zero.\n     *\n     * @since v2000.1\n     */\n    onDeath(action: () => void): KEventController;\n    serialize(): SerializeHealthComp;\n}\n\nexport function health(\n    hp: number,\n    maxHP?: number,\n): HealthComp {\n    if (hp == null) {\n        throw new Error(\"health() requires the initial amount of hp\");\n    }\n\n    return {\n        id: \"health\",\n        add() {\n            if (!this.maxHP) this.maxHP = this.hp;\n        },\n        get hp() {\n            return hp;\n        },\n        set hp(val: number) {\n            const origHP = this.hp;\n            hp = this.maxHP ? clamp(val, 0, this.maxHP) : val;\n            if (hp < origHP) {\n                (this as unknown as GameObj).trigger(\"hurt\", origHP - hp);\n            }\n            else if (hp > origHP) {\n                (this as unknown as GameObj).trigger(\"heal\", origHP - hp);\n            }\n            if (hp <= 0) (this as unknown as GameObj).trigger(\"death\");\n        },\n        get maxHP() {\n            return maxHP as number;\n        },\n        set maxHP(val: number) {\n            maxHP = val;\n        },\n        get dead() {\n            return this.hp <= 0;\n        },\n        onHurt(\n            this: GameObj,\n            action: (deltaHP?: number) => void,\n        ): KEventController {\n            return this.on(\"hurt\", action);\n        },\n        onHeal(\n            this: GameObj,\n            action: (deltaHP?: number) => void,\n        ): KEventController {\n            return this.on(\"heal\", action);\n        },\n        onDeath(this: GameObj, action: () => void): KEventController {\n            return this.on(\"death\", action);\n        },\n        inspect() {\n            return `health: ${hp}`;\n        },\n        serialize() {\n            return {\n                hp: this.hp,\n                maxHP: this.maxHP ?? this.hp,\n            };\n        },\n    };\n}\n", "import { easings } from \"../../../math/easings\";\nimport { _k } from \"../../../shared\";\nimport type { EmptyComp, GameObj } from \"../../../types\";\nimport type { OpacityComp } from \"../draw/opacity\";\n\n/**\n * The {@link lifespan `lifespan()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface LifespanCompOpt {\n    /**\n     * Fade out duration (default 0 which is no fade out).\n     */\n    fade?: number;\n}\n\nexport function lifespan(time: number, opt: LifespanCompOpt = {}): EmptyComp {\n    if (time == null) {\n        throw new Error(\"lifespan() requires time\");\n    }\n    const fade = opt.fade ?? 0;\n    return {\n        id: \"lifespan\",\n        require: [\"opacity\"],\n        add(this: GameObj<OpacityComp>) {\n            _k.game.root.wait(time, () => {\n                this.opacity = this.opacity ?? 1;\n\n                if (fade > 0) {\n                    _k.game.root.tween(\n                        this.opacity,\n                        0,\n                        fade,\n                        (a) => this.opacity = a,\n                        easings.linear,\n                    ).onEnd(() => {\n                        this.destroy();\n                    });\n                }\n                else {\n                    this.destroy();\n                }\n            });\n        },\n    };\n}\n", "import type { Comp } from \"../../../types\";\n\n/**\n * The serialized {@link color `color()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializeNameComp {\n    name: string;\n}\n\n/**\n * The {@link named `named()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface NamedComp extends Comp {\n    /** The name assigned to this object. */\n    name: string;\n    serialize(): SerializeNameComp;\n}\n\nexport function named(name: string): NamedComp {\n    return {\n        id: \"named\",\n        name,\n        serialize() {\n            return {\n                name: name,\n            };\n        },\n    };\n}\n\nexport function nameFactory(data: any) {\n    return named(data.name);\n}\n", "import { KEvent, KEventController } from \"../../../events/events\";\nimport type { Comp } from \"../../../types\";\n\n/**\n * The serialized {@link state `state()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializeStateComp {\n    initState: string;\n    stateList: string[];\n    transitions: Record<string, string | string[]>;\n}\n\n/**\n * The {@link state `state()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface StateComp<T extends string> extends Comp {\n    /**\n     * Current state.\n     */\n    state: T;\n    /**\n     * Enter a state, trigger onStateEnd for previous state and onStateEnter for the new State state.\n     */\n    enterState: (state: T, ...args: any) => void;\n    /**\n     * Register event that runs once when a specific state transition happens. Accepts arguments passed from `enterState(name, ...args)`.\n     *\n     * @since v2000.2\n     */\n    onStateTransition(\n        from: T,\n        to: T,\n        action: () => void,\n    ): KEventController;\n    /**\n     * Register event that runs once when enters a specific state. Accepts arguments passed from `enterState(name, ...args)`.\n     */\n    onStateEnter: (\n        state: T,\n        action: (...args: any) => void,\n    ) => KEventController;\n    /**\n     * Register an event that runs once when leaves a specific state.\n     */\n    onStateEnd: (state: T, action: () => void) => KEventController;\n    /**\n     * Register an event that runs every frame when in a specific state.\n     */\n    onStateUpdate: (state: T, action: () => void) => KEventController;\n    /**\n     * Register an event that runs every frame when in a specific state.\n     */\n    onStateDraw: (state: T, action: () => void) => KEventController;\n    serialize(): SerializeStateComp;\n}\n\nexport function state<T extends string>(\n    initState: T,\n    stateList?: T[],\n    transitions?: Record<T, T | T[]>,\n): StateComp<T> {\n    if (!initState) {\n        throw new Error(\"state() requires an initial state\");\n    }\n\n    const events: { [k: string]: any } = {};\n\n    function initStateEvents(state: string) {\n        if (!events[state]) {\n            events[state] = {\n                enter: new KEvent(),\n                end: new KEvent(),\n                update: new KEvent(),\n                draw: new KEvent(),\n            };\n        }\n    }\n\n    function on(event: string, state: string, action: () => void) {\n        initStateEvents(state);\n        return events[state][event].add(action);\n    }\n\n    function trigger(event: string, state: string, ...args: any[]) {\n        initStateEvents(state);\n        events[state][event].trigger(...args);\n    }\n\n    let didFirstEnter = false;\n\n    return {\n        id: \"state\",\n        state: initState,\n\n        enterState(state, ...args) {\n            didFirstEnter = true;\n\n            if (stateList && !stateList.includes(state)) {\n                throw new Error(`State not found: ${state}`);\n            }\n\n            const oldState = this.state;\n\n            if (transitions) {\n                // check if the transition is legal, if transition graph is defined\n                if (!transitions?.[oldState]) {\n                    return;\n                }\n\n                const available = typeof transitions[oldState] === \"string\"\n                    ? [transitions[oldState]]\n                    : transitions[oldState] as string[];\n\n                if (!available.includes(state)) {\n                    throw new Error(\n                        `Cannot transition state from \"${oldState}\" to \"${state}\". Available transitions: ${\n                            available.map((s) => `\"${s}\"`).join(\", \")\n                        }`,\n                    );\n                }\n            }\n\n            trigger(\"end\", oldState, ...args);\n            this.state = state;\n            trigger(\"enter\", state, ...args);\n            trigger(\"enter\", `${oldState} -> ${state}`, ...args);\n        },\n\n        onStateTransition(\n            from: string,\n            to: string,\n            action: () => void,\n        ): KEventController {\n            return on(\"enter\", `${from} -> ${to}`, action);\n        },\n\n        onStateEnter(state: string, action: () => void): KEventController {\n            return on(\"enter\", state, action);\n        },\n\n        onStateUpdate(state: string, action: () => void): KEventController {\n            return on(\"update\", state, action);\n        },\n\n        onStateDraw(state: string, action: () => void): KEventController {\n            return on(\"draw\", state, action);\n        },\n\n        onStateEnd(state: string, action: () => void): KEventController {\n            return on(\"end\", state, action);\n        },\n\n        update() {\n            // execute the enter event for initState\n            if (!didFirstEnter) {\n                trigger(\"enter\", initState);\n                didFirstEnter = true;\n            }\n            trigger(\"update\", this.state);\n        },\n\n        draw() {\n            trigger(\"draw\", this.state);\n        },\n\n        inspect() {\n            return `state: ${this.state}`;\n        },\n\n        serialize() {\n            const data: any = {};\n            data.initState = initState;\n            if (stateList) data.stateList = stateList.slice();\n            if (transitions) data.transitions = Object.assign({}, transitions);\n            return data;\n        },\n    };\n}\n\nexport function stateFactory(data: SerializeStateComp) {\n    return state(data.initState, data.stateList, data.transitions);\n}\n", "import type { Comp } from \"../../../types\";\n\n/**\n * The serialized {@link stay `stay()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializeStayComp {\n    scenesToStay: string[];\n}\n\n/**\n * The {@link stay `stay()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface StayComp extends Comp {\n    /**\n     * If the obj should not be destroyed on scene switch.\n     */\n    stay: boolean;\n    /**\n     * Array of scenes that the obj will stay on.\n     */\n    scenesToStay?: string[];\n    serialize(): SerializeStayComp;\n}\n\nexport function stay(scenesToStay?: string[]): StayComp {\n    return {\n        id: \"stay\",\n        stay: true,\n        scenesToStay,\n        serialize() {\n            return {\n                scenesToStay: scenesToStay ?? [],\n            };\n        },\n    };\n}\n\nexport function stayFactory(data: SerializeStayComp) {\n    return stay(data.scenesToStay);\n}\n", "import type { KEventController } from \"../../../events/events\";\nimport { _k } from \"../../../shared\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { TextComp } from \"../draw/text\";\n\n/**\n * The {@link textInput `textInput()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface TextInputComp extends Comp {\n    /**\n     * Enable the text input array to be modified by user input.\n     *\n     * Setting this to true is the same as calling focus(), and will\n     * clear focus on all other active textInput objects.\n     */\n    hasFocus: boolean;\n    /**\n     * The \"real\" text that the user typed, without any escaping.\n     */\n    typedText: string;\n    /**\n     * Focuses this text input so that it will receive input, and\n     * removes focus from all other text inputs.\n     */\n    focus(): void;\n    /**\n     * Event that runs when the text input gains focus.\n     */\n    onFocus(cb: () => void): KEventController;\n    /**\n     * Event that runs when the text input loses focus.\n     */\n    onBlur(cb: () => void): KEventController;\n    /**\n     * Event that runs when the user types any character in the text input\n     * and causes its value to change.\n     *\n     * This runs *after* the display text is updated with the escaped version\n     * of the typed text, so in the event handler you can override the\n     * displayed text with another version (like if you want to add syntax\n     * highlighting or something). See also {@link TextComp.text}.\n     */\n    onInput(cb: () => void): KEventController;\n    /**\n     * Runs immediately after onBlur if the value has changed while the text\n     * input has been focused.\n     */\n    onChange(cb: () => void): KEventController;\n}\n\nexport function textInput(\n    hasFocus: boolean = true,\n    maxInputLength?: number,\n): TextInputComp {\n    let charEv: KEventController;\n    let backEv: KEventController;\n    let origText: string = \"\";\n    return {\n        id: \"textInput\",\n        get hasFocus() {\n            return hasFocus;\n        },\n        set hasFocus(newValue) {\n            if (hasFocus === newValue) return;\n            hasFocus = newValue;\n            (this as any as GameObj).trigger(hasFocus ? \"focus\" : \"blur\");\n            if (hasFocus) {\n                origText = this.typedText;\n                _k.game.allTextInputs.forEach(i => {\n                    // @ts-ignore\n                    if (i !== this) {\n                        i.hasFocus = false;\n                    }\n                });\n            }\n            else if (origText !== this.typedText) {\n                (this as any as GameObj).trigger(\"change\");\n            }\n        },\n        require: [\"text\"],\n        typedText: \"\",\n        add(this: GameObj<TextComp & TextInputComp>) {\n            _k.game.allTextInputs.add(this);\n            const flip = () => {\n                this.text = this.typedText.replace(/([\\[\\\\])/g, \"\\\\$1\");\n                this.trigger(\"input\");\n            };\n\n            charEv = _k.app.onCharInput((character) => {\n                if (\n                    this.hasFocus\n                    && (!maxInputLength\n                        || this.typedText.length < maxInputLength)\n                ) {\n                    if ((_k.app.isKeyDown(\"shift\") !== _k.app.state.capsOn)) {\n                        this.typedText += character.toUpperCase();\n                    }\n                    else {\n                        this.typedText += character;\n                    }\n                    flip();\n                }\n            });\n\n            backEv = _k.app.onKeyPressRepeat(\"backspace\", () => {\n                if (this.hasFocus) {\n                    this.typedText = this.typedText.slice(0, -1);\n                    flip();\n                }\n            });\n        },\n        destroy(this: GameObj<TextInputComp>) {\n            charEv.cancel();\n            backEv.cancel();\n            _k.game.allTextInputs.delete(this);\n        },\n        focus() {\n            this.hasFocus = true;\n        },\n        onFocus(this: GameObj, cb) {\n            return this.on(\"focus\", cb);\n        },\n        onBlur(this: GameObj, cb) {\n            return this.on(\"blur\", cb);\n        },\n        onInput(this: GameObj, cb) {\n            return this.on(\"input\", cb);\n        },\n        onChange(this: GameObj, cb) {\n            return this.on(\"change\", cb);\n        },\n    };\n}\n", "import { KEvent } from \"../../../events/events\";\nimport { easings } from \"../../../math/easings\";\nimport { lerp, type LerpValue } from \"../../../math/lerp\";\nimport { _k } from \"../../../shared\";\nimport type { Comp, GameObj } from \"../../../types\";\n\n/**\n * @group Timer\n */\nexport interface TimerController {\n    /**\n     * The time left for the callback to be called.\n     */\n    timeLeft: number;\n    /**\n     * If the event handler is paused.\n     */\n    paused: boolean;\n    /**\n     * Cancel the event handler.\n     */\n    cancel(): void;\n    /**\n     * Register an event when finished.\n     */\n    onEnd(action: () => void): void;\n    then(action: () => void): TimerController;\n}\n\n/**\n * Event controller for tween.\n *\n * @group Timer\n */\nexport interface TweenController extends TimerController {\n    /**\n     * The current time in the duration of the tween\n     */\n    currentTime: number;\n    /**\n     * Finish the tween now and cancel.\n     */\n    finish(): void;\n}\n\n/**\n * The {@link timer `timer()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface TimerComp extends Comp {\n    /**\n     * The maximum number of loops per frame allowed,\n     * to keep loops with sub-frame intervals from freezing the game.\n     */\n    maxLoopsPerFrame: number;\n    /**\n     * Run the callback after n seconds.\n     */\n    wait(time: number, action?: () => void): TimerController;\n    /**\n     * Run the callback every n seconds.\n     *\n     * If waitFirst is false (the default), the function will\n     * be called once on the very next frame, and then loop like normal.\n     *\n     * @since v3000.0\n     */\n    loop(\n        time: number,\n        action: () => void,\n        maxLoops?: number,\n        waitFirst?: boolean,\n    ): TimerController;\n    /**\n     * Tweeeeen! Note that this doesn't specifically mean tweening on this object's property, this just registers the timer on this object, so the tween will cancel with the object gets destroyed, or paused when obj.paused is true.\n     *\n     * @since v3000.0\n     */\n    tween<V extends LerpValue>(\n        from: V,\n        to: V,\n        duration: number,\n        setValue: (value: V) => void,\n        easeFunc?: (t: number) => number,\n    ): TweenController;\n}\n\nexport function timer(maxLoopsPerFrame: number = 1000): TimerComp {\n    return {\n        id: \"timer\",\n        maxLoopsPerFrame,\n        loop(\n            this: GameObj<TimerComp>,\n            time: number,\n            action: () => void,\n            count: number = Infinity,\n            waitFirst: boolean = false,\n        ): TimerController {\n            let t: number = waitFirst ? 0 : time;\n            let onEndEvents = new KEvent();\n            const ev = this.onUpdate(() => {\n                t += _k.app.state.dt;\n                for (let i = 0; t >= time && i < this.maxLoopsPerFrame; i++) {\n                    count--;\n                    action();\n                    t -= time;\n                    if (count <= 0) {\n                        ev.cancel();\n                        onEndEvents.trigger();\n                        return;\n                    }\n                }\n            });\n            return {\n                get timeLeft() {\n                    return t;\n                },\n                set timeLeft(val: number) {\n                    t = val;\n                },\n                get paused() {\n                    return ev.paused;\n                },\n                set paused(p) {\n                    ev.paused = p;\n                },\n                cancel: ev.cancel,\n                onEnd(f) {\n                    onEndEvents.add(f);\n                },\n                then(f) {\n                    onEndEvents.add(f);\n                    return this;\n                },\n            };\n        },\n        wait(\n            this: GameObj<TimerComp>,\n            time: number,\n            action?: () => void,\n        ): TimerController {\n            return this.loop(time, action ?? (() => {}), 1, true);\n        },\n        tween<V extends LerpValue>(\n            this: GameObj<TimerComp>,\n            from: V,\n            to: V,\n            duration: number,\n            setValue: (value: V) => void,\n            easeFunc = easings.linear,\n        ) {\n            let curTime = 0;\n            const onEndEvents: Array<() => void> = [];\n            const ev = this.onUpdate(() => {\n                curTime += _k.app.state.dt;\n                const t = Math.min(curTime / duration, 1);\n                setValue(lerp(from, to, easeFunc(t)));\n                if (t === 1) {\n                    ev.cancel();\n                    setValue(to);\n                    onEndEvents.forEach((action) => action());\n                }\n            });\n            return {\n                get currentTime() {\n                    return curTime;\n                },\n                set currentTime(val) {\n                    curTime = val;\n                },\n                get timeLeft() {\n                    return duration - curTime;\n                },\n                set timeLeft(val: number) {\n                    curTime = duration - val;\n                },\n                get paused() {\n                    return ev.paused;\n                },\n                set paused(p) {\n                    ev.paused = p;\n                },\n                onEnd(action: () => void) {\n                    onEndEvents.push(action);\n                },\n                then(action: () => void) {\n                    this.onEnd(action);\n                    return this;\n                },\n                cancel() {\n                    ev.cancel();\n                },\n                finish() {\n                    ev.cancel();\n                    setValue(to);\n                    onEndEvents.forEach((action) => action());\n                },\n            };\n        },\n    };\n}\n", "import { DEF_ANCHOR } from \"../../../constants/general\";\nimport type { KEventController } from \"../../../events/events\";\nimport { toWorld } from \"../../../game/camera\";\nimport { anchorPt } from \"../../../gfx/anchor\";\nimport { drawCircle } from \"../../../gfx/draw/drawCircle\";\nimport { drawPolygon } from \"../../../gfx/draw/drawPolygon\";\nimport { drawRect } from \"../../../gfx/draw/drawRect\";\nimport { multTranslate, popTransform, pushTransform } from \"../../../gfx/stack\";\nimport { rgb } from \"../../../math/color\";\nimport { Circle, Polygon, Rect, shapeFactory, vec2 } from \"../../../math/math\";\nimport { Vec2 } from \"../../../math/Vec2\";\nimport { _k } from \"../../../shared\";\nimport type {\n    Comp,\n    Cursor,\n    GameObj,\n    MouseButton,\n    Shape,\n    Tag,\n} from \"../../../types\";\nimport { isFixed } from \"../../entity/utils\";\nimport type { Collision } from \"../../systems/Collision\";\nimport type { AnchorComp } from \"../transform/anchor\";\nimport type { FixedComp } from \"../transform/fixed\";\nimport type { PosComp } from \"../transform/pos\";\n\nexport function usesArea() {\n    return _k.game.areaCount > 0;\n}\n\n/**\n * The {@link area `area()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface AreaComp extends Comp {\n    /**\n     * Collider area info.\n     */\n    area: {\n        /**\n         * If we use a custom shape over render shape.\n         */\n        shape: Shape | null;\n        /**\n         * Area scale.\n         */\n        scale: Vec2;\n        /**\n         * Area offset.\n         */\n        offset: Vec2;\n        /**\n         * Cursor on hover.\n         */\n        cursor: Cursor | null;\n    };\n    /**\n     * If this object should ignore collisions against certain other objects.\n     *\n     * @since v3000.0\n     */\n    collisionIgnore: Tag[];\n    /**\n     * Restitution (\"bounciness\") of the object.\n     */\n    restitution?: number;\n    /**\n     * Friction of the object.\n     */\n    friction?: number;\n    /**\n     * If was just clicked on last frame.\n     */\n    isClicked(): boolean;\n    /**\n     * If is being hovered on.\n     */\n    isHovering(): boolean;\n    /**\n     * Check collision with another game obj.\n     *\n     * @since v3000.0\n     */\n    checkCollision(other: GameObj<AreaComp>): Collision | null;\n    /**\n     * Get all collisions currently happening.\n     *\n     * @since v3000.0\n     */\n    getCollisions(): Collision[];\n    /**\n     * If is currently colliding with another game obj.\n     */\n    isColliding(o: GameObj<AreaComp>): boolean;\n    /**\n     * If is currently overlapping with another game obj (like isColliding, but will return false if the objects are just touching edges).\n     */\n    isOverlapping(o: GameObj<AreaComp>): boolean;\n    /**\n     * Register an event runs when clicked.\n     *\n     * @since v2000.1\n     */\n    onClick(f: () => void, btn?: MouseButton): KEventController;\n    /**\n     * Register an event runs once when hovered.\n     *\n     * @since v3000.0\n     */\n    onHover(action: () => void): KEventController;\n    /**\n     * Register an event runs every frame when hovered.\n     *\n     * @since v3000.0\n     */\n    onHoverUpdate(action: () => void): KEventController;\n    /**\n     * Register an event runs once when unhovered.\n     *\n     * @since v3000.0\n     */\n    onHoverEnd(action: () => void): KEventController;\n    /**\n     * Register an event runs once when collide with another game obj with certain tag.\n     *\n     * @since v2001.0\n     */\n    onCollide(\n        tag: Tag,\n        f: (obj: GameObj, col?: Collision) => void,\n    ): KEventController;\n    /**\n     * Register an event runs once when collide with another game obj.\n     *\n     * @since v2000.1\n     */\n    onCollide(f: (obj: GameObj, col?: Collision) => void): KEventController;\n    /**\n     * Register an event runs every frame when collide with another game obj with certain tag.\n     *\n     * @since v3000.0\n     */\n    onCollideUpdate(\n        tag: Tag,\n        f: (obj: GameObj, col?: Collision) => void,\n    ): KEventController;\n    /**\n     * Register an event runs every frame when collide with another game obj.\n     *\n     * @since v3000.0\n     */\n    onCollideUpdate(\n        f: (obj: GameObj, col?: Collision) => void,\n    ): KEventController;\n    /**\n     * Register an event runs once when stopped colliding with another game obj with certain tag.\n     *\n     * @since v3000.0\n     */\n    onCollideEnd(tag: Tag, f: (obj: GameObj) => void): KEventController;\n    /**\n     * Register an event runs once when stopped colliding with another game obj.\n     *\n     * @since v3000.0\n     */\n    onCollideEnd(f: (obj: GameObj) => void): void;\n    /**\n     * If has a certain point inside collider.\n     */\n    hasPoint(p: Vec2): boolean;\n    /**\n     * Push out from another solid game obj if currently overlapping.\n     */\n    resolveCollision(obj: GameObj): void;\n    /**\n     * Get the geometry data for the collider in local coordinate space.\n     *\n     * @since v3000.0\n     */\n    localArea(): Shape;\n    /**\n     * Get the geometry data for the collider in world coordinate space.\n     */\n    worldArea(): Shape;\n    /**\n     * Get the geometry data for the collider in screen coordinate space.\n     */\n    screenArea(): Shape;\n\n    serialize(): any;\n}\n\n/**\n * Options for the {@link area `area()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface AreaCompOpt {\n    /**\n     * The shape of the area (currently only Rect and Polygon is supported).\n     *\n     * @example\n     * ```js\n     * add([\n     *     sprite(\"butterfly\"),\n     *     pos(100, 200),\n     *     // a triangle shape!\n     *     area({ shape: new Polygon([vec2(0), vec2(100), vec2(-100, 100)]) }),\n     * ])\n     * ```\n     */\n    shape?: Shape;\n    /**\n     * Area scale.\n     */\n    scale?: number | Vec2;\n    /**\n     * Area offset.\n     */\n    offset?: Vec2;\n    /**\n     * Cursor on hover.\n     */\n    cursor?: Cursor;\n    /**\n     * If this object should ignore collisions against certain other objects.\n     *\n     * @since v3000.0\n     */\n    collisionIgnore?: Tag[];\n    /**\n     * Bounciness factor between 0 and 1.\n     *\n     * @since v4000.0\n     */\n    restitution?: number;\n    /**\n     * Friction factor between 0 and 1.\n     *\n     * @since v4000.0\n     */\n    friction?: number;\n}\n\nexport function area(opt: AreaCompOpt = {}): AreaComp {\n    const colliding: Record<string, Collision> = {};\n    const collidingThisFrame = new Set();\n    const events: KEventController[] = [];\n    let oldShape: Shape | undefined;\n\n    return {\n        id: \"area\",\n        collisionIgnore: opt.collisionIgnore ?? [],\n        restitution: opt.restitution,\n        friction: opt.friction,\n\n        add(this: GameObj<AreaComp>) {\n            _k.game.areaCount++;\n            if (this.area.cursor) {\n                events.push(\n                    this.onHover(() => _k.app.setCursor(this.area.cursor!)),\n                );\n            }\n\n            events.push(\n                this.onCollideUpdate((obj, col) => {\n                    if (!obj.exists()) return;\n                    if (!colliding[obj.id]) {\n                        this.trigger(\"collide\", obj, col);\n                    }\n                    if (!col) {\n                        return;\n                    }\n\n                    colliding[obj.id] = col;\n                    collidingThisFrame.add(obj.id);\n                }),\n            );\n        },\n\n        destroy() {\n            _k.game.areaCount--;\n            for (const event of events) {\n                event.cancel();\n            }\n        },\n\n        fixedUpdate(this: GameObj<AreaComp>) {\n            for (const id in colliding) {\n                if (!collidingThisFrame.has(Number(id))) {\n                    this.trigger(\"collideEnd\", colliding[id].target);\n                    delete colliding[id];\n                }\n            }\n            collidingThisFrame.clear();\n        },\n\n        drawInspect(this: GameObj<AreaComp | AnchorComp | FixedComp>) {\n            const a = this.localArea();\n\n            pushTransform();\n            multTranslate(this.area.offset.x, this.area.offset.y);\n\n            const opts = {\n                outline: {\n                    width: 4 / _k.gfx.viewport.scale,\n                    color: rgb(0, 0, 255),\n                },\n                anchor: this.anchor,\n                fill: false,\n                fixed: isFixed(this),\n            };\n\n            if (a instanceof Rect) {\n                drawRect({\n                    ...opts,\n                    pos: a.pos,\n                    width: a.width * this.area.scale.x,\n                    height: a.height * this.area.scale.y,\n                });\n            }\n            else if (a instanceof Polygon) {\n                drawPolygon({\n                    ...opts,\n                    pts: a.pts,\n                    scale: this.area.scale,\n                });\n            }\n            else if (a instanceof Circle) {\n                drawCircle({\n                    ...opts,\n                    pos: a.center,\n                    radius: a.radius,\n                });\n            }\n\n            popTransform();\n        },\n\n        area: {\n            shape: opt.shape ?? null,\n            scale: opt.scale ? vec2(opt.scale) : vec2(1),\n            offset: opt.offset ?? vec2(0),\n            cursor: opt.cursor ?? null,\n        },\n\n        isClicked(): boolean {\n            if (_k.game.fakeMouse) {\n                return _k.game.fakeMouse.isPressed && this.isHovering();\n            }\n\n            return _k.app.isMousePressed() && this.isHovering();\n        },\n\n        isHovering(this: GameObj<AreaComp>) {\n            if (_k.game.fakeMouse) {\n                const mpos = isFixed(this)\n                    ? _k.game.fakeMouse.pos\n                    : toWorld(_k.game.fakeMouse.pos);\n\n                return this.hasPoint(mpos);\n            }\n\n            const mpos = isFixed(this)\n                ? _k.app.mousePos()\n                : toWorld(_k.app.mousePos());\n            return this.hasPoint(mpos);\n        },\n\n        checkCollision(this: GameObj, other: GameObj<AreaComp>) {\n            if (!other.id) {\n                throw new Error(\n                    \"checkCollision() requires the object to have an id\",\n                );\n            }\n            return colliding[other.id] ?? null;\n        },\n\n        getCollisions() {\n            return Object.values(colliding);\n        },\n\n        // TODO: perform check instead of use cache\n        isColliding(\n            this: GameObj<AreaComp>,\n            otherOrTag: GameObj<AreaComp> | string,\n        ) {\n            if (typeof otherOrTag === \"string\") {\n                return this.getCollisions().some(c =>\n                    c.source === this && c.target.is(otherOrTag)\n                    || c.target === this && c.source.is(otherOrTag)\n                );\n            }\n            else {\n                if (!otherOrTag.id) {\n                    throw new Error(\n                        \"isColliding() requires the object to have an id\",\n                    );\n                }\n                return Boolean(colliding[otherOrTag.id]);\n            }\n        },\n\n        isOverlapping(other) {\n            if (!other.id) {\n                throw new Error(\n                    \"isOverlapping() requires the object to have an id\",\n                );\n            }\n            const col = colliding[other.id];\n            return col && col.hasOverlap();\n        },\n\n        onClick(\n            this: GameObj<AreaComp>,\n            action: () => void,\n            btn: MouseButton = \"left\",\n        ): KEventController {\n            if (_k.game.fakeMouse) {\n                _k.game.fakeMouse.onPress(() => {\n                    if (this.isHovering()) {\n                        action();\n                    }\n                });\n            }\n\n            const e = this.onMousePress(btn, () => {\n                if (this.isHovering()) {\n                    action();\n                }\n            });\n\n            events.push(e);\n\n            return e;\n        },\n\n        onHover(this: GameObj, action: () => void): KEventController {\n            let hovering = false;\n            return this.onUpdate(() => {\n                if (!hovering) {\n                    if (this.isHovering()) {\n                        hovering = true;\n                        action();\n                    }\n                }\n                else {\n                    hovering = this.isHovering();\n                }\n            });\n        },\n\n        onHoverUpdate(this: GameObj, onHover: () => void): KEventController {\n            return this.onUpdate(() => {\n                if (this.isHovering()) {\n                    onHover();\n                }\n            });\n        },\n\n        onHoverEnd(this: GameObj, action: () => void): KEventController {\n            let hovering = false;\n            return this.onUpdate(() => {\n                if (hovering) {\n                    if (!this.isHovering()) {\n                        hovering = false;\n                        action();\n                    }\n                }\n                else {\n                    hovering = this.isHovering();\n                }\n            });\n        },\n\n        onCollide(\n            this: GameObj,\n            tag: Tag | ((obj: GameObj, col?: Collision) => void),\n            cb?: (obj: GameObj, col?: Collision) => void,\n        ): KEventController {\n            if (typeof tag === \"function\" && cb === undefined) {\n                return this.on(\"collide\", tag);\n            }\n            else if (typeof tag === \"string\") {\n                return this.onCollide((obj: GameObj, col: Collision) => {\n                    if (obj.is(tag)) {\n                        cb?.(obj, col);\n                    }\n                });\n            }\n            else {\n                throw new Error(\n                    \"onCollide() requires either a function or a tag\",\n                );\n            }\n        },\n\n        onCollideUpdate(\n            this: GameObj<AreaComp>,\n            tag: Tag | ((obj: GameObj, col?: Collision) => void),\n            cb?: (obj: GameObj, col?: Collision) => void,\n        ): KEventController {\n            if (typeof tag === \"function\" && cb === undefined) {\n                return this.on(\"collideUpdate\", tag);\n            }\n            else if (typeof tag === \"string\") {\n                return this.on(\n                    \"collideUpdate\",\n                    (obj, col) => obj.is(tag) && cb?.(obj, col),\n                );\n            }\n            else {\n                throw new Error(\n                    \"onCollideUpdate() requires either a function or a tag\",\n                );\n            }\n        },\n\n        onCollideEnd(\n            this: GameObj<AreaComp>,\n            tag: Tag | ((obj: GameObj) => void),\n            cb?: (obj: GameObj) => void,\n        ): KEventController {\n            if (typeof tag === \"function\" && cb === undefined) {\n                return this.on(\"collideEnd\", tag);\n            }\n            else if (typeof tag === \"string\") {\n                return this.on(\"collideEnd\", (obj) => obj.is(tag) && cb?.(obj));\n            }\n            else {\n                throw new Error(\n                    \"onCollideEnd() requires either a function or a tag\",\n                );\n            }\n        },\n\n        hasPoint(\n            this: GameObj<AreaComp | PosComp | AnchorComp>,\n            pt: Vec2,\n        ): boolean {\n            const localArea = this.localArea();\n            pt = this.transform.inverse.transform(pt);\n            Vec2.sub(pt, this.area.offset, pt);\n            Vec2.scalec(pt, 1 / this.area.scale.x, 1 / this.area.scale.y, pt);\n            if (localArea instanceof Rect && this.anchor !== \"topleft\") {\n                const offset = anchorPt(this.anchor || DEF_ANCHOR)\n                    .add(1, 1)\n                    .scale(-0.5 * localArea.width, -0.5 * localArea.height);\n                Vec2.sub(pt, offset, pt);\n            }\n            return this.localArea().contains(pt);\n        },\n\n        // push an obj out of another if they're overlapped\n        resolveCollision(\n            this: GameObj<AreaComp | PosComp>,\n            obj: GameObj<AreaComp>,\n        ) {\n            const col = this.checkCollision(obj);\n            if (col && !col.resolved) {\n                this.pos = this.pos.add(col.displacement);\n                col.resolved = true;\n            }\n        },\n\n        localArea(this: GameObj<AreaComp | { renderArea(): Shape }>): Shape {\n            return this.area.shape ? this.area.shape : this.renderArea();\n        },\n\n        // TODO: cache\n        worldArea(this: GameObj<AreaComp | AnchorComp>): Shape {\n            const localArea = this.localArea();\n\n            // World transform\n            const transform = this.transform.clone();\n            // Optional area offset\n            if (this.area.offset.x !== 0 || this.area.offset.y !== 0) {\n                transform.translateSelfV(this.area.offset);\n            }\n            // Optional area scale\n            if (this.area.scale.x !== 1 || this.area.scale.y !== 1) {\n                transform.scaleSelfV(this.area.scale);\n            }\n            // Optional anchor offset (Rect only??)\n            if (localArea instanceof Rect && this.anchor !== \"topleft\") {\n                const offset = anchorPt(this.anchor || DEF_ANCHOR)\n                    .add(1, 1)\n                    .scale(-0.5 * localArea.width, -0.5 * localArea.height);\n                transform.translateSelfV(offset);\n            }\n\n            return oldShape = localArea.transform(transform, oldShape);\n        },\n\n        screenArea(this: GameObj<AreaComp | FixedComp>): Shape {\n            const area = this.worldArea();\n            if (isFixed(this)) {\n                return area;\n            }\n            else {\n                return oldShape = area.transform(\n                    _k.game.cam.transform,\n                    oldShape,\n                );\n            }\n        },\n\n        inspect() {\n            if (this.area.scale?.x == this.area.scale?.y) {\n                return `area: ${this.area.scale?.x?.toFixed(1)}x`;\n            }\n            else {\n                return `area: (${\n                    this.area.scale?.x?.toFixed(\n                        1,\n                    )\n                }x, ${this.area.scale.y?.toFixed(1)}y)`;\n            }\n        },\n\n        serialize() {\n            const data: any = {};\n            if (this.area.shape) data.shape = this.area.shape.serialize();\n            if (this.area.scale) {\n                data.scale = this.area.scale instanceof Vec2\n                    ? this.area.scale.serialize()\n                    : opt.scale;\n            }\n            if (this.area.offset) data.offset = this.area.offset.serialize();\n            if (opt.cursor) data.cursor = opt.cursor;\n            // Make a copy, since it might be changed later\n            if (this.collisionIgnore) {\n                data.collisionIgnore = this.collisionIgnore.slice();\n            }\n            if (this.restitution) data.restitution = this.restitution;\n            if (this.friction) data.friction = this.friction;\n            return data;\n        },\n    };\n}\n\nexport function areaFactory(data: any) {\n    const opt: any = {};\n    if (data.shape) opt.shape = shapeFactory(data.shape);\n    if (data.scale) {\n        opt.scale = typeof data.scale === \"number\"\n            ? data.scale\n            : Vec2.deserialize(data.scale);\n    }\n    if (data.offset) opt.offset = Vec2.deserialize(data.offset);\n    if (data.cursor) opt.cursor = opt.cursor;\n    // Make a copy, since it might be changed later\n    if (data.collisionIgnore) {\n        opt.collisionIgnore = data.collisionIgnore.slice();\n    }\n    if (data.restitution) opt.restitution = data.restitution;\n    if (data.friction) opt.friction = data.friction;\n    return area(opt);\n}\n", "// Gravity manipulation\n\nimport { vec2 } from \"../math/math\";\nimport { type Vec2 } from \"../math/Vec2\";\nimport { _k } from \"../shared\";\n\nexport function setGravity(g: number) {\n    // If g > 0 use either the current direction or use (0, 1)\n    // Else null\n    _k.game.gravity = g\n        ? (_k.game.gravity || vec2(0, 1)).unit().scale(g)\n        : null;\n}\n\nexport function getGravity() {\n    // If gravity > 0 return magnitude\n    // Else 0\n    return _k.game.gravity ? _k.game.gravity.len() : 0;\n}\n\nexport function setGravityDirection(d: Vec2) {\n    // If gravity > 0 keep magnitude, otherwise use 1\n    _k.game.gravity = d.unit().scale(\n        _k.game.gravity ? _k.game.gravity.len() : 1,\n    );\n}\n\nexport function getGravityDirection() {\n    // If gravity != null return unit vector, otherwise return (0, 1)\n    return _k.game.gravity ? _k.game.gravity.unit() : vec2(0, 1);\n}\n", "import { DEF_JUMP_FORCE, MAX_VEL } from \"../../../constants/general\";\nimport type { KEventController } from \"../../../events/events\";\nimport { getGravityDirection } from \"../../../game/gravity\";\nimport { lerp } from \"../../../math/lerp\";\nimport { vec2 } from \"../../../math/math\";\nimport { calcTransform } from \"../../../math/various\";\nimport { type Vec2 } from \"../../../math/Vec2\";\nimport { _k } from \"../../../shared\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { Collision } from \"../../systems/Collision\";\nimport type { PosComp } from \"../transform/pos\";\nimport type { AreaComp } from \"./area\";\n\n/**\n * The {@link body `body()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface BodyComp extends Comp {\n    /**\n     * Object current velocity.\n     *\n     * @since v3001.0\n     */\n    vel: Vec2;\n    /**\n     * How much velocity decays (velocity *= 1 / (1 + damping * dt) every frame).\n     *\n     * @since v3001.0\n     */\n    damping: number;\n    /**\n     * If object is static, it won't move, all non static objects won't move past it, and all\n     * calls to addForce(), applyImpulse(), or jump() on this body will do absolutely nothing.\n     */\n    isStatic: boolean;\n    /**\n     * Initial speed in pixels per second for jump().\n     */\n    jumpForce: number;\n    /**\n     * Gravity multiplier.\n     */\n    gravityScale: number;\n    /**\n     * Mass of the body, decides how much a non-static body should move when resolves with another non-static body. (default 1).\n     *\n     * @since v3000.0\n     */\n    mass: number;\n    /**\n     * If object should move with moving platform (default true).\n     *\n     * @since v3000.0\n     */\n    stickToPlatform?: boolean;\n    /**\n     * Current platform landing on.\n     */\n    curPlatform(): GameObj | null;\n    /**\n     * If currently landing on a platform.\n     *\n     * @since v2000.1\n     */\n    isGrounded(): boolean;\n    /**\n     * If currently falling.\n     *\n     * @since v2000.1\n     */\n    isFalling(): boolean;\n    /**\n     * If currently rising.\n     *\n     * @since v3000.0\n     */\n    isJumping(): boolean;\n    /**\n     * Applies an impulse\n     * @param impulse - The impulse vector, applied directly\n     */\n    applyImpulse(impulse: Vec2): void;\n    /**\n     * Applies a force\n     * @param force - The force vector, applied after scaled by the inverse mass\n     */\n    addForce(force: Vec2): void;\n    /**\n     * Upward thrust.\n     */\n    jump(force?: number): void;\n    /**\n     * Register an event that runs when a collision is resolved.\n     *\n     * @since v3000.0\n     */\n    onPhysicsResolve(action: (col: Collision) => void): KEventController;\n    /**\n     * Register an event that runs before a collision would be resolved.\n     *\n     * @since v3000.0\n     */\n    onBeforePhysicsResolve(action: (col: Collision) => void): KEventController;\n    /**\n     * Register an event that runs when the object is grounded.\n     *\n     * @since v2000.1\n     */\n    onGround(action: () => void): KEventController;\n    /**\n     * Register an event that runs when the object starts falling.\n     *\n     * @since v2000.1\n     */\n    onFall(action: () => void): KEventController;\n    /**\n     * Register an event that runs when the object falls off platform.\n     *\n     * @since v3000.0\n     */\n    onFallOff(action: () => void): KEventController;\n    /**\n     * Register an event that runs when the object bumps into something on the head.\n     *\n     * @since v2000.1\n     */\n    onHeadbutt(action: () => void): KEventController;\n    /**\n     * Register an event that runs when an object lands on this object.\n     *\n     * @since v3001.0\n     */\n    onLand(action: (obj: GameObj) => void): KEventController;\n    /**\n     * Register an event that runs when the object is bumped by another object head.\n     */\n    onHeadbutted(action: (obj: GameObj) => void): KEventController;\n\n    serialize(): any;\n}\n\n/**\n * Options for the {@link body `body()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface BodyCompOpt {\n    /**\n     * How much velocity decays (velocity *= 1 / (1 + damping * dt) every frame).\n     *\n     * @since v3001.0\n     */\n    damping?: number;\n    /**\n     * Initial speed in pixels per second for jump().\n     */\n    jumpForce?: number;\n    /**\n     * Maximum velocity when falling.\n     */\n    maxVelocity?: number;\n    /**\n     * Gravity multiplier.\n     */\n    gravityScale?: number;\n    /**\n     * If object is static, it won't move, all non static objects won't move past it, and all\n     * calls to addForce(), applyImpulse(), or jump() on this body will do absolutely nothing.\n     *\n     * @since v3000.0\n     */\n    isStatic?: boolean;\n    /**\n     * If object should move with moving platform (default true).\n     *\n     * @since v3000.0\n     */\n    stickToPlatform?: boolean;\n    /**\n     * Mass of the body, decides how much a non-static body should move when resolves with another non-static body. (default 1).\n     *\n     * @since v3000.0\n     */\n    mass?: number;\n}\n\nexport function body(opt: BodyCompOpt = {}): BodyComp {\n    let curPlatform: GameObj<PosComp | AreaComp | BodyComp> | null = null;\n    let lastPlatformPos: null | Vec2 = null;\n    let willFall = false;\n    const acc = vec2(0);\n    let prevPhysicsPos: Vec2 | null = null;\n    let nextPhysicsPos: Vec2 | null = null;\n    let prevDrawPos: Vec2;\n\n    return {\n        id: \"body\",\n        require: [\"pos\"],\n        vel: vec2(0),\n        damping: opt.damping ?? 0,\n        jumpForce: opt.jumpForce ?? DEF_JUMP_FORCE,\n        gravityScale: opt.gravityScale ?? 1,\n        isStatic: opt.isStatic ?? false,\n        // TODO: prefer density * area\n        mass: opt.mass ?? 1,\n        add(this: GameObj<PosComp | BodyComp | AreaComp>) {\n            prevPhysicsPos = this.pos.clone();\n            nextPhysicsPos = this.pos.clone();\n            prevDrawPos = this.pos.clone();\n            if (this.mass === 0) {\n                throw new Error(\"Can't set body mass to 0\");\n            }\n\n            if (this.has(\"area\")) {\n                // static vs static: don't resolve\n                // static vs non-static: always resolve non-static\n                // non-static vs non-static: resolve the first one\n                this.onCollideUpdate(\n                    (other, col) => {\n                        if (!col) return;\n                        if (!other.has(\"body\")) return;\n                        if (col.resolved) return;\n\n                        this.trigger(\"beforePhysicsResolve\", col);\n                        const rcol = col.reverse();\n                        other.trigger(\"beforePhysicsResolve\", rcol);\n\n                        // user can mark 'resolved' in beforePhysicsResolve to stop a resolution\n                        if (col.resolved || rcol.resolved) {\n                            return;\n                        }\n\n                        if (this.isStatic && other.isStatic) {\n                            return;\n                        }\n                        else if (!this.isStatic && !other.isStatic) {\n                            // TODO: update all children transform?\n                            const tmass = this.mass + other.mass;\n                            this.pos = this.pos.add(\n                                col.displacement.scale(other.mass / tmass),\n                            );\n                            other.pos = other.pos.add(\n                                col.displacement.scale(-this.mass / tmass),\n                            );\n                            calcTransform(this, this.transform);\n                            calcTransform(other, other.transform);\n                        }\n                        else {\n                            // if one is static and on is not, resolve the non static one\n                            const col2 = (!this.isStatic && other.isStatic)\n                                ? col\n                                : col.reverse();\n                            col2.source.pos = col2.source.pos.add(\n                                col2.displacement,\n                            );\n                            calcTransform(col2.source, col2.source.transform);\n                        }\n\n                        col.resolved = true;\n                        this.trigger(\"physicsResolve\", col);\n                        other.trigger(\"physicsResolve\", col.reverse());\n                    },\n                );\n\n                this.onPhysicsResolve((col) => {\n                    if (_k.game.gravity) {\n                        if (col.isBottom() && this.isFalling()) {\n                            // We need the past platform to check if we already were on a platform\n                            const pastPlatform = curPlatform;\n                            curPlatform = col.target as GameObj<\n                                PosComp | BodyComp | AreaComp\n                            >;\n                            if (pastPlatform != curPlatform) {\n                                // If we are on a new platform, update the sticky position\n                                lastPlatformPos = col.target.pos;\n                            }\n                            if (willFall) {\n                                // We would have fallen, but didn't.\n                                // This happens when we leave one platform block and move onto another\n                                willFall = false;\n                            }\n                            else if (!pastPlatform) {\n                                // We weren't on a platform, land\n                                this.trigger(\"ground\", curPlatform);\n                                col.target.trigger(\"land\", this);\n                            }\n                        }\n                        else if (col.isTop() && this.isJumping()) {\n                            this.trigger(\"headbutt\", col.target);\n                            col.target.trigger(\"headbutted\", this);\n                        }\n                    }\n\n                    const restitution = Math.max(\n                        col.source.restitution || 0,\n                        col.target.restitution || 0,\n                    );\n\n                    const friction = Math.sqrt(\n                        (col.source.friction || 0)\n                            * (col.target.friction || 0),\n                    );\n\n                    const projection = this.vel.project(col.normal);\n                    const rejection = this.vel.sub(projection);\n\n                    // Clear the velocity in the direction of the normal, as we've hit something\n                    if (this.vel.dot(col.normal) < 0) {\n                        // Modulate the velocity tangential to the normal\n                        this.vel = rejection.sub(projection.scale(restitution));\n                    }\n\n                    if (friction != 0) {\n                        // TODO: This should work with dt, not frame, but then friction 1 will brake in 1 second, not one frame\n                        // TODO: This should depend with gravity, stronger gravity means more friction\n                        //       getGravityDirection().scale(getGravity()).project(col.normal).len()\n                        this.vel = this.vel.sub(rejection.scale(friction));\n                    }\n                });\n            }\n        },\n\n        update(this: GameObj<PosComp | BodyComp | AreaComp>) {\n            // Sticky platform\n            if (curPlatform) {\n                if (\n                    // We are still colliding with the platform and the platform exists\n                    this.isColliding(curPlatform)\n                    && curPlatform.exists()\n                    && curPlatform.has(\"body\")\n                ) {\n                    // This needs to happen in onUpdate. Otherwise the player position will jitter.\n                    if (\n                        lastPlatformPos\n                        && !curPlatform.pos.eq(lastPlatformPos)\n                        && opt.stickToPlatform !== false\n                    ) {\n                        // Stick to the platform\n                        this.moveBy(\n                            curPlatform.pos.sub(lastPlatformPos),\n                        );\n                    }\n                    lastPlatformPos = curPlatform.pos;\n                }\n            }\n\n            const dt = _k.app.restDt();\n            if (dt) {\n                // Check if no external changes were made\n                if (this.pos.x == prevDrawPos.x) {\n                    // Interpolate physics steps\n                    this.pos.x = lerp(\n                        prevPhysicsPos!.x,\n                        nextPhysicsPos!.x,\n                        dt / _k.app.fixedDt(),\n                    );\n                    // Copy to check for changes\n                    prevDrawPos.x = this.pos.x;\n                }\n                if (this.pos.y == prevDrawPos.y) {\n                    // Interpolate physics steps\n                    this.pos.y = lerp(\n                        prevPhysicsPos!.y,\n                        nextPhysicsPos!.y,\n                        dt / _k.app.fixedDt(),\n                    );\n                    // Copy to check for changes\n                    prevDrawPos.y = this.pos.y;\n                }\n            }\n        },\n\n        fixedUpdate(this: GameObj<PosComp | BodyComp | AreaComp>) {\n            // If we were interpolating, and the position wasn't set manually, reset to last physics position\n            if (prevPhysicsPos) {\n                if (this.pos.x == prevDrawPos.x) {\n                    this.pos.x = prevPhysicsPos.x;\n                }\n                if (this.pos.y == prevDrawPos.y) {\n                    this.pos.y = prevPhysicsPos.y;\n                }\n                prevPhysicsPos = null;\n            }\n\n            if (_k.game.gravity && !this.isStatic) {\n                // If we are falling over the edge of the current a platform\n                if (willFall) {\n                    curPlatform = null;\n                    lastPlatformPos = null;\n                    this.trigger(\"fallOff\");\n                    willFall = false;\n                }\n\n                // If we were previously on a platform\n                if (curPlatform) {\n                    if (\n                        // If we are no longer on the platform, or the platform was deleted\n                        !this.isColliding(curPlatform)\n                        || !curPlatform.exists()\n                        || !curPlatform.has(\"body\")\n                    ) {\n                        willFall = true;\n                    }\n                }\n\n                const prevVel = this.vel.clone();\n\n                // Apply gravity\n                this.vel = this.vel.add(\n                    _k.game.gravity.scale(this.gravityScale * _k.app.dt()),\n                );\n\n                // Clamp velocity\n                const maxVel = opt.maxVelocity ?? MAX_VEL;\n                if (this.vel.slen() > maxVel * maxVel) {\n                    this.vel = this.vel.unit().scale(maxVel);\n                }\n\n                // Check if we have started to fall.\n                // We do this by looking at the velocity vector along the direction of gravity\n                if (\n                    prevVel.dot(_k.game.gravity) < 0\n                    && this.vel.dot(_k.game.gravity) >= 0\n                ) {\n                    this.trigger(\"fall\");\n                }\n            }\n\n            // Apply velocity and position changes\n            this.vel.x += acc.x * _k.app.dt();\n            this.vel.y += acc.y * _k.app.dt();\n\n            this.vel.x *= 1 / (1 + this.damping * _k.app.dt());\n            this.vel.y *= 1 / (1 + this.damping * _k.app.dt());\n\n            this.move(this.vel);\n\n            // If we need to interpolate physics, prepare interpolation data\n            const rDt = _k.app.restDt();\n            if (rDt) {\n                // Save this position as previous\n                prevPhysicsPos = this.pos.clone();\n                // Calculate next (future) position\n                const nextVel = this.vel.add(acc.scale(_k.app.dt()));\n                nextPhysicsPos = this.pos.add(nextVel.scale(_k.app.dt()));\n                // Copy to check for changes\n                prevDrawPos = this.pos.clone();\n            }\n\n            // Reset acceleration\n            acc.x = 0;\n            acc.y = 0;\n        },\n\n        onPhysicsResolve(this: GameObj, action) {\n            return this.on(\"physicsResolve\", action);\n        },\n\n        onBeforePhysicsResolve(this: GameObj, action) {\n            return this.on(\"beforePhysicsResolve\", action);\n        },\n\n        curPlatform(): GameObj | null {\n            return curPlatform;\n        },\n\n        isGrounded() {\n            return curPlatform !== null;\n        },\n\n        isFalling(): boolean {\n            return this.vel.dot(getGravityDirection()) > 0;\n        },\n\n        isJumping(): boolean {\n            return this.vel.dot(getGravityDirection()) < 0;\n        },\n\n        applyImpulse(impulse: Vec2) {\n            if (this.isStatic) return;\n            this.vel = this.vel.add(impulse);\n        },\n\n        addForce(force: Vec2) {\n            if (this.isStatic) return;\n            acc.x += force.x / this.mass;\n            acc.y += force.y / this.mass;\n        },\n\n        jump(force: number) {\n            if (this.isStatic) return;\n            curPlatform = null;\n            lastPlatformPos = null;\n            this.vel = getGravityDirection().scale(\n                -force || -this.jumpForce,\n            );\n        },\n\n        onGround(this: GameObj, action: () => void): KEventController {\n            return this.on(\"ground\", action);\n        },\n\n        onFall(this: GameObj, action: () => void): KEventController {\n            return this.on(\"fall\", action);\n        },\n\n        onFallOff(this: GameObj, action: () => void): KEventController {\n            return this.on(\"fallOff\", action);\n        },\n\n        onHeadbutt(this: GameObj, action: () => void): KEventController {\n            return this.on(\"headbutt\", action);\n        },\n\n        onLand(this: GameObj, action: (obj: GameObj) => void) {\n            return this.on(\"land\", action);\n        },\n\n        onHeadbutted(this: GameObj, action: (obj: GameObj) => void) {\n            return this.on(\"headbutted\", action);\n        },\n\n        inspect() {\n            return `gravityScale: ${this.gravityScale}x`;\n        },\n\n        serialize(): any {\n            const data: any = {};\n            if (opt.jumpForce) data.jumpForce = opt.jumpForce;\n            if (opt.maxVelocity) data.maxVelocity = opt.maxVelocity;\n            if (opt.gravityScale) data.gravityScale = opt.gravityScale;\n            if (opt.isStatic) data.isStatic = opt.isStatic;\n            if (opt.stickToPlatform) data.stickToPlatform = opt.stickToPlatform;\n            if (opt.mass) data.mass = opt.mass;\n            return data;\n        },\n    };\n}\n\nexport function bodyFactory(data: any) {\n    const opt: any = {};\n    if (data.jumpForce) opt.jumpForce = data.jumpForce;\n    if (data.maxVelocity) opt.maxVelocity = data.maxVelocity;\n    if (data.gravityScale) opt.gravityScale = data.gravityScale;\n    if (data.isStatic) opt.isStatic = opt.isStatic;\n    if (data.stickToPlatform) opt.stickToPlatform = data.stickToPlatform;\n    if (data.mass) opt.mass = data.mass;\n    return body(opt);\n}\n", "import type { KEventController } from \"../../../events/events\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { BodyComp } from \"./body\";\n\n/**\n * The {@link doubleJump `doubleJump()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface DoubleJumpComp extends Comp {\n    /**\n     * Number of jumps allowed.\n     */\n    numJumps: number;\n    /**\n     * Performs double jump (the initial jump only happens if player is grounded).\n     */\n    doubleJump(force?: number): void;\n    /**\n     * Register an event that runs when the object performs the second jump when double jumping.\n     */\n    onDoubleJump(action: () => void): KEventController;\n}\n\nexport function doubleJump(numJumps: number = 2): DoubleJumpComp {\n    let jumpsLeft = numJumps;\n    return {\n        id: \"doubleJump\",\n        require: [\"body\"],\n        numJumps: numJumps,\n        add(this: GameObj<BodyComp | DoubleJumpComp>) {\n            this.onGround(() => {\n                jumpsLeft = this.numJumps;\n            });\n        },\n        doubleJump(\n            this: GameObj<BodyComp | DoubleJumpComp>,\n            force?: number,\n        ) {\n            if (jumpsLeft <= 0) {\n                return;\n            }\n            if (jumpsLeft < this.numJumps) {\n                this.trigger(\"doubleJump\");\n            }\n            jumpsLeft--;\n            this.jump(force);\n        },\n        onDoubleJump(this: GameObj, action: () => void): KEventController {\n            return this.on(\"doubleJump\", action);\n        },\n        inspect(this: GameObj<BodyComp | DoubleJumpComp>) {\n            return `jumpsLeft: ${jumpsLeft}`;\n        },\n    };\n}\n", "import { Polygon, vec2 } from \"../../../math/math\";\nimport { Vec2 } from \"../../../math/Vec2\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { PosComp } from \"../transform/pos\";\nimport type { AreaComp } from \"./area\";\nimport type { BodyComp } from \"./body\";\n\nexport type SurfaceEffectorCompOpt = {\n    speed: number;\n    speedVariation?: number;\n    forceScale?: number;\n};\n\nexport interface SurfaceEffectorComp extends Comp {\n    speed: number;\n    speedVariation: number;\n    forceScale: number;\n}\n\nexport function surfaceEffector(\n    opts: SurfaceEffectorCompOpt,\n): SurfaceEffectorComp {\n    return {\n        id: \"surfaceEffector\",\n        require: [\"area\"],\n        speed: opts.speed,\n        speedVariation: opts.speedVariation ?? 0,\n        forceScale: opts.speedVariation ?? 0.9,\n        add(this: GameObj<AreaComp | SurfaceEffectorComp>) {\n            this.onCollideUpdate((obj, col) => {\n                if (!obj.has(\"body\")) return;\n                const dir = col?.normal.normal();\n                const currentVel = obj.vel.project(dir);\n                const wantedVel = dir?.scale(this.speed);\n                const force = wantedVel?.sub(currentVel);\n                obj.addForce(force?.scale(obj.mass * this.forceScale));\n            });\n        },\n    };\n}\n\nexport type AreaEffectorCompOpt = {\n    useGlobalAngle?: boolean;\n    force: Vec2;\n    linearDrag?: number;\n};\n\nexport interface AreaEffectorComp extends Comp {\n    useGlobalAngle: boolean;\n    force: Vec2;\n    linearDrag: number;\n}\n\nexport function areaEffector(opts: AreaEffectorCompOpt): AreaEffectorComp {\n    return {\n        id: \"areaEffector\",\n        require: [\"area\"],\n        force: opts.force,\n        linearDrag: opts.linearDrag ?? 0,\n        useGlobalAngle: opts.useGlobalAngle ?? true,\n        add(this: GameObj<AreaComp | AreaEffectorComp>) {\n            this.onCollideUpdate(obj => {\n                if (!obj.has(\"body\")) return;\n                obj.addForce(\n                    this.useGlobalAngle\n                        ? this.force\n                        : this.force.rotate(this.transform.getRotation()),\n                );\n                if (this.linearDrag) {\n                    obj.addForce(obj.vel.scale(-this.linearDrag));\n                }\n            });\n        },\n    };\n}\n\nexport type ForceMode = \"constant\" | \"inverseLinear\" | \"inverseSquared\";\n\nexport type PointEffectorCompOpt = {\n    forceMagnitude: number;\n    distanceScale?: number;\n    forceMode?: ForceMode;\n    linearDrag?: number;\n};\n\nexport interface PointEffectorComp extends Comp {\n    forceMagnitude: number;\n    distanceScale: number;\n    forceMode: ForceMode;\n    linearDrag: number;\n}\n\nexport function pointEffector(opts: PointEffectorCompOpt): PointEffectorComp {\n    return {\n        id: \"pointEffector\",\n        require: [\"area\", \"pos\"],\n        forceMagnitude: opts.forceMagnitude,\n        distanceScale: opts.distanceScale ?? 1,\n        forceMode: opts.forceMode || \"inverseLinear\",\n        linearDrag: opts.linearDrag ?? 0,\n        // angularDrag: opts.angularDrag ?? 0,\n        add(this: GameObj<PointEffectorComp | AreaComp | PosComp>) {\n            this.onCollideUpdate((obj, col) => {\n                if (!obj.has(\"body\")) return;\n                const dir = this.pos.sub(obj.pos);\n                const length = dir.len();\n                const distance = length * this.distanceScale / 10;\n                const forceScale = this.forceMode === \"constant\"\n                    ? 1\n                    : this.forceMode === \"inverseLinear\"\n                    ? 1 / distance\n                    : 1 / distance ** 2;\n                const force = dir.scale(\n                    this.forceMagnitude * forceScale / length,\n                );\n                obj.addForce(force);\n                if (this.linearDrag) {\n                    obj.addForce(obj.vel.scale(-this.linearDrag));\n                }\n            });\n        },\n    };\n}\n\nexport type ConstantForceCompOpt = {\n    force?: Vec2;\n    useGlobalAngle?: boolean;\n};\n\nexport interface ConstantForceComp extends Comp {\n    force: Vec2 | undefined;\n    useGlobalAngle: boolean;\n}\n\nexport function constantForce(opts: ConstantForceCompOpt): ConstantForceComp {\n    return {\n        id: \"constantForce\",\n        require: [\"body\"],\n        force: opts.force,\n        useGlobalAngle: opts.useGlobalAngle ?? true,\n        update(this: GameObj<BodyComp | ConstantForceComp>) {\n            if (this.force) {\n                this.addForce(\n                    this.useGlobalAngle\n                        ? this.force\n                        : this.force.rotate(this.transform.getRotation()),\n                );\n            }\n        },\n    };\n}\n\nexport type PlatformEffectorCompOpt = {\n    /**\n     * If the object is about to collide and the collision normal direction is\n     * in here (i.e. the object is moving roughly in this direction), the object won't collide.\n     *\n     * Should be a list of unit vectors `LEFT`, `RIGHT`, `UP`, or `DOWN`.\n     *\n     * Defaults to `[UP]`, i.e. the object will only be able to pass through when it\n     * is jumping upwards, but will collide when it is moving downwards or sideways.\n     */\n    ignoreSides?: Vec2[];\n    /**\n     * A function that determines whether the object should collide.\n     *\n     * If present, it overrides the `ignoreSides`; if absent, it is\n     * automatically created from `ignoreSides`.\n     */\n    shouldCollide?: (\n        this: GameObj<PlatformEffectorComp>,\n        obj: GameObj,\n        normal: Vec2,\n    ) => boolean;\n};\n\nexport interface PlatformEffectorComp extends Comp {\n    /**\n     * A set of the objects that should not collide with this, because `shouldCollide` returned true.\n     *\n     * Objects in here are automatically removed when they stop colliding, so the casual user shouldn't\n     * need to touch this much. However, if an object is added to this set before the object collides\n     * with the platform effector, it won't collide even if `shouldCollide` returns true.\n     */\n    platformIgnore: Set<GameObj>;\n}\n\nexport function platformEffector(\n    opt: PlatformEffectorCompOpt = {},\n): PlatformEffectorComp {\n    opt.ignoreSides ??= [Vec2.UP];\n    opt.shouldCollide ??= (_, normal) => {\n        return opt.ignoreSides?.findIndex(s => s.sdist(normal) < Number.EPSILON)\n            == -1;\n    };\n    return {\n        id: \"platformEffector\",\n        require: [\"area\", \"body\"],\n        platformIgnore: new Set<GameObj>(),\n        add(this: GameObj<BodyComp | AreaComp | PlatformEffectorComp>) {\n            this.onBeforePhysicsResolve(collision => {\n                if (this.platformIgnore.has(collision.target)) {\n                    collision.preventResolution();\n                }\n                else if (\n                    !opt.shouldCollide!.call(\n                        this,\n                        collision.target,\n                        collision.normal,\n                    )\n                ) {\n                    collision.preventResolution();\n                    this.platformIgnore.add(collision.target);\n                }\n            });\n            this.onCollideEnd(obj => {\n                this.platformIgnore.delete(obj);\n            });\n        },\n    };\n}\n\nexport type BuoyancyEffectorCompOpt = {\n    surfaceLevel: number;\n    density?: number;\n    linearDrag?: number;\n    angularDrag?: number;\n    flowAngle?: number;\n    flowMagnitude?: number;\n    flowVariation?: number;\n};\n\nexport interface BuoyancyEffectorComp extends Comp {\n    surfaceLevel: number;\n    density: number;\n    linearDrag: number;\n    angularDrag: number;\n    flowAngle: number;\n    flowMagnitude: number;\n    flowVariation: number;\n    applyBuoyancy(body: GameObj<BodyComp>, submergedArea: Polygon): void;\n    applyDrag(body: GameObj<BodyComp>, submergedArea: Polygon): void;\n}\n\nexport function buoyancyEffector(\n    opts: BuoyancyEffectorCompOpt,\n): BuoyancyEffectorComp {\n    return {\n        id: \"buoyancyEffector\",\n        require: [\"area\"],\n        surfaceLevel: opts.surfaceLevel,\n        density: opts.density ?? 1,\n        linearDrag: opts.linearDrag ?? 1,\n        angularDrag: opts.angularDrag ?? 0.2,\n        flowAngle: opts.flowAngle ?? 0,\n        flowMagnitude: opts.flowMagnitude ?? 0,\n        flowVariation: opts.flowVariation ?? 0,\n        add(this: GameObj<AreaComp | BuoyancyEffectorComp>) {\n            this.onCollideUpdate((obj, col) => {\n                if (!obj.has(\"body\")) return;\n                const o = obj as GameObj<BodyComp | AreaComp>;\n                const shape = o.worldArea();\n                const polygon: Polygon = shape instanceof Polygon\n                    ? shape\n                    : new Polygon(shape.bbox().points());\n                const [submergedArea, _] = polygon.cut(\n                    vec2(-100, this.surfaceLevel),\n                    vec2(100, this.surfaceLevel),\n                );\n\n                if (submergedArea) {\n                    this.applyBuoyancy(o, submergedArea);\n                    this.applyDrag(o, submergedArea);\n                }\n\n                if (this.flowMagnitude) {\n                    o.addForce(\n                        Vec2.fromAngle(this.flowAngle).scale(\n                            this.flowMagnitude,\n                        ),\n                    );\n                }\n            });\n        },\n        applyBuoyancy(body: GameObj<BodyComp>, submergedArea: Polygon) {\n            const displacedMass = this.density * submergedArea.area();\n            const buoyancyForce = vec2(0, 1).scale(-displacedMass);\n            // console.log(\"buoyancyForce\", buoyancyForce)\n            // TODO: Should be applied to the center of submergedArea, but since there is no torque yet, this is OK\n            body.addForce(buoyancyForce);\n        },\n        applyDrag(body: GameObj<BodyComp>, submergedArea: Polygon) {\n            const velocity = body.vel;\n            const dragMagnitude = this.density * this.linearDrag;\n            const dragForce = velocity.scale(-dragMagnitude);\n            // console.log(\"dragForce\", dragForce)\n            // TODO: Should be applied to the center of submergedArea, but since there is no torque yet, this is OK\n            body.addForce(dragForce);\n            // const angularDrag = submergedArea.area() * -body.angularVelocity * this.angularDrag;\n            // object.addTorque(angularDrag);\n        },\n    };\n}\n", "import { anchorPt } from \"../../../gfx/anchor\";\nimport { vec2 } from \"../../../math/math\";\nimport { type SerializedVec2, Vec2 } from \"../../../math/Vec2\";\nimport type { Anchor, Comp } from \"../../../types\";\n\n/**\n * The serialized {@link anchor `anchor()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedAnchorComp {\n    anchor: SerializedVec2;\n}\n\n/**\n * The {@link anchor `anchor()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface AnchorComp extends Comp {\n    /**\n     * Anchor point for render.\n     */\n    anchor: Anchor | Vec2;\n\n    serialize(): SerializedAnchorComp;\n}\n\nexport function anchor(o: Anchor | Vec2): AnchorComp {\n    if (!o) {\n        throw new Error(\"Please define an anchor\");\n    }\n    return {\n        id: \"anchor\",\n        anchor: o,\n        inspect() {\n            if (typeof this.anchor === \"string\") {\n                return `anchor: ` + this.anchor;\n            }\n            else {\n                return `anchor: ` + this.anchor.toString();\n            }\n        },\n        serialize() {\n            return {\n                anchor: this.anchor instanceof Vec2\n                    ? this.anchor.serialize()\n                    : anchorPt(this.anchor).serialize(),\n            };\n        },\n    };\n}\n\nexport function anchorFactory(data: SerializedAnchorComp) {\n    return anchor(new Vec2(data.anchor.x, data.anchor.y));\n}\n", "import { _k } from \"../../shared\";\n\n/**\n * @group Plugins\n */\nexport type System = {\n    name: string;\n    run: () => void;\n    when: SystemPhase[];\n};\n\nexport enum SystemPhase {\n    BeforeUpdate,\n    BeforeFixedUpdate,\n    BeforeDraw,\n    AfterUpdate,\n    AfterFixedUpdate,\n    AfterDraw,\n}\n\nexport const system = (\n    name: string,\n    action: () => void,\n    when: SystemPhase[],\n) => {\n    const systems = _k.game.systems;\n    const replacingSystemIdx = systems.findIndex((s) => s.name === name);\n\n    // if existent system, remove it\n    if (replacingSystemIdx != -1) {\n        const replacingSystem = systems[replacingSystemIdx];\n        const when = replacingSystem.when;\n\n        for (const loc of when) {\n            const idx = _k.game.systemsByEvent[loc].findIndex(\n                (s) => s.name === name,\n            );\n            _k.game.systemsByEvent[loc].splice(idx, 1);\n        }\n    }\n\n    const system: System = {\n        name,\n        run: action,\n        when,\n    };\n\n    for (const loc of when) {\n        _k.game.systemsByEvent[loc].push(system);\n    }\n\n    systems.push({ name, run: action, when });\n};\n", "import { onAdd, onDestroy, onUnuse, onUse } from \"../../../events/globalEvents\";\nimport { lerp } from \"../../../math/lerp\";\nimport { rad2deg, vec2 } from \"../../../math/math\";\nimport {\n    calcTransform,\n    clampAngle,\n    updateChildrenTransformRecursive,\n    updateTransformRecursive,\n} from \"../../../math/various\";\nimport { Vec2 } from \"../../../math/Vec2\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport { system, SystemPhase } from \"../../systems/systems\";\nimport type { PosComp } from \"./pos\";\nimport type { RotateComp } from \"./rotate\";\nimport type { ScaleComp } from \"./scale\";\n\nexport type BoneOpt = {\n    /* Minimum angle should be between -180 and 180, and smaller than maximum angle */\n    minAngle?: number;\n    /* Maximum angle should be between -180 and 180, and greater than minimum angle */\n    maxAngle?: number;\n};\n\nexport interface BoneComp extends Comp {\n    /* Minimum angle should be between -180 and 180, and smaller than maximum angle */\n    minAngle: number;\n    /* Maximum angle should be between -180 and 180, and greater than minimum angle */\n    maxAngle: number;\n    setAngles(minAngle: number, maxAngle: number): void;\n}\n\nexport interface Constraint extends Comp {\n    constraint: {\n        target: GameObj;\n    };\n    apply: () => void;\n}\n\nexport type DistanceMode = \"maximum\" | \"minimum\" | \"equal\";\n\nexport type DistanceConstraintOpt = {\n    /**\n     * The desired distance between this and target\n     */\n    distance: number;\n    /**\n     * If maximum, the distance is maximum distance\n     * If equal, the distance is the desired distance\n     * If minimum, the distance is minimum distance\n     */\n    mode: DistanceMode;\n    /**\n     * Between 0 and 1. The percentage of the property being overwritten\n     */\n    strength?: number;\n};\n\nexport interface DistanceConstraintComp extends Constraint {\n    constraint: {\n        target: GameObj;\n        distance: number;\n        mode: DistanceMode;\n        strength: number;\n    };\n}\n\nexport type TranslationConstraintOpt = {\n    /**\n     * The offset added after applying the constraint\n     */\n    offset?: Vec2;\n    /**\n     * Between 0 and 1. The percentage of the property being overwritten\n     */\n    strength?: number;\n};\n\nexport interface TranslationConstraintComp extends Constraint {\n    constraint: {\n        target: GameObj;\n        offset: Vec2;\n        strength: number;\n    };\n}\n\nexport type RotationConstraintOpt = {\n    /**\n     * The offset added after applying the constraint\n     */\n    offset?: number;\n    /**\n     * The factor applied before applying the constraint. For example 0.5 will only apply half of the rotation of the target\n     */\n    scale?: number;\n    /**\n     * Between 0 and 1. The percentage of the property being overwritten\n     */\n    strength?: number;\n};\n\nexport interface RotationConstraintComp extends Constraint {\n    constraint: {\n        target: GameObj;\n        offset: number;\n        scale: number;\n        strength: number;\n    };\n}\n\nexport type ScaleConstraintOpt = {\n    /**\n     * Between 0 and 1. The percentage of the property being overwritten\n     */\n    strength?: number;\n};\n\nexport interface ScaleConstraintComp extends Constraint {\n    constraint: {\n        target: GameObj;\n        strength: number;\n    };\n}\n\nexport type TransformConstraintOpt = {\n    /**\n     * Between 0 and 1. The percentage of the property being overwritten\n     */\n    strength?: number;\n};\n\nexport interface TransformConstraintComp extends Constraint {\n    constraint: {\n        target: GameObj;\n        strength: number;\n    };\n}\n\n/**\n * \"FABRIK\": Use Forward And Backward Reaching Inverse Kinematics\n * \"CCD\" : Use Cyclic Coordinate Descent\n */\ntype InverseKinematicsAlgorithm = \"FABRIK\" | \"CCD\";\n\nexport type IKConstraintOpt = {\n    /**\n     * The algorithm to use. Default is FABRIK.\n     */\n    algorithm?: InverseKinematicsAlgorithm;\n    /**\n     * Amount of bones. Default is 1.\n     */\n    depth: number;\n    /**\n     * Amount of ik iterations. Default is 10.\n     */\n    iterations?: number;\n    /**\n     * Between 0 and 1. The percentage of the property being overwritten. Default is 1.\n     */\n    strength?: number;\n};\n\nexport interface IKConstraintComp extends Constraint {\n    constraint: {\n        target: GameObj;\n        iterations: number;\n        strength: number;\n    };\n}\n\nlet systemInstalled = false;\n\nfunction installSystem() {\n    if (systemInstalled) return;\n    systemInstalled = true;\n    // TODO: use a live query for this\n    const constraints: Set<GameObj<Constraint>> = new Set();\n    onAdd(obj => {\n        if (obj.has(\"constraint\")) {\n            constraints.add(obj as GameObj<Constraint>);\n        }\n    });\n    onDestroy(obj => {\n        constraints.delete(obj as GameObj<Constraint>);\n    });\n    onUse((obj, id) => {\n        if (\"constraint\" === id) {\n            constraints.add(obj as GameObj<Constraint>);\n        }\n    });\n    onUnuse((obj, id) => {\n        if (\"constraint\" === id) {\n            constraints.delete(obj as GameObj<Constraint>);\n        }\n    });\n    system(\"constraint\", () => {\n        constraints.forEach(constraint => {\n            constraint.apply();\n        });\n    }, [\n        SystemPhase.BeforeDraw, // Because we need the transform to be up to date\n    ]);\n}\n\nexport const constraint = {\n    /**\n     * A distance constraint\n     * @param target - The object to keep within distance off\n     * @param opt - Options\n     *\n     * @returns DistanceConstraintComp\n     */\n    distance(\n        target: GameObj,\n        opt: DistanceConstraintOpt,\n    ): DistanceConstraintComp {\n        installSystem();\n        return {\n            id: \"constraint\",\n            constraint: {\n                target: target,\n                distance: opt.distance,\n                mode: opt.mode || \"equal\",\n                strength: opt.strength ?? 1,\n            },\n            apply(this: GameObj<PosComp | DistanceConstraintComp>) {\n                const d = vec2(\n                    // We use world distance\n                    this.transform.e - this.constraint.target.transform.e,\n                    this.transform.f - this.constraint.target.transform.f,\n                );\n                const dd = this.constraint.distance * this.constraint.distance;\n                if (\n                    (this.constraint.mode === \"maximum\" && d.slen() > dd)\n                    || (this.constraint.mode === \"minimum\" && d.slen() < dd)\n                    || (this.constraint.mode === \"equal\" && d.slen() != dd)\n                ) {\n                    const l = d.len();\n                    // Modify world position\n                    this.transform.e = lerp(\n                        this.transform.e,\n                        this.constraint.target.transform.e\n                            + d.x / l * this.constraint.distance,\n                        this.constraint.strength,\n                    );\n                    this.transform.f = lerp(\n                        this.transform.f,\n                        this.constraint.target.transform.f\n                            + d.y / l * this.constraint.distance,\n                        this.constraint.strength,\n                    );\n                    // Modify local position\n                    if (this.parent) {\n                        const transform = this.parent?.transform.inverse.mul(\n                            this.transform,\n                        );\n                        this.pos.x = transform.e;\n                        this.pos.y = transform.f;\n                    }\n                    else {\n                        this.pos.x = this.transform.e;\n                        this.pos.y = this.transform.f;\n                    }\n                }\n            },\n        };\n    },\n    /**\n     * A translation constraint\n     * @param target - The object to copy the translation from\n     * @param opt - Options\n     *\n     * @returns TranslationConstraintComp\n     */\n    translation(\n        target: GameObj,\n        opt: TranslationConstraintOpt,\n    ): TranslationConstraintComp {\n        installSystem();\n        return {\n            id: \"constraint\",\n            constraint: {\n                target: target,\n                strength: opt.strength ?? 1,\n                offset: opt.offset || new Vec2(),\n            },\n            apply(this: GameObj<PosComp | TranslationConstraintComp>) {\n                // We use world translation\n                this.transform.e = lerp(\n                    this.transform.e,\n                    this.constraint.target.transform.e\n                        + this.constraint.offset.x,\n                    this.constraint.strength,\n                );\n                this.transform.f = lerp(\n                    this.transform.f,\n                    this.constraint.target.transform.f\n                        + this.constraint.offset.x,\n                    this.constraint.strength,\n                );\n                // Modify local position\n                if (this.parent) {\n                    const transform = this.parent?.transform.inverse.mul(\n                        this.transform,\n                    );\n                    this.pos.x = transform.e;\n                    this.pos.y = transform.f;\n                }\n                else {\n                    this.pos.x = this.transform.e;\n                    this.pos.y = this.transform.f;\n                }\n            },\n        };\n    },\n    /**\n     * A rotation constraint\n     * @param target - The object to copy the rotation from\n     * @param opt - Options\n     *\n     * @returns RotationConstraintComp\n     */\n    rotation(\n        target: GameObj,\n        opt: RotationConstraintOpt,\n    ): RotationConstraintComp {\n        installSystem();\n        return {\n            id: \"constraint\",\n            constraint: {\n                target: target,\n                scale: opt.scale ?? 1,\n                strength: opt.strength ?? 1,\n                offset: opt.offset || 0,\n            },\n            apply(this: GameObj<RotateComp | RotationConstraintComp>) {\n                // We use world rotation\n                const srcAngle = this.transform.getRotation();\n                const dstAngle = this.constraint.target.transform.getRotation();\n                const newAngle = lerp(\n                    srcAngle,\n                    dstAngle * this.constraint.scale + this.constraint.offset,\n                    this.constraint.strength,\n                );\n                const scale = this.transform.getScale();\n                // Update world angle\n                this.transform.setTRS(\n                    this.transform.e,\n                    this.transform.f,\n                    newAngle,\n                    scale.x,\n                    scale.y,\n                );\n                // Modify local angle\n                if (this.parent) {\n                    const transform = this.parent?.transform.inverse.mul(\n                        this.transform,\n                    );\n                    this.angle = transform.getRotation();\n                }\n                else {\n                    this.angle = newAngle;\n                }\n            },\n        };\n    },\n    /**\n     * A scale constraint\n     * @param target - The object to copy the scale from\n     * @param opt - Options\n     *\n     * @returns ScaleConstraintComp\n     */\n    scale(\n        target: GameObj,\n        opt: ScaleConstraintOpt,\n    ): ScaleConstraintComp {\n        installSystem();\n        return {\n            id: \"constraint\",\n            constraint: {\n                target: target,\n                strength: opt.strength ?? 1,\n            },\n            apply(this: GameObj<ScaleConstraintComp | ScaleComp>) {\n                // We use world scale\n                const srcScale = this.transform.getScale();\n                const dstScale = this.constraint.target.transform.getScale();\n                const newScale = lerp(\n                    srcScale,\n                    dstScale,\n                    this.constraint.strength,\n                );\n                const angle = this.transform.getRotation();\n                // Update world scale\n                this.transform.setTRS(\n                    this.transform.e,\n                    this.transform.f,\n                    angle,\n                    newScale.x,\n                    newScale.y,\n                );\n                // Modify local scale\n                if (this.parent) {\n                    const transform = this.parent?.transform.inverse.mul(\n                        this.transform,\n                    );\n                    this.scale = transform.getScale();\n                }\n                else {\n                    this.scale = newScale;\n                }\n            },\n        };\n    },\n    /**\n     * A transform constraint\n     * @param target - The object to copy the transform from\n     * @param opt - Options\n     *\n     * @returns TransformConstraintComp\n     */\n    transform(\n        target: GameObj,\n        opt: TransformConstraintOpt,\n    ): TransformConstraintComp {\n        installSystem();\n        return {\n            id: \"constraint\",\n            constraint: {\n                target: target,\n                strength: opt.strength ?? 1,\n            },\n            apply(\n                this: GameObj<\n                    PosComp | RotateComp | ScaleComp | TransformConstraintComp\n                >,\n            ) {\n                // We use world properties\n                const newX = lerp(\n                    this.transform.e,\n                    this.constraint.target.transform.e,\n                    this.constraint.strength,\n                );\n                const newY = lerp(\n                    this.transform.f,\n                    this.constraint.target.transform.f,\n                    this.constraint.strength,\n                );\n                const srcAngle = this.transform.getRotation();\n                const dstAngle = this.constraint.target.transform.getRotation();\n                const newAngle = lerp(\n                    srcAngle,\n                    dstAngle,\n                    this.constraint.strength,\n                );\n                const srcScale = this.transform.getScale();\n                const dstScale = this.constraint.target.transform.getScale();\n                const newScale = lerp(\n                    srcScale,\n                    dstScale,\n                    this.constraint.strength,\n                );\n                // Update world properties\n                this.transform.setTRS(\n                    newX,\n                    newY,\n                    newAngle,\n                    newScale.x,\n                    newScale.y,\n                );\n                // Modify local properties\n                if (this.parent) {\n                    const transform = this.parent?.transform.inverse.mul(\n                        this.transform,\n                    );\n                    this.pos.x = transform.e;\n                    this.pos.y = transform.f;\n                    this.angle = transform.getRotation();\n                    this.scale = transform.getScale();\n                }\n                else {\n                    this.pos.x = newX;\n                    this.pos.y = newY;\n                    this.angle = newAngle;\n                    this.scale = newScale;\n                }\n            },\n        };\n    },\n    bone(minAngle?: number, maxAngle?: number) {\n        let _minAngle = Math.max(\n            -180,\n            Math.min(minAngle ?? -180, maxAngle ?? 180),\n        );\n        let _maxAngle = Math.min(\n            180,\n            Math.max(minAngle ?? -180, maxAngle ?? 180),\n        );\n        return {\n            id: \"bone\",\n            get minAngle() {\n                return _minAngle;\n            },\n            get maxAngle() {\n                return _maxAngle;\n            },\n            setAngles(minAngle?: number, maxAngle?: number) {\n                _minAngle = Math.max(\n                    -180,\n                    Math.min(minAngle ?? -180, maxAngle ?? 180),\n                );\n                _maxAngle = Math.min(\n                    180,\n                    Math.max(minAngle ?? -180, maxAngle ?? 180),\n                );\n            },\n        };\n    },\n    ik(target: GameObj, opt: IKConstraintOpt): IKConstraintComp {\n        installSystem();\n        const algorithm = opt.algorithm || \"FABRIK\";\n        const depth = opt.depth ?? 1;\n        const iterations = opt.iterations ?? 10;\n        const chain: GameObj[] = [];\n        const length: number[] = [];\n        if (algorithm === \"CCD\") {\n            return {\n                id: \"constraint\",\n                constraint: {\n                    target: target,\n                    iterations: iterations,\n                    strength: opt.strength || 1,\n                },\n                apply(this: GameObj<PosComp | IKConstraintComp>) {\n                    // Get IK chain from end effector to root\n                    const endEffector = chain[0] = this;\n                    for (let i = 1; i <= depth; i++) {\n                        chain[i] = chain[i - 1].parent!;\n                    }\n                    let dx, dy;\n                    for (let it = 0; it < iterations; it++) {\n                        // Rotate every effector in the chain to point towards the target\n                        for (let i = depth; i > 0; i--) {\n                            const effector = chain[i];\n                            const effectorTransform = effector.transform;\n                            if (i !== depth) {\n                                // We updated the transform of the parent, so update this transform\n                                calcTransform(effector, effectorTransform);\n                            }\n\n                            // Angle of effector to target\n                            dx = target.transform.e\n                                - effectorTransform.e;\n                            dy = target.transform.f\n                                - effectorTransform.f;\n                            const angleToTarget = rad2deg(Math.atan2(dy, dx));\n\n                            // Angle of effector to end effector\n                            dx = endEffector.transform.e\n                                - effectorTransform.e;\n                            dy = endEffector.transform.f\n                                - effectorTransform.f;\n                            const angleToEndEffector = rad2deg(\n                                Math.atan2(dy, dx),\n                            );\n\n                            // Rotation to move end effector towards target\n                            const angleCorrection = angleToTarget\n                                - angleToEndEffector;\n\n                            // Update global transform\n                            const rotation = effectorTransform.getRotation();\n                            const scale = effectorTransform.getScale();\n                            effectorTransform.setTRS(\n                                effectorTransform.e,\n                                effectorTransform.f,\n                                rotation + angleCorrection,\n                                scale.x,\n                                scale.y,\n                            );\n                            if (effector.parent) {\n                                // Calculate local rotation\n                                const transform = effector.parent.transform\n                                    .inverse.mul(\n                                        effectorTransform,\n                                    );\n                                let newAngle = clampAngle(\n                                    transform.getRotation(),\n                                );\n                                // If constraint on angle, apply\n                                if (effector.minAngle && effector.maxAngle) {\n                                    newAngle = Math.min(\n                                        Math.max(newAngle, effector.minAngle),\n                                        effector.maxAngle,\n                                    );\n                                }\n                                effector.angle = newAngle;\n                            }\n                            else {\n                                // Local rotation is global rotation\n                                let newAngle = clampAngle(\n                                    rotation + angleCorrection,\n                                );\n                                // If constraint on angle, apply\n                                if (effector.minAngle && effector.maxAngle) {\n                                    newAngle = Math.min(\n                                        Math.max(newAngle, effector.minAngle),\n                                        effector.maxAngle,\n                                    );\n                                }\n                                effector.angle = newAngle;\n                            }\n\n                            if (effector.minAngle && effector.maxAngle) {\n                                // We changed the local angle, so the current effector's transform needs to be updated\n                                updateTransformRecursive(effector);\n                            }\n                            else {\n                                updateChildrenTransformRecursive(effector);\n                            }\n                        }\n                    }\n                },\n            };\n        }\n        else {\n            return {\n                id: \"constraint\",\n                constraint: {\n                    target: target,\n                    iterations: iterations,\n                    strength: opt.strength || 1,\n                },\n                apply(this: GameObj<PosComp | IKConstraintComp>) {\n                    // Get IK chain from end effector to root\n                    const endEffector = chain[0] = this;\n                    // The end effector does not have a length\n                    length[0] = 0;\n                    let dx, dy;\n                    for (let i = 1; i <= depth; i++) {\n                        chain[i] = chain[i - 1].parent!;\n                        dx = chain[i].transform.e\n                            - chain[i - 1].transform.e;\n                        dy = chain[i].transform.f\n                            - chain[i - 1].transform.f;\n                        // Calculate the length of the other effectors\n                        length[i] = Math.sqrt(dx * dx + dy * dy);\n                    }\n                    const root = chain[depth];\n                    const rootPosX = root.transform.e;\n                    const rootPosY = root.transform.f;\n                    // Perform FABRIK\n                    for (let it = 0; it < iterations; it++) {\n                        let l;\n                        // Forward step, pull end effector towards target\n                        endEffector.transform.e = target.transform.e;\n                        endEffector.transform.f = target.transform.f;\n                        // Pull effectors in sequence to restore length\n                        for (let i = 1; i <= depth; i++) {\n                            // Vector towards previous effector\n                            dx = chain[i].transform.e\n                                - chain[i - 1].transform.e;\n                            dy = chain[i].transform.f\n                                - chain[i - 1].transform.f;\n                            l = Math.sqrt(dx * dx + dy * dy);\n                            chain[i].transform.e = chain[i - 1].transform.e\n                                + dx * length[i] / l;\n                            chain[i].transform.f = chain[i - 1].transform.f\n                                + dy * length[i] / l;\n                        }\n                        // Backward step, pull root back to its original position\n                        root.transform.e = rootPosX;\n                        root.transform.f = rootPosY;\n                        // Pull effectors in reverse sequence to restore length\n                        for (let i = depth - 1; i >= 0; i--) {\n                            // Vector towards previous effector\n                            dx = chain[i].transform.e\n                                - chain[i + 1].transform.e;\n                            dy = chain[i].transform.f\n                                - chain[i + 1].transform.f;\n                            l = Math.sqrt(dx * dx + dy * dy);\n                            chain[i].transform.e = chain[i + 1].transform.e\n                                + dx * length[i + 1] / l;\n                            chain[i].transform.f = chain[i + 1].transform.f\n                                + dy * length[i + 1] / l;\n                        }\n                    }\n                    // Modify local position or angle depending on the presence of a rotate\n                    for (let i = depth; i >= 0; i--) {\n                        const obj = chain[i];\n                        // If i < depth, obviously the object has a rent\n                        if (i < depth || obj.parent) {\n                            const parent = obj.parent!;\n                            if (parent.has(\"rotate\")) {\n                                // If the parent has an angle, use the parent's angle and local length\n                                const parentTransform = parent.transform;\n                                // Calculate the difference in angle\n                                const angle = rad2deg(\n                                    Math.atan2(\n                                        obj.transform.f - parentTransform.f,\n                                        obj.transform.e - parentTransform.e,\n                                    ),\n                                );\n                                // Keep the translation and scale\n                                const scale = parentTransform.getScale();\n                                parentTransform.setTRS(\n                                    parentTransform.e,\n                                    parentTransform.f,\n                                    angle, // orient the parent towards the object\n                                    scale.x,\n                                    scale.y,\n                                );\n                                if (parent.parent) {\n                                    const transform = parent.parent.transform\n                                        .inverse.mul(\n                                            parent.transform,\n                                        );\n                                    parent.angle = transform.getRotation();\n                                }\n                                else {\n                                    parent.angle = angle;\n                                }\n\n                                // Update the local properties\n                                const transform = parentTransform.inverse.mul(\n                                    obj.transform,\n                                );\n                                obj.pos.x = transform.e;\n                                obj.pos.y = transform.f;\n                            }\n                            else {\n                                // If there is no angle, just use position\n                                const transform = obj.parent!.transform.inverse\n                                    .mul(\n                                        obj.transform,\n                                    );\n                                obj.pos.x = transform.e;\n                                obj.pos.y = transform.f;\n                            }\n                        }\n                        else {\n                            obj.pos.x = obj.transform.e;\n                            obj.pos.y = obj.transform.f;\n                        }\n                    }\n                },\n            };\n        }\n    },\n};\n", "import { vec2 } from \"../../../math/math\";\nimport { Vec2 } from \"../../../math/Vec2\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { PosComp } from \"./pos\";\n\n/**\n * The {@link follow `follow()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface FollowComp extends Comp {\n    follow: {\n        /**\n         * The object to follow.\n         */\n        obj: GameObj;\n        /**\n         * The offset to follow the object by.\n         */\n        offset: Vec2;\n    };\n}\n\nexport function follow(obj: GameObj, offset?: Vec2): FollowComp {\n    return {\n        id: \"follow\",\n        require: [\"pos\"],\n        follow: {\n            obj: obj,\n            offset: offset ?? vec2(0),\n        },\n        add(this: GameObj<FollowComp | PosComp>) {\n            if (obj.exists()) {\n                this.pos = this.follow.obj.pos.add(this.follow.offset);\n            }\n        },\n        update(this: GameObj<FollowComp | PosComp>) {\n            if (obj.exists()) {\n                this.pos = this.follow.obj.pos.add(this.follow.offset);\n            }\n        },\n    };\n}\n", "import { _k } from \"../../../shared\";\nimport type { Comp } from \"../../../types\";\n\n/**\n * The {@link layer `layer()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface LayerComp extends Comp {\n    /**\n     * Get the index of the current layer the object is assigned to.\n     *\n     * Will always be `null` if the game doesn't use layers.\n     */\n    get layerIndex(): number | null;\n    /**\n     * Get the name of the current layer the object is assigned to.\n     *\n     * Will always be `null` if the game doesn't use layers.\n     */\n    get layer(): string | null;\n    /**\n     * Set the name of the layer the object should be assigned to.\n     *\n     * Throws an error if the game uses layers and the requested layer\n     * wasn't defined.\n     */\n    set layer(name: string);\n\n    serialize(): any;\n}\n\nexport function layer(layer: string): LayerComp {\n    let _layerIndex = _k.game.layers?.indexOf(layer);\n    if (_layerIndex == -1) {\n        throw new Error(`Layer \"${layer}\" does not exist`);\n    }\n\n    return {\n        id: \"layer\",\n        get layerIndex() {\n            return _layerIndex ?? null;\n        },\n        get layer(): string | null {\n            if (!_layerIndex) return null;\n\n            return _k.game.layers?.[_layerIndex] ?? null;\n        },\n        set layer(value: string) {\n            _layerIndex = _k.game.layers?.indexOf(value);\n\n            if (_layerIndex == -1) {\n                throw new Error(`Layer \"${value}\" does not exist`);\n            }\n        },\n        inspect() {\n            return `layer: ${this.layer}`;\n        },\n        serialize() {\n            return { layer: this.layer };\n        },\n    };\n}\n\nexport function layerFactory(data: any) {\n    return layer(data.layer);\n}\n", "import { type SerializedVec2, Vec2 } from \"../../../math/Vec2\";\nimport type { Comp, EmptyComp, GameObj } from \"../../../types\";\nimport type { PosComp } from \"./pos\";\n\n/**\n * The serialized {@link move `move()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\ninterface SerializedMoveComp {\n    dir: SerializedVec2 | number;\n    speed: number;\n}\n\n/**\n * The {@link move `move()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface MoveComp extends Comp {\n    serialize: () => SerializedMoveComp;\n}\n\nexport function move(\n    dir: number | Vec2,\n    speed: number,\n): MoveComp {\n    const d = typeof dir === \"number\" ? Vec2.fromAngle(dir) : dir.unit();\n    return {\n        id: \"move\",\n        require: [\"pos\"],\n        update(this: GameObj<PosComp>) {\n            this.move(d.scale(speed));\n        },\n        serialize() {\n            return {\n                dir: dir instanceof Vec2 ? dir.serialize() : dir,\n                speed: speed,\n            };\n        },\n    };\n}\n\nexport function moveFactory(data: SerializedMoveComp) {\n    if (typeof data.dir == \"object\") {\n        return move(new Vec2(data.dir.x, data.dir.y), data.speed);\n    }\n    else {\n        return move(data.dir, data.speed);\n    }\n}\n", "import { DEF_OFFSCREEN_DIS } from \"../../../constants/general\";\nimport type { KEventController } from \"../../../events/events\";\nimport { onUpdate } from \"../../../events/globalEvents\";\nimport { height, width } from \"../../../gfx/stack\";\nimport { Rect, testRectPoint, vec2 } from \"../../../math/math\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { RectComp } from \"../draw/rect\";\nimport type { PosComp } from \"./pos\";\n\n/**\n * The {@link offscreen `offscreen()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface OffScreenComp extends Comp {\n    /**\n     * The minimum distance that the object must be off the screen by to be considered \"offscreen\".\n     *\n     * If it is undefined, it means that the object will be considered to be offscreen when its bounding rectangle\n     * (defined by width and height) is not intersecting with the screen rectangle.\n     */\n    offscreenDistance: number | undefined;\n    /**\n     * If object is currently out of view.\n     */\n    isOffScreen(): boolean;\n    /**\n     * Register an event that runs when object goes out of view.\n     */\n    onExitScreen(action: () => void): KEventController;\n    /**\n     * Register an event that runs when object enters view.\n     */\n    onEnterScreen(action: () => void): KEventController;\n}\n\n/**\n * Options for {@link offscreen `offscreen()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface OffScreenCompOpt {\n    /**\n     * If hide object when out of view.\n     */\n    hide?: boolean;\n    /**\n     * If pause object when out of view.\n     */\n    pause?: boolean;\n    /**\n     * If unpause object when back in view.\n     */\n    unpause?: boolean;\n    /**\n     * If destroy object when out of view.\n     */\n    destroy?: boolean;\n    /**\n     * The distance when out of view is triggered (default 200).\n     *\n     * @since v3000.0\n     */\n    distance?: number;\n}\n\nexport function offscreen(opt: OffScreenCompOpt = {}): OffScreenComp {\n    let isOut = false;\n    const screenRect = new Rect(vec2(0), width(), height());\n    const selfRect = new Rect(vec2(0), 0, 0);\n\n    const check = (self: GameObj<OffScreenComp>) => {\n        if (self.isOffScreen()) {\n            if (!isOut) {\n                self.trigger(\"exitView\");\n                isOut = true;\n            }\n            if (opt.hide) self.hidden = true;\n            if (opt.pause) self.paused = true;\n            if (opt.destroy) self.destroy();\n        }\n        else {\n            if (isOut) {\n                self.trigger(\"enterView\");\n                isOut = false;\n            }\n            if (opt.hide) self.hidden = false;\n            if (opt.pause) self.paused = false;\n        }\n    };\n\n    return {\n        id: \"offscreen\",\n        require: [\"pos\"],\n        offscreenDistance: opt.distance ?? DEF_OFFSCREEN_DIS,\n        isOffScreen(\n            this: GameObj<PosComp | OffScreenComp | RectComp>,\n        ): boolean {\n            const pos = this.screenPos();\n\n            // This is not possible, screenPos() without arguments returns the pos\n            if (!pos) return false;\n\n            screenRect.width = width();\n            screenRect.height = height();\n            if (!this.offscreenDistance && this.width && this.height) {\n                selfRect.width = this.width;\n                selfRect.height = this.height;\n                selfRect.pos = this.pos;\n                return selfRect.collides(screenRect);\n            }\n            const dist = this.offscreenDistance\n                ? this.offscreenDistance\n                : DEF_OFFSCREEN_DIS;\n            return !testRectPoint(screenRect, pos)\n                && screenRect.sdistToPoint(pos) > (dist * dist);\n        },\n        onExitScreen(this: GameObj, action: () => void): KEventController {\n            return this.on(\"exitView\", action);\n        },\n        onEnterScreen(this: GameObj, action: () => void): KEventController {\n            return this.on(\"enterView\", action);\n        },\n        add(this: GameObj<OffScreenComp>) {\n            if (opt.pause && opt.unpause) onUpdate(() => check(this));\n            else this.onUpdate(() => check(this));\n        },\n    };\n}\n", "import type { Comp } from \"../../../types\";\n\n/**\n * The serialized {@link rotate `rotate()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedRotateComp {\n    angle: number;\n}\n\n/**\n * The {@link rotate `rotate()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface RotateComp extends Comp {\n    /**\n     * Angle in degrees.\n     */\n    angle: number;\n    /**\n     * Rotate in degrees.\n     */\n    rotateBy(angle: number): void;\n    /**\n     * Rotate to a degree (like directly assign to .angle)\n     *\n     * @since v3000.0\n     */\n    rotateTo(s: number): void;\n\n    serialize(): { angle: number };\n}\n\nexport function rotate(a?: number): RotateComp {\n    return {\n        id: \"rotate\",\n        angle: a ?? 0,\n        rotateBy(angle: number) {\n            this.angle += angle;\n        },\n        rotateTo(angle: number) {\n            this.angle = angle;\n        },\n        inspect() {\n            return `angle: ${Math.round(this.angle)}`;\n        },\n        serialize() {\n            return { angle: this.angle };\n        },\n    };\n}\n\nexport function rotateFactory(data: SerializedRotateComp) {\n    return rotate(data.angle);\n}\n", "import { vec2, type Vec2Args } from \"../../../math/math\";\nimport { type SerializedVec2, Vec2 } from \"../../../math/Vec2\";\nimport type { Comp } from \"../../../types\";\n\n/**\n * The serialized {@link scale `scale()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedScaleComp {\n    scale: SerializedVec2;\n}\n\n/**\n * The {@link scale `scale()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface ScaleComp extends Comp {\n    /**\n     * The current scale of the object\n     *\n     * @returns The current scale of the object as a {@link Vec2 `Vec2`}\n     */\n    scale: Vec2;\n    /**\n     * Set the scale of the object to a number\n     */\n    scaleTo(s: number): void;\n    /**\n     * Set the scale of the object to a Vec2\n     */\n    scaleTo(s: Vec2): void;\n    /**\n     * Set the scale of the object to a number for x and y\n     */\n    scaleTo(sx: number, sy: number): void;\n    /**\n     * Scale the object by a number\n     */\n    scaleBy(s: number): void;\n    /**\n     * Scale the object by a Vec2\n     */\n    scaleBy(s: Vec2): void;\n    /**\n     * Scale the object by a number for x and y\n     */\n    scaleBy(sx: number, sy: number): void;\n    /**\n     * Serialize the current state comp\n     */\n    serialize(): SerializedScaleComp;\n}\n\nexport function scale(...args: Vec2Args): ScaleComp {\n    if (args.length === 0) {\n        return scale(1);\n    }\n\n    let _scale = vec2(...args);\n\n    return {\n        id: \"scale\",\n        set scale(value: Vec2) {\n            if (value instanceof Vec2 === false) {\n                throw Error(\n                    \"The scale property on scale is a vector. Use scaleTo or scaleBy to set the scale with a number.\",\n                );\n            }\n\n            _scale = vec2(value);\n        },\n        get scale() {\n            return _scale;\n        },\n        scaleTo(...args: Vec2Args) {\n            _scale = vec2(...args);\n        },\n        scaleBy(...args: Vec2Args) {\n            _scale = _scale.scale(vec2(...args));\n        },\n        inspect() {\n            if (_scale.x == _scale.y) {\n                return `scale: ${_scale.x.toFixed(1)}x`;\n            }\n            else {\n                return `scale: (${_scale.x.toFixed(1)}x, ${\n                    _scale.y.toFixed(1)\n                }y)`;\n            }\n        },\n        serialize() {\n            return { scale: this.scale.serialize() };\n        },\n    };\n}\n\nexport function scaleFactory(data: SerializedScaleComp) {\n    return scale(data.scale.x, data.scale.y);\n}\n", "import { vec2, type Vec2Args } from \"../../../math/math\";\nimport { type SerializedVec2, Vec2 } from \"../../../math/Vec2\";\nimport type { Comp } from \"../../../types\";\n\n/**\n * The serialized {@link skew `skew()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedSkewComp {\n    skew: SerializedVec2;\n}\n\n/**\n * The {@link skew `skew()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface SkewComp extends Comp {\n    /**\n     * The current skew of the object\n     *\n     * @returns The current skew of the object as a {@link Vec2 `Vec2`}\n     */\n    skew: Vec2;\n    /**\n     * Serialize the current state comp\n     */\n    serialize(): SerializedSkewComp;\n}\n\nexport function skew(...args: Vec2Args): SkewComp {\n    if (args.length === 0) {\n        return skew(1);\n    }\n\n    let _skew = vec2(...args);\n\n    return {\n        id: \"skew\",\n        set skew(value: Vec2) {\n            if (value instanceof Vec2 === false) {\n                throw Error(\n                    \"The scale property on skew is a vector.\",\n                );\n            }\n\n            _skew = vec2(value);\n        },\n        get skew() {\n            return _skew;\n        },\n        inspect() {\n            if (_skew.x == _skew.y) {\n                return `skew: ${_skew.x.toFixed(1)}x`;\n            }\n            else {\n                return `skew: (${_skew.x.toFixed(1)}x, ${_skew.y.toFixed(1)}y)`;\n            }\n        },\n        serialize() {\n            return { skew: this.skew.serialize() };\n        },\n    };\n}\n\nexport function skewFactory(data: SerializedSkewComp) {\n    return skew(data.skew.x, data.skew.y);\n}\n", "import type { Comp } from \"../../../types\";\n\n/**\n * The serialized {@link z `z()`} component.\n *\n * @group Components\n * @subgroup Component Serialization\n */\nexport interface SerializedZComp {\n    z: number;\n}\n\n/**\n * The {@link z `z()`} component.\n *\n * @group Components\n * @subgroup Component Types\n */\nexport interface ZComp extends Comp {\n    /**\n     * Defines the z-index of this game obj\n     */\n    z: number;\n    /**\n     * Serialize the current state comp\n     */\n    serialize(): SerializedZComp;\n}\n\nexport function z(z: number): ZComp {\n    return {\n        id: \"z\",\n        z: z,\n        inspect() {\n            return `z: ${this.z}`;\n        },\n        serialize() {\n            return { z: this.z };\n        },\n    };\n}\n\nexport function zFactory(data: SerializedZComp) {\n    return z(data.z);\n}\n", "import type { Asset } from \"../../assets/asset\";\nimport type { BitmapFontData } from \"../../assets/bitmapFont\";\nimport type { FontData } from \"../../assets/font\";\nimport type { Uniform } from \"../../assets/shader\";\nimport type { Color } from \"../../math/color\";\nimport type { Vec2 } from \"../../math/Vec2\";\nimport type { Anchor, RenderProps } from \"../../types\";\nimport { formatText } from \"../formatText\";\nimport { drawFormattedText } from \"./drawFormattedText\";\n\n/**\n * How the text should look like.\n *\n * @group Draw\n * @subgroup Types\n */\nexport type DrawTextOpt = RenderProps & {\n    /**\n     * The text to render.\n     */\n    text: string;\n    /**\n     * The name of font to use.\n     */\n    font?:\n        | string\n        | FontData\n        | Asset<FontData>\n        | BitmapFontData\n        | Asset<BitmapFontData>;\n    /**\n     * The size of text (the height of each character).\n     */\n    size?: number;\n    /**\n     * Text alignment (default \"left\")\n     *\n     * @since v3000.0\n     */\n    align?: TextAlign;\n    /**\n     * The maximum width. Will wrap word around if exceed.\n     */\n    width?: number;\n    /**\n     * The gap between each line (only available for bitmap fonts).\n     *\n     * @since v2000.2\n     */\n    lineSpacing?: number;\n    /**\n     * The gap between each character (only available for bitmap fonts).\n     *\n     * @since v2000.2\n     */\n    letterSpacing?: number;\n    /**\n     * The anchor point, or the pivot point. Default to \"topleft\".\n     */\n    anchor?: Anchor | Vec2;\n    /**\n     * Transform the pos, scale, rotation or color for each character based on the index or char (only available for bitmap fonts).\n     *\n     * @since v2000.1\n     */\n    transform?: CharTransform | CharTransformFunc;\n    /**\n     * Stylesheet for styled chunks, in the syntax of \"this is a [stylename]styled[/stylename] word\" (only available for bitmap fonts).\n     *\n     * @since v2000.2\n     */\n    styles?: Record<string, CharTransform | CharTransformFunc>;\n    /**\n     * If true, any (whitespace) indent on the first line of the paragraph\n     * will be copied to all of the lines for those parts that text-wrap.\n     */\n    indentAll?: boolean;\n};\n\n/**\n * A function that returns a character transform config. Useful if you're generating dynamic styles.\n *\n * @group Rendering\n * @subgroup Text\n */\nexport type CharTransformFunc = (idx: number, ch: string) => CharTransform;\n\n/**\n * Describes how to transform each character.\n *\n * @group Rendering\n * @subgroup Text\n */\nexport interface CharTransform {\n    /**\n     * Offset to apply to the position of the text character.\n     * Shifts the character's position by the specified 2D vector.\n     */\n    pos?: Vec2;\n\n    /**\n     * Scale transformation to apply to the text character's current scale.\n     * When a number, it is scaled uniformly.\n     * Given a 2D vector, it is scaled independently along the X and Y axis.\n     */\n    scale?: Vec2 | number;\n\n    /**\n     * Increases the amount of degrees to rotate the text character.\n     */\n    angle?: number;\n\n    /**\n     * Color transformation applied to the text character.\n     * Multiplies the current color with this color.\n     */\n    color?: Color;\n\n    /**\n     * Opacity multiplication applied to the text character.\n     * For example, an opacity of 0.4 with 2 set in the transformation, the resulting opacity will be 0.8 (0.4 \u00D7 2).\n     */\n    opacity?: number;\n\n    /**\n     * If true, the styles applied by this specific {@link DrawTextOpt.styles} entry transform\n     * will override, rather than compose with, the default styles given in {@link DrawTextOpt.transform} and by other\n     * components' styles.\n     */\n    override?: boolean;\n\n    /**\n     * If the font for this character should be different from the default font\n     * or the one specified in {@link DrawTextOpt.font}.\n     * Because the font can't be composed like the other properties,\n     * this will override the font even if {@link CharTransform.override} is false.\n     */\n    font?: string | FontData;\n\n    /**\n     * If true, characters that have a X scale that is not 1 won't have the bounding box stretched to fit the character,\n     * and may end up overlapping with adjacent characters.\n     *\n     * @default true\n     */\n    stretchInPlace?: boolean;\n\n    /**\n     * A name for a shader that will be applied to this character only.\n     */\n    shader?: string;\n\n    /**\n     * Values to use for the shader's uniform inputs.\n     * If there is no shader set (by this character's transform or an entire-text\n     * transform), this is not used.\n     */\n    uniform?: Uniform;\n}\n\n/**\n * How the text should be aligned.\n *\n * @group Rendering\n * @subgroup Text\n */\nexport type TextAlign =\n    | \"center\"\n    | \"left\"\n    | \"right\";\n\nexport function drawText(opt: DrawTextOpt) {\n    drawFormattedText(formatText(opt));\n}\n", "import { _k } from \"../../shared\";\nimport { flush } from \"../stack\";\n\nexport function drawUnscaled(content: () => void) {\n    flush();\n    const ow = _k.gfx.width;\n    const oh = _k.gfx.height;\n    _k.gfx.width = _k.gfx.viewport.width;\n    _k.gfx.height = _k.gfx.viewport.height;\n    content();\n    flush();\n    _k.gfx.width = ow;\n    _k.gfx.height = oh;\n}\n", "import { DBG_FONT } from \"../constants/general\";\nimport { drawFormattedText } from \"../gfx/draw/drawFormattedText\";\nimport { drawRect } from \"../gfx/draw/drawRect\";\nimport { drawText } from \"../gfx/draw/drawText\";\nimport { drawUnscaled } from \"../gfx/draw/drawUnscaled\";\nimport { formatText } from \"../gfx/formatText\";\nimport { height, popTransform, width } from \"../gfx/stack\";\nimport { rgb } from \"../math/color\";\nimport { vec2 } from \"../math/math\";\nimport { _k } from \"../shared\";\n\nexport const throwError = (err: string) => {\n    handleErr(err);\n};\n\nexport const handleErr = (err: unknown) => {\n    if (_k.game.crashed) return;\n    _k.game.crashed = true;\n    _k.audio.ctx.suspend();\n    let error: Error;\n\n    if (err instanceof Error) {\n        error = err;\n    }\n    else {\n        error = new Error(String(err));\n    }\n\n    if (!error.message) {\n        error.message = \"Unknown error, check console for more info\";\n    }\n\n    function showErrorScreen() {\n        _k.app.state.stopped = true;\n        _k.frameRenderer.frameStart();\n\n        drawUnscaled(() => {\n            const pad = 32;\n            const gap = 16;\n            const gw = width();\n            const gh = height();\n\n            const textStyle = {\n                size: 36,\n                width: gw - pad * 2,\n                letterSpacing: 4,\n                lineSpacing: 4,\n                font: DBG_FONT,\n                fixed: true,\n            };\n\n            drawRect({\n                width: gw,\n                height: gh,\n                color: rgb(0, 0, 255),\n                fixed: true,\n            });\n\n            const title = formatText({\n                ...textStyle,\n                text: \"Error\",\n                pos: vec2(pad),\n                color: rgb(255, 128, 0),\n                fixed: true,\n            });\n\n            drawFormattedText(title);\n\n            drawText({\n                ...textStyle,\n                text: esc(error.message),\n                pos: vec2(pad, pad + title.height + gap),\n                fixed: true,\n            });\n\n            popTransform();\n            _k.game.events.trigger(\"error\", error);\n        });\n\n        _k.frameRenderer.frameEnd();\n    }\n\n    showErrorScreen();\n\n    // TODO: Make this a setting\n    if (!error.message.startsWith(\"[rendering]\")) {\n        throw error;\n    }\n    else {\n        // We don't throw rendering errors,\n        // but we log them to the console\n        // This is for \"headless\" rendering\n        console.error(error);\n    }\n};\n\nfunction esc(t: string) {\n    return t.replaceAll(/(?<!\\\\)\\[/g, \"\\\\[\");\n}\n", "import { _k } from \"../../shared\";\nimport { flush } from \"../stack\";\n\nexport function drawStenciled(\n    content: () => void,\n    mask: () => void,\n    test: number,\n) {\n    const gl = _k.gfx.ggl.gl;\n\n    flush();\n    gl.clear(gl.STENCIL_BUFFER_BIT);\n    gl.enable(gl.STENCIL_TEST);\n\n    // don't perform test, pure write\n    gl.stencilFunc(\n        gl.NEVER,\n        1,\n        0xFF,\n    );\n\n    // always replace since we're writing to the buffer\n    gl.stencilOp(\n        gl.REPLACE,\n        gl.REPLACE,\n        gl.REPLACE,\n    );\n\n    mask();\n    flush();\n\n    // perform test\n    gl.stencilFunc(\n        test,\n        1,\n        0xFF,\n    );\n\n    // don't write since we're only testing\n    gl.stencilOp(\n        gl.KEEP,\n        gl.KEEP,\n        gl.KEEP,\n    );\n\n    content();\n    flush();\n    gl.disable(gl.STENCIL_TEST);\n}\n", "import { _k } from \"../../shared\";\nimport { drawStenciled } from \"./drawStenciled\";\n\nexport function drawMasked(content: () => void, mask: () => void) {\n    const gl = _k.gfx.ggl.gl;\n\n    drawStenciled(content, mask, gl.EQUAL);\n}\n", "import { _k } from \"../../shared\";\nimport { drawStenciled } from \"./drawStenciled\";\n\nexport function drawSubtracted(content: () => void, mask: () => void) {\n    const gl = _k.gfx.ggl.gl;\n\n    drawStenciled(content, mask, gl.NOTEQUAL);\n}\n", "import type { TextureOpt } from \"../types\";\nimport { type GfxCtx, Texture } from \"./gfx\";\n\n/**\n * @group Rendering\n * @subgroup Canvas\n */\nexport class FrameBuffer {\n    ctx: GfxCtx;\n    tex: Texture;\n    glFramebuffer: WebGLFramebuffer;\n    glRenderbuffer: WebGLRenderbuffer;\n\n    constructor(ctx: GfxCtx, w: number, h: number, opt: TextureOpt = {}) {\n        this.ctx = ctx;\n        const gl = ctx.gl;\n        ctx.onDestroy(() => this.free());\n        this.tex = new Texture(ctx, w, h, opt);\n\n        const frameBuffer = gl.createFramebuffer();\n        const renderBuffer = gl.createRenderbuffer();\n\n        if (!frameBuffer || !renderBuffer) {\n            throw new Error(\"Failed to create framebuffer\");\n        }\n\n        this.glFramebuffer = frameBuffer;\n        this.glRenderbuffer = renderBuffer;\n\n        this.bind();\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, w, h);\n        gl.framebufferTexture2D(\n            gl.FRAMEBUFFER,\n            gl.COLOR_ATTACHMENT0,\n            gl.TEXTURE_2D,\n            this.tex.glTex,\n            0,\n        );\n        gl.framebufferRenderbuffer(\n            gl.FRAMEBUFFER,\n            gl.DEPTH_STENCIL_ATTACHMENT,\n            gl.RENDERBUFFER,\n            this.glRenderbuffer,\n        );\n        this.unbind();\n    }\n\n    get width() {\n        return this.tex.width;\n    }\n\n    get height() {\n        return this.tex.height;\n    }\n\n    toImageData() {\n        const gl = this.ctx.gl;\n        const data = new Uint8ClampedArray(this.width * this.height * 4);\n        this.bind();\n        gl.readPixels(\n            0,\n            0,\n            this.width,\n            this.height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            data,\n        );\n        this.unbind();\n        // flip vertically\n        const bytesPerRow = this.width * 4;\n        const temp = new Uint8Array(bytesPerRow);\n        for (let y = 0; y < (this.height / 2 | 0); y++) {\n            const topOffset = y * bytesPerRow;\n            const bottomOffset = (this.height - y - 1) * bytesPerRow;\n            temp.set(data.subarray(topOffset, topOffset + bytesPerRow));\n            data.copyWithin(\n                topOffset,\n                bottomOffset,\n                bottomOffset + bytesPerRow,\n            );\n            data.set(temp, bottomOffset);\n        }\n        return new ImageData(data, this.width, this.height);\n    }\n\n    toDataURL() {\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        canvas.width = this.width;\n        canvas.height = this.height;\n\n        if (!ctx) throw new Error(\"Failed to get 2d context\");\n\n        ctx.putImageData(this.toImageData(), 0, 0);\n        return canvas.toDataURL();\n    }\n\n    clear() {\n        const gl = this.ctx.gl;\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n\n    draw(action: () => void) {\n        this.bind();\n        action();\n        this.unbind();\n    }\n\n    bind() {\n        this.ctx.pushFramebuffer(this.glFramebuffer);\n        this.ctx.pushRenderbuffer(this.glRenderbuffer);\n        this.ctx.pushViewport({ x: 0, y: 0, w: this.width, h: this.height });\n    }\n\n    unbind() {\n        this.ctx.popFramebuffer();\n        this.ctx.popRenderbuffer();\n        this.ctx.popViewport();\n    }\n\n    free() {\n        const gl = this.ctx.gl;\n        gl.deleteFramebuffer(this.glFramebuffer);\n        gl.deleteRenderbuffer(this.glRenderbuffer);\n        this.tex.free();\n    }\n}\n", "// Make is the entity factory function\n\nimport { KEvent, KEventHandler } from \"../../events/events\";\nimport { Mat23 } from \"../../math/math\";\nimport { _k } from \"../../shared\";\nimport type { Comp, CompList, GameObj } from \"../../types\";\nimport { attachAppToGameObjRaw, GameObjRawPrototype } from \"./GameObjRaw\";\n\n/*\nOrder of making a game object:\n\n1. We receive an array of components and tags from add([])\n2. We create the GameObjRaw object using our prototype\n3. We call .use() or .tag() on elements in the compAndTags array\n*/\n\n/*\nWe use makeInternal() to create the root game object, and make() to create\nthe rest of the game objects.\n*/\nexport function makeInternal<T extends CompList<unknown>>(\n    id: number,\n    compsAndTags?: [...T],\n): GameObj<T[number]> {\n    const addCompIdsToTags = id == 0\n        ? false\n        : _k.globalOpt.tagComponentIds;\n\n    // The game object from the prototype\n    const obj: GameObj = Object.create(GameObjRawPrototype);\n\n    // Shadow individual properties\n    obj._parent = null as unknown as GameObj;\n    obj._onCurCompCleanup = null;\n    obj.children = [];\n    obj._cleanups = {};\n    obj._compStates = new Map();\n    obj._compsIds = new Set();\n    obj._anonymousCompStates = [];\n    obj._tags = new Set(\"*\");\n    obj._events = new KEventHandler();\n    obj._updateEvents = new KEvent<[]>();\n    obj._fixedUpdateEvents = new KEvent<[]>();\n    obj._drawEvents = new KEvent<[]>();\n    obj._inputEvents = [];\n    obj.paused = false;\n    obj.hidden = false;\n    obj.id = id;\n    obj.transform = new Mat23();\n\n    // We only need to modify the prototype the first time, when we know App\n    // state is available (at the moment of create the root game object)\n    if (id == 0) {\n        attachAppToGameObjRaw();\n    }\n\n    // Adding components passed from add([]);\n    // We register here: The objects, because you can also pass tags to add().\n    if (!compsAndTags) return obj as GameObj<T[number]>;\n\n    let comps = [];\n    let tagList = [];\n\n    for (const compOrTag of compsAndTags) {\n        if (typeof compOrTag == \"string\") {\n            tagList.push(compOrTag);\n        }\n        else {\n            const compId = (<Comp> compOrTag).id;\n\n            if (compId) {\n                obj._compsIds.add(compId);\n                if (addCompIdsToTags) tagList.push(compId);\n            }\n\n            comps.push(compOrTag);\n        }\n    }\n\n    // Using .use and .tag we trigger onUse and onTag events correctly\n    for (const comp of comps) {\n        obj.use(<Comp> comp);\n    }\n\n    for (const tag of tagList) {\n        obj.tag(tag);\n    }\n\n    // We cast the type as .use() doesn't add the types\n    return obj as GameObj<T[number]>;\n}\n\nexport function make<T extends CompList<unknown>>(\n    compsAndTags: [...T],\n): GameObj<T[number]> {\n    const obj = makeInternal(_k.game.gameObjLastId, compsAndTags);\n    _k.game.gameObjLastId++;\n    return obj;\n}\n", "// The E of ECS\n\nimport type { AppEvents } from \"../../app/app\";\nimport type { KAPLAYCtx } from \"../../core/contextType\";\nimport { throwError } from \"../../core/errors\";\nimport type { GameObjEventNames } from \"../../events/eventMap\";\nimport {\n    type KEvent,\n    KEventController,\n    type KEventHandler,\n} from \"../../events/events\";\nimport {\n    onAdd,\n    onDestroy,\n    onTag,\n    onUntag,\n    onUnuse,\n    onUse,\n} from \"../../events/globalEvents\";\nimport { drawMasked } from \"../../gfx/draw/drawMasked\";\nimport { beginPicture, endPicture, Picture } from \"../../gfx/draw/drawPicture\";\nimport { drawSubtracted } from \"../../gfx/draw/drawSubstracted\";\nimport { FrameBuffer } from \"../../gfx/FrameBuffer\";\nimport {\n    flush,\n    loadMatrix,\n    multRotate,\n    multScaleV,\n    multSkewV,\n    multTranslateV,\n    popTransform,\n    pushTransform,\n    storeMatrix,\n} from \"../../gfx/stack\";\nimport { Mat23 } from \"../../math/math\";\nimport { calcTransform } from \"../../math/various\";\nimport { _k } from \"../../shared\";\nimport type {\n    Comp,\n    CompList,\n    GameObj,\n    GameObjID,\n    GameObjInspect,\n    GetOpt,\n    QueryOpt,\n    RenderTarget,\n    Tag,\n} from \"../../types\";\nimport type { MaskComp } from \"../components/draw/mask\";\nimport type { FixedComp } from \"../components/transform/fixed\";\nimport type { LayerComp } from \"../components/transform/layer\";\nimport type { PosComp } from \"../components/transform/pos\";\nimport type { RotateComp } from \"../components/transform/rotate\";\nimport type { ScaleComp } from \"../components/transform/scale\";\nimport type { SkewComp } from \"../components/transform/skew\";\nimport type { ZComp } from \"../components/transform/z\";\nimport { make } from \"./make\";\nimport { deserializePrefabAsset, type SerializedGameObj } from \"./prefab\";\nimport { isFixed } from \"./utils\";\n\nexport enum KeepFlags {\n    Pos = 1,\n    Angle = 2,\n    Scale = 4,\n    All = 7,\n}\n\nexport type SetParentOpt = {\n    keep: KeepFlags;\n};\n\n/**\n * Base interface of all game objects.\n *\n * @since v2000.0\n * @group Game Obj\n * @subgroup Types\n */\nexport interface GameObjRaw {\n    /**\n     * The unique id of the game obj.\n     */\n    id: GameObjID;\n    /**\n     * Get or set the parent game obj.\n     *\n     * @since v4000.0\n     */\n    parent: GameObj | null;\n    /**\n     * Get all children game objects.\n     *\n     * @readonly\n     * @since v3000.0\n     */\n    children: GameObj[];\n    /**\n     * Get the tags of a game object. For update it, use `tag()` and `untag()`.\n     *\n     * @readonly\n     * @since v3001.0\n     */\n    tags: string[];\n    /**\n     * Calculated transform matrix of a game object.\n     *\n     * @since v3000.0\n     */\n    transform: Mat23;\n    /**\n     * If draw the game obj (run \"draw\" event or not).\n     *\n     * @since v2000.0\n     */\n    hidden: boolean;\n    /**\n     * If update the game obj (run \"update\" event or not).\n     *\n     * @since v2000.0\n     */\n    paused: boolean;\n    /**\n     * The canvas to draw this game object on\n     *\n     * @since v3001.0\n     */\n    target?: RenderTarget;\n    /**\n     * Set the parent game obj with additional options.\n     *\n     * @since v4000.0\n     */\n    setParent(p: GameObj, opt: SetParentOpt): void;\n    /**\n     * Add a child.\n     *\n     * @param comps - The components to add.\n     *\n     * @returns The added game object.\n     * @since v3000.0\n     */\n    add<T extends CompList<unknown>>(comps?: [...T]): GameObj<T[number]>;\n    /**\n     * Add a prefab.\n     *\n     * @param nameOrObject - Name of registered prefab using loadPrefab() or plain obj returned by createPrefab().\n     *\n     * @returns The added game object.\n     * @since v4000.0\n     */\n    addPrefab<T extends CompList<unknown>>(\n        nameOrObject: object | string,\n        compList?: [...T],\n    ): GameObj<T[number]>;\n    /**\n     * Create a serialized version of this Game Object.\n     *\n     * @returns The serialized game object\n     * @since v4000.0\n     */\n    serialize(): SerializedGameObj;\n    /**\n     * Remove and re-add the game obj, without triggering add / destroy events.\n     *\n     * @param obj - The game object to re-add.\n     *\n     * @returns The re-added game object.\n     * @since v3000.0\n     */\n    readd<T>(obj: GameObj<T>): GameObj<T>;\n    /**\n     * Remove a child.\n     *\n     * @param obj - The game object to remove.\n     *\n     * @since v3000.0\n     */\n    remove(obj: GameObj): void;\n    /**\n     * Remove all children with a certain tag.\n     *\n     * @param tag - The tag to remove.\n     *\n     * @since v3000.0\n     */\n    removeAll(tag: Tag): void;\n    /**\n     * Remove this game obj from scene.\n     *\n     * @since v2000.0\n     */\n    destroy(): void;\n    /**\n     * Remove all children.\n     *\n     * @since v3000.0\n     */\n    removeAll(): void;\n    /**\n     * If game obj is attached to the scene graph.\n     *\n     * @returns true if attached, false otherwise.\n     * @since v2000.0\n     */\n    exists(): boolean;\n    /**\n     * Check if is an ancestor (recursive parent) of another game object\n     *\n     * @returns true if is ancestor, false otherwise.\n     * @since v3000.0\n     */\n    isAncestorOf(obj: GameObj): boolean;\n    /**\n     * Get a list of all game objs with certain tag.\n     *\n     * @param tag - The tag to get.\n     *\n     * @since v3000.0\n     */\n    get<T = any>(tag: Tag | Tag[], opts?: GetOpt): GameObj<T>[];\n    /**\n     * Get a list of all game objs with certain properties.\n     *\n     * @param opt - The properties to get.\n     *\n     * @since v3001.0\n     */\n    query(opt: QueryOpt): GameObj[];\n    /**\n     * Update this game object and all children game objects.\n     *\n     * @since v3000.0\n     */\n    update(): void;\n    /**\n     * Update this game object and all children game objects.\n     *\n     * @since v3001.0\n     */\n    fixedUpdate(): void;\n    /**\n     * Draw this game object and all children game objects.\n     *\n     * @since v3000.0\n     */\n    draw(): void;\n    drawTree(): void;\n    /**\n     * Gather debug info of all comps.\n     *\n     * @since v2000.0\n     */\n    inspect(): GameObjInspect;\n    /**\n     * Draw debug info in inspect mode\n     *\n     * @since v3000.0\n     */\n    drawInspect: () => void;\n    /**\n     * This method is called to transform and collect objects which should be drawn layered\n     */\n    collect(objects: GameObj<any>[]): void;\n    /**\n     * This method is called to transform objects\n     */\n    transformTree(): void;\n    /**\n     * Add a component.\n     *\n     * @example\n     * ```js\n     * const obj = add([\n     *    sprite(\"bean\"),\n     * ]);\n     *\n     * // Add opacity\n     * obj.use(opacity(0.5));\n     * ```\n     *\n     * @since v2000.0\n     */\n    use(comp: Comp): void;\n    /**\n     * Remove a component with its id (the component name)\n     *\n     * @param comp - The component id to remove. It means the name, if sprite, then it's \"sprite\".\n     *\n     * @example\n     * ```js\n     * // Remove sprite component\n     * obj.unuse(\"sprite\");\n     * ```\n     *\n     * @since v2000.0\n     */\n    unuse(comp: string): void;\n    /**\n     * Check if game object has a certain component.\n     *\n     * @param compId - The component id(s) to check.\n     * @param op - The operator to use when searching for multiple components. Default is \"and\".\n     *\n     * @example\n     * ```js\n     * // Check if game object has sprite component\n     * if(obj.has(\"sprite\")) {\n     *     debug.log(\"has sprite component\");\n     * }\n     *\n     * // Check if game object has tags\n     * obj.has([\"tag1\", \"tag2\"]); // AND, it has both tags\n     * obj.has([\"tag1\", \"tag2\"], \"or\"); // OR, it has either tag1 or tag2\n     * ```\n     *\n     * @returns true if has the component(s), false otherwise.\n     * @since v3001.0.5\n     * @experimental This feature is in experimental phase, it will be fully released in v3001.1.0\n     */\n    has(compId: string | string[], op?: \"and\" | \"or\"): boolean;\n    /**\n     * Get state for a specific comp.\n     *\n     * @param id - The component id.\n     *\n     * @since v2000.0\n     */\n    c(id: string): Comp | null;\n    /**\n     * Add a tag(s) to the game obj.\n     *\n     * @param tag - The tag(s) to add.\n     *\n     * @example\n     * ```js\n     * // add enemy tag\n     * obj.tag(\"enemy\");\n     *\n     * // add multiple tags\n     * obj.tag([\"enemy\", \"boss\"]);\n     * ```\n     *\n     * @since v3001.0.5\n     * @experimental This feature is in experimental phase, it will be fully released in v3001.1.0\n     */\n    tag(tag: Tag | Tag[]): void;\n    /**\n     * Remove a tag(s) from the game obj.\n     *\n     * @param tag - The tag(s) to remove.\n     *\n     * @example\n     * ```js\n     * // remove enemy tag\n     * obj.untag(\"enemy\");\n     *\n     * // remove multiple tags\n     * obj.untag([\"enemy\", \"boss\"]);\n     * ```\n     *\n     * @since v3001.0.5\n     * @experimental This feature is in experimental phase, it will be fully released in v3001.1.0\n     */\n    untag(tag: Tag | Tag[]): void;\n    /**\n     * If there's certain tag(s) on the game obj.\n     *\n     * @param tag - The tag(s) for checking.\n     * @param op - The operator to use when searching for multiple tags. Default is \"and\".\n     *\n     * @since v3001.0.5\n     * @experimental This feature is in experimental phase, it will be fully released in v3001.1.0\n     */\n    is(tag: Tag | Tag[], op?: \"and\" | \"or\"): boolean;\n    /**\n     * Register an event.\n     *\n     * @param event - The event name.\n     * @param action - The action to run when event is triggered.\n     *\n     * @returns The event controller.\n     * @since v2000.0\n     */\n    on(\n        event: GameObjEventNames | (string & {}),\n        action: (...args: any) => void,\n    ): KEventController;\n    /**\n     * Trigger an event.\n     *\n     * @param event - The event name.\n     * @param args - The arguments to pass to the event action.\n     *\n     * @since v2000.0\n     */\n    trigger(event: string, ...args: any): void;\n    /**\n     * Clear all events.\n     */\n    clearEvents: () => void;\n    /**\n     * Register an event that runs when the game obj is added to the scene.\n     *\n     * @returns The event controller.\n     * @since v2000.0\n     */\n    onAdd(action: () => void): KEventController;\n    /**\n     * Register an event that runs every frame as long as the game obj exists.\n     *\n     * @returns The event controller.\n     * @since v2000.1\n     */\n    onUpdate(action: () => void): KEventController;\n    /**\n     * Register an event that runs every frame as long as the game obj exists.\n     *\n     * @returns The event controller.\n     * @since v2000.1\n     */\n    onFixedUpdate(action: () => void): KEventController;\n    /**\n     * Register an event that runs every frame as long as the game obj exists (this is the same as `onUpdate()`, but all draw events are run after all update events).\n     *\n     * @returns The event controller.\n     * @since v2000.1\n     */\n    onDraw(action: () => void): KEventController;\n    /**\n     * Register an event that runs when the game obj is destroyed.\n     *\n     * @returns The event controller.\n     * @since v2000.1\n     */\n    onDestroy(action: () => void): KEventController;\n    /**\n     * Register an event that runs when a component is used.\n     *\n     * @returns The event controller.\n     * @since v4000.0\n     */\n    onUse(action: (id: string) => void): KEventController;\n    /**\n     * Register an event that runs when a component is unused.\n     *\n     * @returns The event controller.\n     * @since v4000.0\n     */\n    onUnuse(action: (id: string) => void): KEventController;\n    /**\n     * Register an event that runs when a tag is added.\n     *\n     * @returns The event controller.\n     * @since v4000.0\n     */\n    onTag(action: (tag: string) => void): KEventController;\n    /**\n     * Register an event that runs when a tag is removed.\n     *\n     * @returns The event controller.\n     * @since v4000.0\n     */\n    onUntag(action: (tag: string) => void): KEventController;\n    onKeyDown: KAPLAYCtx[\"onKeyDown\"];\n    onKeyPress: KAPLAYCtx[\"onKeyPress\"];\n    onKeyPressRepeat: KAPLAYCtx[\"onKeyPressRepeat\"];\n    onKeyRelease: KAPLAYCtx[\"onKeyRelease\"];\n    onCharInput: KAPLAYCtx[\"onCharInput\"];\n    onMouseDown: KAPLAYCtx[\"onMouseDown\"];\n    onMousePress: KAPLAYCtx[\"onMousePress\"];\n    onMouseRelease: KAPLAYCtx[\"onMouseRelease\"];\n    onMouseMove: KAPLAYCtx[\"onMouseMove\"];\n    onTouchStart: KAPLAYCtx[\"onTouchStart\"];\n    onTouchMove: KAPLAYCtx[\"onTouchMove\"];\n    onTouchEnd: KAPLAYCtx[\"onTouchEnd\"];\n    onScroll: KAPLAYCtx[\"onScroll\"];\n    onGamepadButtonDown: KAPLAYCtx[\"onGamepadButtonDown\"];\n    onGamepadButtonPress: KAPLAYCtx[\"onGamepadButtonPress\"];\n    onGamepadButtonRelease: KAPLAYCtx[\"onGamepadButtonRelease\"];\n    onGamepadStick: KAPLAYCtx[\"onGamepadStick\"];\n    onButtonDown: KAPLAYCtx[\"onButtonDown\"];\n    onButtonPress: KAPLAYCtx[\"onButtonPress\"];\n    onButtonRelease: KAPLAYCtx[\"onButtonRelease\"];\n}\n\nexport type InternalGameObjRaw = GameObjRaw & {\n    /** @readonly */\n    _parent: GameObj;\n    /** @readonly */\n    _compsIds: Set<string>;\n    /** @readonly */\n    _compStates: Map<string, Comp>;\n    /** @readonly */\n    _anonymousCompStates: Comp[];\n    /** @readonly */\n    _cleanups: Record<string, (() => any)[]>;\n    /** @readonly */\n    _events: KEventHandler<any>;\n    /** @readonly */\n    _fixedUpdateEvents: KEvent<[]>;\n    /** @readonly */\n    _updateEvents: KEvent<[]>;\n    /** @readonly */\n    _drawEvents: KEvent<[]>;\n    /** @readonly */\n    _inputEvents: KEventController[];\n    /** @readonly */\n    _onCurCompCleanup: Function | null;\n    /** @readonly */\n    _tags: Set<Tag>;\n    /** @readonly */\n    _paused: boolean;\n    /** @readonly */\n    _drawLayerIndex: number;\n\n    /**\n     * Adds a component or anonymous component.\n     */\n    _addComp(comp: Comp): void;\n    /**\n     * Removes a component without checking for dependencies\n     */\n    _removeComp(id: string): void;\n    /**\n     * Check if any id of a component's require is not present in `_compsIds`, if\n     * there's, throw an error.\n     *\n     * @param comp - The component for checking.\n     */\n    _checkDependencies(comp: Comp): void;\n    /**\n     * Check if any component (in `_compStates`) is dependent of compId, if\n     * there's, throw an error.\n     *\n     * @param compId - Component ID for searching.\n     */\n    _checkDependents(compId: string): void;\n};\n\ntype GameObjTransform =\n    & GameObj<PosComp | RotateComp | ScaleComp>\n    & InternalGameObjRaw;\ntype GameObjCamTransform =\n    & GameObj<\n        PosComp | RotateComp | ScaleComp | FixedComp | MaskComp\n    >\n    & InternalGameObjRaw;\n\nconst COMP_DESC = new Set([\"id\", \"require\"]);\nconst COMP_EVENTS = new Set([\n    \"add\",\n    \"fixedUpdate\",\n    \"update\",\n    \"draw\",\n    \"destroy\",\n    \"inspect\",\n    \"drawInspect\",\n    \"serialize\",\n]);\n\ntype GarbageCollectorArray = (() => any)[];\n\nexport const GameObjRawPrototype: Omit<InternalGameObjRaw, AppEvents> = {\n    // This chain of `as any`, is because we never should use this object\n    // directly, it's only a prototype. These properties WILL be defined\n    // (by our factory function `make`) when we create a new game object.\n    _paused: null as any,\n    _anonymousCompStates: null as any,\n    _cleanups: null as any,\n    _compsIds: null as any,\n    _compStates: null as any,\n    _events: null as any,\n    _fixedUpdateEvents: null as any,\n    _inputEvents: null as any,\n    _onCurCompCleanup: null as any,\n    _parent: null as any,\n    _tags: null as any,\n    _updateEvents: null as any,\n    _drawEvents: null as any,\n    _drawLayerIndex: null as any,\n    children: null as any,\n    hidden: null as any,\n    id: null as any,\n    transform: null as any,\n    target: null as any,\n\n    // #region Setters and Getters\n    set parent(p: GameObj) {\n        // We assume this will never be ran in root\n        // so this is GameObj\n\n        if (this.id === null) {\n            throw new Error(\"Can't re-parent destroyed object\");\n        }\n\n        if (this._parent === p) return;\n        const index = this._parent\n            ? this._parent.children.indexOf(this as unknown as GameObj)\n            : -1;\n        if (index !== -1) {\n            this._parent.children.splice(index, 1);\n        }\n        this._parent = p;\n        if (p) {\n            p.children.push(this as unknown as GameObj);\n        }\n    },\n\n    set paused(paused: boolean) {\n        if (this._paused === paused) return;\n        this._paused = paused;\n\n        for (const e of this._inputEvents) {\n            e.paused = paused;\n        }\n    },\n\n    get paused() {\n        return this._paused;\n    },\n\n    get parent() {\n        return this._parent;\n    },\n\n    get tags() {\n        return Array.from(this._tags);\n    },\n\n    // #endregion\n\n    // #region Object\n    setParent(\n        this: GameObjTransform,\n        p: GameObj,\n        opt: SetParentOpt,\n    ) {\n        if (this._parent === p) return;\n        const oldTransform = this._parent?.transform;\n        const newTransform = p.transform;\n        if ((opt.keep & KeepFlags.Pos) && this.pos !== undefined) {\n            oldTransform.transformPointV(this.pos, this.pos);\n            newTransform.inverse.transformPointV(this.pos, this.pos);\n        }\n        if ((opt.keep & KeepFlags.Angle) && this.angle !== undefined) {\n            this.angle += newTransform.getRotation()\n                - oldTransform.getRotation();\n        }\n        if ((opt.keep & KeepFlags.Scale) && this.scale !== undefined) {\n            this.scale = this.scale.scale(\n                oldTransform.getScale().invScale(newTransform.getScale()),\n            );\n        }\n        this.parent = p;\n    },\n\n    add<T2 extends CompList<unknown>>(\n        this: InternalGameObjRaw,\n        a: [...T2],\n    ): GameObj<T2[number]> {\n        if (this.id === null) {\n            throw new Error(\"Can't add child to destroyed object\");\n        }\n\n        const obj = make(a);\n\n        if (obj.parent) {\n            throw new Error(\n                \"Cannot add a game obj that already has a parent.\",\n            );\n        }\n\n        obj.parent = this;\n\n        calcTransform(obj, obj.transform);\n\n        obj.trigger(\"add\", obj);\n        _k.game.events.trigger(\"add\", obj);\n\n        return obj;\n    },\n\n    addPrefab<T extends CompList<unknown>>(\n        name: string | SerializedGameObj,\n        comps?: T,\n    ) {\n        if (this.id === null) {\n            throw new Error(\"Can't add child to destroyed object\");\n        }\n\n        let data: SerializedGameObj;\n\n        if (typeof name === \"string\") {\n            const prefabAsset = _k.assets.prefabAssets.get(name);\n\n            if (prefabAsset) {\n                data = prefabAsset.data!;\n            }\n            else {\n                throw new Error(`Can't add unknown prefab named ${name}`);\n            }\n        }\n        else {\n            data = name;\n        }\n\n        const deserializedCompList = deserializePrefabAsset(data);\n        if (comps) deserializedCompList.push(...comps as Comp[]);\n\n        const obj = this.add(deserializedCompList) as GameObj<T[number]>;\n\n        if (data.children) {\n            for (const child of data.children) {\n                obj.addPrefab(child);\n            }\n        }\n\n        return obj;\n    },\n\n    serialize(this: InternalGameObjRaw) {\n        if (this.id === null) {\n            throw new Error(\"Can't serialize destroyed object\");\n        }\n\n        const data: SerializedGameObj = {\n            components: {},\n            tags: [],\n        };\n\n        for (const [id, c] of this._compStates) {\n            if (\"serialize\" in c) {\n                data.components[id] = (c.serialize as () => any)();\n            }\n        }\n\n        if (this.children.length > 0) {\n            data.children = [];\n\n            for (const children of this.children) {\n                data.children.push(children.serialize());\n            }\n        }\n\n        data.tags = [...this.tags];\n\n        return data;\n    },\n\n    readd<T>(this: InternalGameObjRaw, obj: GameObj<T>): GameObj<T> {\n        const idx = this.children.indexOf(obj);\n\n        if (idx !== -1) {\n            this.children.splice(idx, 1);\n            this.children.push(obj);\n        }\n\n        return obj;\n    },\n\n    remove(this: InternalGameObjRaw, obj: GameObj): void {\n        obj.parent = null;\n\n        const trigger = (o: GameObj) => {\n            o.trigger(\"destroy\");\n            _k.game.events.trigger(\"destroy\", o);\n            o.children.forEach((child) => trigger(child));\n            o.id = null as any;\n        };\n\n        trigger(obj);\n    },\n\n    removeAll(this: InternalGameObjRaw, tag?: Tag): void {\n        if (tag) {\n            this.get(tag).forEach((obj) => this.remove(obj));\n        }\n        else {\n            for (const child of [...this.children]) this.remove(child);\n        }\n    },\n\n    destroy(this: InternalGameObjRaw) {\n        if (this.parent) {\n            this.parent.remove(this);\n        }\n    },\n\n    exists(this: InternalGameObjRaw) {\n        return this.id !== null && this.parent !== null;\n    },\n\n    isAncestorOf(this: InternalGameObjRaw, obj: GameObj) {\n        if (!obj.parent) {\n            return false;\n        }\n        return obj.parent === this || this.isAncestorOf(obj.parent);\n    },\n    // #endregion\n\n    // #region Get & Query\n    get<T = any>(\n        this: InternalGameObjRaw,\n        t: Tag | Tag[],\n        opts: GetOpt = {},\n    ): GameObj<T>[] {\n        const compIdAreTags = _k.globalOpt.tagComponentIds;\n\n        const checkTagsOrComps = (child: GameObj, t: Tag | Tag[]) => {\n            if (opts.only === \"comps\") {\n                return child.has(t);\n            }\n            else if (opts.only === \"tags\") {\n                return child.is(t);\n            }\n            else {\n                return child.is(t) || child.has(t);\n            }\n        };\n\n        let list: GameObj[] = opts.recursive\n            ? this.children.flatMap(\n                function recurse(child: GameObj): GameObj[] {\n                    return [child, ...child.children.flatMap(recurse)];\n                },\n            )\n            : this.children;\n\n        list = list.filter((child) => t ? checkTagsOrComps(child, t) : true);\n\n        if (opts.liveUpdate) {\n            const isChild = (obj: GameObj) => {\n                return opts.recursive\n                    ? this.isAncestorOf(obj)\n                    : obj.parent === this;\n            };\n\n            const events: KEventController[] = [];\n\n            // TODO: clean up when obj destroyed\n            events.push(onAdd((obj) => {\n                if (isChild(obj) && checkTagsOrComps(obj, t)) {\n                    list.push(obj);\n                }\n            }));\n            events.push(onDestroy((obj) => {\n                if (checkTagsOrComps(obj, t)) {\n                    const idx = list.findIndex((o) => o.id === obj.id);\n                    if (idx !== -1) {\n                        list.splice(idx, 1);\n                    }\n                }\n            }));\n            // If tags are components, we need to use these callbacks, whether watching tags or components\n            // If tags are not components, we only need to use these callbacks if this query looks at components\n            if (compIdAreTags || opts.only !== \"tags\") {\n                events.push(onUse((obj, id) => {\n                    if (isChild(obj) && checkTagsOrComps(obj, t)) {\n                        const idx = list.findIndex((o) => o.id === obj.id);\n                        if (idx == -1) {\n                            list.push(obj);\n                        }\n                    }\n                }));\n                events.push(onUnuse((obj, id) => {\n                    if (isChild(obj) && !checkTagsOrComps(obj, t)) {\n                        const idx = list.findIndex((o) => o.id === obj.id);\n                        if (idx !== -1) {\n                            list.splice(idx, 1);\n                        }\n                    }\n                }));\n            }\n            // If tags are components, we don't need to use these callbacks\n            // If tags are not components, we only need to use these callbacks if this query looks at tags\n            if (!compIdAreTags && opts.only !== \"comps\") {\n                events.push(onTag((obj, tag) => {\n                    if (isChild(obj) && checkTagsOrComps(obj, t)) {\n                        const idx = list.findIndex((o) => o.id === obj.id);\n                        if (idx == -1) {\n                            list.push(obj);\n                        }\n                    }\n                }));\n                events.push(onUntag((obj, tag) => {\n                    if (isChild(obj) && !checkTagsOrComps(obj, t)) {\n                        const idx = list.findIndex((o) => o.id === obj.id);\n                        if (idx !== -1) {\n                            list.splice(idx, 1);\n                        }\n                    }\n                }));\n            }\n            this.onDestroy(() => {\n                for (const ev of events) {\n                    ev.cancel();\n                }\n            });\n        }\n\n        return list as GameObj<T>[];\n    },\n\n    query(this: GameObjTransform, opt: QueryOpt) {\n        const hierarchy = opt.hierarchy || \"children\";\n        const include = opt.include;\n        const exclude = opt.exclude;\n        let list: GameObj[] = [];\n\n        switch (hierarchy) {\n            case \"children\":\n                list = this.children;\n                break;\n            case \"siblings\":\n                list = this.parent\n                    ? this.parent.children.filter((o: GameObj) => o !== this)\n                    : [];\n                break;\n            case \"ancestors\":\n                let parent = this.parent;\n                while (parent) {\n                    list.push(parent);\n                    parent = parent.parent;\n                }\n                break;\n            case \"descendants\":\n                list = this.children.flatMap(\n                    function recurse(child: GameObj): GameObj[] {\n                        return [\n                            child,\n                            ...child.children.flatMap(recurse),\n                        ];\n                    },\n                );\n                break;\n        }\n\n        if (include) {\n            const includeOp = opt.includeOp || \"and\";\n\n            if (includeOp === \"and\" || !Array.isArray(opt.include)) {\n                // Accept if all match\n                list = list.filter(o => o.is(include));\n            }\n            else { // includeOp == \"or\"\n                // Accept if some match\n                list = list.filter(o =>\n                    (opt.include as string[]).some(t => o.is(t))\n                );\n            }\n        }\n\n        if (exclude) {\n            const excludeOp = opt.includeOp || \"and\";\n            if (excludeOp === \"and\" || !Array.isArray(opt.include)) {\n                // Reject if all match\n                list = list.filter(o => !o.is(exclude));\n            }\n            else { // includeOp == \"or\"\n                // Reject if some match\n                list = list.filter(o =>\n                    !(opt.exclude as string[]).some(t => o.is(t))\n                );\n            }\n        }\n\n        if (opt.visible === true) {\n            list = list.filter(o => o.visible);\n        }\n\n        if (opt.distance) {\n            if (!this.pos) {\n                throw Error(\n                    \"Can't do a distance query from an object without pos\",\n                );\n            }\n            const distanceOp = opt.distanceOp || \"near\";\n            const sdist = opt.distance * opt.distance;\n            if (distanceOp === \"near\") {\n                list = list.filter(o =>\n                    o.pos && this.pos.sdist(o.pos) <= sdist\n                );\n            }\n            else { // distanceOp === \"far\"\n                list = list.filter(o => o.pos && this.pos.sdist(o.pos) > sdist);\n            }\n        }\n        if (opt.name) {\n            list = list.filter(o => o.name === opt.name);\n        }\n        return list;\n    },\n    // #endregion\n\n    // #region Lifecycle\n    update(this: GameObj<LayerComp> & InternalGameObjRaw) {\n        if (this.paused) return;\n        this._updateEvents.trigger();\n        this._drawLayerIndex = this.layerIndex\n            ?? (this.parent\n                ? this.parent._drawLayerIndex\n                : _k.game.defaultLayerIndex);\n        for (let i = 0; i < this.children.length; i++) {\n            this.children[i].update();\n        }\n    },\n\n    fixedUpdate(this: InternalGameObjRaw) {\n        if (this.paused) return;\n        this._fixedUpdateEvents.trigger();\n        for (let i = 0; i < this.children.length; i++) {\n            this.children[i].fixedUpdate();\n        }\n    },\n\n    draw(this: InternalGameObjRaw) {\n        this.drawTree();\n    },\n\n    drawTree(this: GameObjCamTransform) {\n        if (this.hidden) return;\n\n        const objects = new Array<\n            & GameObj<LayerComp | ZComp | FixedComp | MaskComp>\n            & InternalGameObjRaw\n        >();\n\n        // For each child call collect\n        for (let i = 0; i < this.children.length; i++) {\n            if (this.children[i].hidden) continue;\n            this.children[i].collect(objects);\n        }\n\n        // Sort objects on layer, then z\n        objects.sort((o1, o2) => {\n            const l1 = o1._drawLayerIndex;\n            const l2 = o2._drawLayerIndex;\n            return (l1 - l2) || (o1.z ?? 0) - (o2.z ?? 0);\n        });\n\n        // If this subtree is masking, the root is drawn into the mask, then the children are drawn\n        if (this.mask) {\n            const maskFunc = {\n                intersect: drawMasked,\n                subtract: drawSubtracted,\n            }[this.mask];\n            if (!maskFunc) {\n                throw new Error(`Invalid mask func: \"${this.mask}\"`);\n            }\n            maskFunc(() => {\n                // Draw children masked\n                const f = _k.gfx.fixed;\n                // We push once, then update the current transform only\n                pushTransform();\n                for (let i = 0; i < objects.length; i++) {\n                    _k.gfx.fixed = isFixed(objects[i]);\n                    loadMatrix(objects[i].transform);\n                    objects[i]._drawEvents.trigger();\n                }\n                popTransform();\n                _k.gfx.fixed = f;\n            }, () => {\n                pushTransform();\n                loadMatrix(this.transform);\n                // Draw mask\n                this._drawEvents.trigger();\n                popTransform();\n            });\n        }\n        else {\n            // If this subtree is rendered to a target, enable target\n            if (this.target) {\n                if (!this.target?.refreshOnly || !this.target?.isFresh) {\n                    flush();\n                    if (this.target.destination instanceof FrameBuffer) {\n                        this.target.destination.bind();\n                    }\n                    else if (this.target.destination instanceof Picture) {\n                        beginPicture(this.target.destination);\n                    }\n                }\n            }\n\n            if (!this.target?.refreshOnly || !this.target?.isFresh) {\n                const f = _k.gfx.fixed;\n                pushTransform();\n                // Parent is drawn before children if !childrenOnly\n                if (!this.target?.childrenOnly) {\n                    _k.gfx.fixed = isFixed(this);\n                    loadMatrix(this.transform);\n                    this._drawEvents.trigger();\n                }\n                // Draw children\n                for (let i = 0; i < objects.length; i++) {\n                    // An object with a mask is drawn at draw time, but the transform still needs to be calculated,\n                    // so we push the parent's transform and pretend we are\n                    _k.gfx.fixed = isFixed(objects[i]);\n                    if (objects[i].mask) {\n                        loadMatrix(objects[i].parent!.transform);\n                        objects[i].drawTree();\n                    }\n                    else {\n                        loadMatrix(objects[i].transform);\n                        objects[i]._drawEvents.trigger();\n                    }\n                }\n                popTransform();\n                _k.gfx.fixed = f;\n            }\n\n            // If this subtree is rendered to a target, disable target\n            if (this.target) {\n                if (!this.target?.refreshOnly || !this.target?.isFresh) {\n                    flush();\n                    if (this.target.destination instanceof FrameBuffer) {\n                        this.target.destination.unbind();\n                    }\n                    else if (this.target.destination instanceof Picture) {\n                        endPicture();\n                    }\n                }\n            }\n\n            // If this object needs the refresh flag in order to draw children, set it to fresh\n            if (this.target?.refreshOnly && !this.target?.isFresh) {\n                this.target.isFresh = true;\n            }\n\n            // If children only flag is on\n            if (this.target?.childrenOnly) {\n                // Parent is drawn on screen, children are drawn in target\n                const f = _k.gfx.fixed;\n                _k.gfx.fixed = isFixed(this);\n                pushTransform();\n                loadMatrix(this.transform);\n                this._drawEvents.trigger();\n                popTransform();\n                _k.gfx.fixed = f;\n            }\n        }\n    },\n\n    inspect(this: InternalGameObjRaw): GameObjInspect {\n        const info = {} as GameObjInspect;\n\n        for (const [tag, comp] of this._compStates) {\n            info[tag] = comp.inspect?.() ?? null;\n        }\n\n        for (const [i, comp] of this._anonymousCompStates.entries()) {\n            if (comp.inspect) {\n                info[i] = comp.inspect();\n                continue;\n            }\n\n            for (const [key, value] of Object.entries(comp)) {\n                if (typeof value === \"function\") {\n                    continue;\n                }\n                else {\n                    info[key] = `${key}: ${value}`;\n                }\n            }\n        }\n\n        return info;\n    },\n\n    drawInspect(this: GameObj<PosComp | ScaleComp | RotateComp>) {\n        if (this.hidden) return;\n\n        for (let i = 0; i < this.children.length; i++) {\n            this.children[i].drawInspect();\n        }\n\n        loadMatrix(this.transform);\n        this.trigger(\"drawInspect\");\n    },\n\n    transformTree(\n        this: GameObj<\n            PosComp | ScaleComp | RotateComp | SkewComp | FixedComp | MaskComp\n        >,\n    ) {\n        pushTransform();\n        if (this.pos) multTranslateV(this.pos);\n        if (this.angle) multRotate(this.angle);\n        if (this.scale) multScaleV(this.scale);\n\n        if (this.skew) console.log(_k.gfx.transform, this.skew);\n\n        if (this.skew) multSkewV(this.skew);\n\n        if (!this.transform) this.transform = new Mat23();\n        storeMatrix(this.transform);\n\n        if (this.skew) console.log(this.transform);\n\n        for (let i = 0; i < this.children.length; i++) {\n            if (this.children[i].hidden) continue;\n            this.children[i].transformTree();\n        }\n\n        popTransform();\n    },\n\n    collect(\n        this: GameObj<\n            PosComp | ScaleComp | RotateComp | FixedComp | MaskComp\n        >,\n        objects: GameObj<any>[],\n    ) {\n        // Add to objects\n        objects.push(this);\n\n        // Recurse on children\n        for (let i = 0; i < this.children.length; i++) {\n            // While we could do this test in collect, it would mean an extra function call\n            // so it is better to do this preemptively\n            if (this.children[i].hidden) continue;\n            if (this.target) {\n                this.drawTree();\n            }\n            else if (!this.mask) {\n                this.children[i].collect(objects);\n            }\n        }\n    },\n    // #endregion\n\n    // #region Comps\n    _addComp(comp: Comp) {\n        const addCompIdAsTag = this.id == 0\n            ? false\n            : _k.globalOpt.tagComponentIds;\n\n        /** Garbage Collector */\n        if (comp.id) this._compsIds.add(comp.id);\n        let gc: GarbageCollectorArray;\n\n        // If that component got an ID, we need to create the cleanups[compId]\n        // data for cleaning later on removing\n        if (comp.id) {\n            this._cleanups[comp.id] = [];\n            gc = this._cleanups[comp.id];\n            this._compStates.set(comp.id, comp);\n        }\n        else {\n            gc = [];\n            this._anonymousCompStates.push(comp);\n        }\n\n        // We assign every property to the GameObj prototype\n        for (const key in comp) {\n            // These are properties from the component data (id, require), shouldn't\n            // be added to the game obj prototype, that's why we continue\n            if (COMP_DESC.has(key)) {\n                continue;\n            }\n\n            const prop = Object.getOwnPropertyDescriptor(comp, key);\n            if (!prop) continue;\n\n            if (typeof prop.value === \"function\") {\n                // @ts-expect-error Yeah\n                comp[key] = comp[key].bind(this);\n            }\n\n            if (prop.set) {\n                Object.defineProperty(comp, key, {\n                    set: prop.set.bind(this),\n                });\n            }\n\n            if (prop.get) {\n                Object.defineProperty(comp, key, {\n                    get: prop.get.bind(this),\n                });\n            }\n\n            // For component events: add, update, destroy\n            if (COMP_EVENTS.has(key)) {\n                // Automatically clean up events created by components in add() stage\n                if (key == \"add\") {\n                    const func = () => {\n                        this._onCurCompCleanup = (c: any) => gc.push(c);\n                        comp[key]?.();\n                        this._onCurCompCleanup = null;\n                    };\n\n                    gc.push(this.on(key, <any> func).cancel);\n                }\n                else {\n                    const func = comp[<keyof typeof comp> key];\n\n                    gc.push(this.on(key, <any> func).cancel);\n                }\n            }\n            else {\n                // @ts-ignore\n                if (this[key] === undefined) {\n                    // Assign comp fields to game obj\n                    Object.defineProperty(this, key, {\n                        get: () => comp[<keyof typeof comp> key],\n                        set: (val) => comp[<keyof typeof comp> key] = val,\n                        configurable: true,\n                        enumerable: true,\n                    });\n                    // @ts-ignore\n                    gc.push(() => delete this[key]);\n                }\n                else {\n                    const originalCompId = this._compStates.values().find(c =>\n                        (c as any)[key] !== undefined\n                    )?.id;\n                    throw new Error(\n                        `Duplicate component property: \"${key}\" while adding component \"${comp.id}\"`\n                            + (originalCompId\n                                ? ` (originally added by \"${originalCompId}\")`\n                                : \"\"),\n                    );\n                }\n            }\n        }\n\n        // We add it to gc in case of obj.unuse()\n        if (comp.destroy) {\n            gc.push(comp.destroy.bind(this));\n        }\n\n        if (comp.id && addCompIdAsTag) {\n            this.tag(comp.id);\n        }\n\n        // If the object already exists and add hook is present, run it\n        if (this.id != 0 && this.exists() && comp.add) {\n            this._onCurCompCleanup = (c: any) => gc.push(c);\n            comp.add.call(this);\n            this._onCurCompCleanup = null;\n        }\n\n        if (this.id != 0 && comp.id) {\n            this.trigger(\"use\", comp.id);\n            _k.game.events.trigger(\n                \"use\",\n                this as unknown as GameObj,\n                comp.id,\n            );\n        }\n    },\n\n    _removeComp(this: InternalGameObjRaw, id) {\n        const addCompIdAsTag = this.id === 0\n            ? false\n            : _k.globalOpt.tagComponentIds;\n\n        this._compsIds.delete(id);\n        this._compStates.delete(id);\n        if (addCompIdAsTag) this._tags.delete(id);\n\n        this.trigger(\"unuse\", id);\n        _k.game.events.trigger(\"unuse\", this, id);\n\n        if (this._cleanups[id]) {\n            this._cleanups[id].forEach((e) => e());\n            delete this._cleanups[id];\n        }\n    },\n\n    _checkDependencies(comp: Comp) {\n        if (!comp.require) return;\n\n        for (const dep of comp.require) {\n            if (!this._compsIds.has(dep)) {\n                throwError(\n                    `Component \"${comp.id}\" requires component \"${dep}\"`,\n                );\n            }\n        }\n    },\n\n    _checkDependents(compId: string) {\n        for (const comp of this._compStates.values()) {\n            if (comp.require && comp.require.includes(compId)) {\n                throwError(\n                    `Can't remove ${compId} component, it is required by \"${comp.id}\" component\"`,\n                );\n            }\n        }\n    },\n\n    use(this: InternalGameObjRaw, comp: Comp) {\n        if (!comp || typeof comp != \"object\") {\n            throw new Error(\n                `You can only pass objects to .use(), you passed a \"${typeof comp}\"`,\n            );\n        }\n\n        if (comp.id && this.has(comp.id)) {\n            this._removeComp(comp.id);\n        }\n\n        this._addComp(comp);\n        this._checkDependencies(comp);\n    },\n\n    // Remove components\n    unuse(this: InternalGameObjRaw, id: string) {\n        if (!this.has(id)) return;\n\n        this._removeComp(id);\n        this._checkDependents(id);\n    },\n\n    has(\n        this: InternalGameObjRaw,\n        compList: string | string[],\n        op: \"and\" | \"or\" = \"and\",\n    ): boolean {\n        if (Array.isArray(compList)) {\n            if (op === \"and\") {\n                return compList.every((c) => this._compStates.has(c));\n            }\n            else {\n                return compList.some(c => this._compStates.has(c));\n            }\n        }\n        else {\n            return this._compStates.has(compList);\n        }\n    },\n\n    c(this: InternalGameObjRaw, id: string): Comp | null {\n        return this._compStates.get(id) ?? null;\n    },\n\n    // #endregion\n\n    // #region Tags\n    tag(this: InternalGameObjRaw, tag: Tag | Tag[]): void {\n        if (Array.isArray(tag)) {\n            for (const t of tag) {\n                this._tags.add(t);\n                this.trigger(\"tag\", t);\n                _k.game.events.trigger(\"tag\", this as GameObj, t);\n            }\n        }\n        else {\n            this._tags.add(tag);\n            this.trigger(\"tag\", tag);\n            _k.game.events.trigger(\"tag\", this as GameObj, tag);\n        }\n    },\n\n    untag(this: InternalGameObjRaw, tag: Tag | Tag[]): void {\n        if (Array.isArray(tag)) {\n            for (const t of tag) {\n                this._tags.delete(t);\n                this.trigger(\"untag\", t);\n                _k.game.events.trigger(\"untag\", this, t);\n            }\n        }\n        else {\n            this._tags.delete(tag);\n            this.trigger(\"untag\", tag);\n            _k.game.events.trigger(\"untag\", this, tag);\n        }\n    },\n\n    is(\n        this: InternalGameObjRaw,\n        tag: Tag | Tag[],\n        op: \"or\" | \"and\" = \"and\",\n    ): boolean {\n        if (Array.isArray(tag)) {\n            if (op === \"and\") {\n                return tag.every(tag => this._tags.has(tag));\n            }\n            else {\n                return tag.some(tag => this._tags.has(tag));\n            }\n        }\n        else {\n            return this._tags.has(tag);\n        }\n    },\n    // #endregion\n\n    // #region Events\n    on(\n        this: InternalGameObjRaw,\n        name: string,\n        action: (...args: unknown[]) => void,\n    ): KEventController {\n        const ctrl = ((func) => {\n            switch (name) {\n                case \"fixedUpdate\":\n                    return this._fixedUpdateEvents.add(func);\n                case \"update\":\n                    return this._updateEvents.add(func);\n                case \"draw\":\n                    return this._drawEvents.add(func);\n                default:\n                    return this._events.on(name, func);\n            }\n        })(action.bind(this));\n\n        if (this._onCurCompCleanup) {\n            this._onCurCompCleanup(() => ctrl.cancel());\n        }\n\n        return ctrl;\n    },\n\n    trigger(this: InternalGameObjRaw, name: string, ...args: unknown[]): void {\n        this._events.trigger(name, ...args);\n    },\n\n    clearEvents(this: InternalGameObjRaw) {\n        this._events.clear();\n        this._drawEvents.clear();\n        this._updateEvents.clear();\n        this._fixedUpdateEvents.clear();\n        while (this._inputEvents.length) this._inputEvents.pop()?.cancel();\n    },\n    // #endregion\n\n    // #region Helper Events\n    onAdd(cb: () => void): KEventController {\n        return this.on(\"add\", cb);\n    },\n\n    onFixedUpdate(cb: () => void): KEventController {\n        return this.on(\"fixedUpdate\", cb);\n    },\n\n    onUpdate(cb: () => void): KEventController {\n        return this.on(\"update\", cb);\n    },\n\n    onDraw(cb: () => void): KEventController {\n        return this.on(\"draw\", cb);\n    },\n\n    onDestroy(action: () => void): KEventController {\n        return this.on(\"destroy\", action);\n    },\n\n    onTag(action: (id: string) => void): KEventController {\n        return this.on(\"tag\", action);\n    },\n\n    onUntag(action: (id: string) => void): KEventController {\n        return this.on(\"untag\", action);\n    },\n\n    onUse(action: (id: string) => void): KEventController {\n        return this.on(\"use\", action);\n    },\n\n    onUnuse(action: (id: string) => void): KEventController {\n        return this.on(\"unuse\", action);\n    },\n    // #endregion\n};\n\n// #region App Events in Proto\nexport function attachAppToGameObjRaw() {\n    // We add App Events for \"attaching\" it to game object\n    const appEvs = [\n        \"onKeyPress\",\n        \"onKeyPressRepeat\",\n        \"onKeyDown\",\n        \"onKeyRelease\",\n        \"onMousePress\",\n        \"onMouseDown\",\n        \"onMouseRelease\",\n        \"onMouseMove\",\n        \"onCharInput\",\n        \"onMouseMove\",\n        \"onTouchStart\",\n        \"onTouchMove\",\n        \"onTouchEnd\",\n        \"onScroll\",\n        \"onGamepadButtonPress\",\n        \"onGamepadButtonDown\",\n        \"onGamepadButtonRelease\",\n        \"onGamepadStick\",\n        \"onButtonPress\",\n        \"onButtonDown\",\n        \"onButtonRelease\",\n    ] satisfies [...AppEvents[]];\n\n    for (const e of appEvs) {\n        const obj = GameObjRawPrototype as Record<string, any>;\n\n        obj[e] = function(this: InternalGameObjRaw, ...args: [any]) {\n            // @ts-ignore\n            const ev: KEventController = _k.app[e]?.(...args);\n            ev.paused = this.paused;\n\n            this._inputEvents.push(ev);\n\n            this.onDestroy(() => ev.cancel());\n\n            // This only happens if obj.has(\"stay\");\n            this.on(\"sceneEnter\", () => {\n                // All app events are already canceled by changing the scene\n                // so we don't need to event.cancel();\n                this._inputEvents.splice(this._inputEvents.indexOf(ev), 1);\n\n                // create a new event with the same arguments\n                // @ts-ignore\n                const newEv = _k.app[e]?.(...args);\n\n                // Replace the old event handler with the new one\n                // old KEventController.cancel() => new KEventController.cancel()\n                KEventController.replace(ev, newEv);\n                this._inputEvents.push(ev);\n            });\n\n            return ev;\n        };\n    }\n}\n// #endregion\n", "import { vec2 } from \"../../../math/math\";\nimport { _k } from \"../../../shared\";\nimport type { Comp, GameObj } from \"../../../types\";\nimport type { ScaleComp } from \"../transform/scale\";\n\nexport function boom(speed: number = 2, size: number = 1): Comp {\n    let time = 0;\n    return {\n        require: [\"scale\"],\n        update(this: GameObj<ScaleComp>) {\n            const s = Math.sin(time * speed) * size;\n            if (s < 0) {\n                this.destroy();\n            }\n            this.scale = vec2(s);\n            time += _k.app.dt();\n        },\n    };\n}\n", "import type { Vec2 } from \"../../../math/Vec2\";\nimport { _k } from \"../../../shared\";\nimport type { CompList, GameObj } from \"../../../types\";\nimport { sprite } from \"../../components/draw/sprite\";\nimport { boom } from \"../../components/misc/boom\";\nimport { stay } from \"../../components/misc/stay\";\nimport { timer } from \"../../components/misc/timer\";\nimport { anchor } from \"../../components/transform/anchor\";\nimport { pos } from \"../../components/transform/pos\";\nimport { scale } from \"../../components/transform/scale\";\n\n/**\n * @group Game Obj\n * @subgroup Types\n */\nexport interface BoomOpt {\n    /**\n     * Animation speed.\n     */\n    speed?: number;\n    /**\n     * Scale.\n     */\n    scale?: number;\n    /**\n     * Additional components.\n     *\n     * @since v3000.0\n     */\n    comps?: CompList<any>;\n}\n\nexport function addKaboom(p: Vec2, opt: BoomOpt = {}): GameObj {\n    if (!_k.game.defaultAssets.boom || !_k.game.defaultAssets.ka) {\n        throw new Error(\"You can't use addKaboom with kaplay/mini\");\n    }\n\n    const kaboom = _k.game.root.add([\n        pos(p),\n        stay(),\n    ]);\n\n    const speed = (opt.speed || 1) * 5;\n    const s = opt.scale || 1;\n\n    kaboom.add([\n        sprite(_k.game.defaultAssets.boom),\n        scale(0),\n        anchor(\"center\"),\n        boom(speed, s),\n        ...opt.comps ?? [],\n    ]);\n\n    const ka = kaboom.add([\n        sprite(_k.game.defaultAssets.ka),\n        scale(0),\n        anchor(\"center\"),\n        timer(),\n        ...opt.comps ?? [],\n    ]);\n\n    ka.wait(0.4 / speed, () => ka.use(boom(speed, s)));\n    ka.onDestroy(() => kaboom.destroy());\n\n    return kaboom;\n}\n", "import { vec2 } from \"../../../math/math\";\nimport type { Vec2 } from \"../../../math/Vec2\";\nimport { _k } from \"../../../shared\";\nimport type { GameObj } from \"../../../types\";\nimport {\n    level,\n    type LevelComp,\n    type LevelCompOpt,\n} from \"../../components/level/level\";\nimport { pos, type PosComp } from \"../../components/transform/pos\";\n\n/**\n * Options for the {@link addLevel `addLevel()`}.\n *\n * @group Game Obj\n * @subgroup Types\n */\nexport interface AddLevelOpt extends LevelCompOpt {\n    /**\n     * Position of the first block.\n     */\n    pos?: Vec2;\n}\n\nexport function addLevel(\n    map: string[],\n    opt: AddLevelOpt,\n    parent: GameObj = _k.game.root,\n): GameObj<PosComp | LevelComp> {\n    return parent.add([pos(opt.pos ?? vec2(0)), level(map, opt)]);\n}\n", "import { vec2 } from \"../../math/math\";\nimport type { Vec2 } from \"../../math/Vec2\";\nimport { _k } from \"../../shared\";\nimport type { GameObj } from \"../../types\";\n\n/**\n * Collision resolution data.\n *\n * @group Physics\n */\n\nexport class Collision {\n    /**\n     * The first game object in the collision.\n     */\n    source: GameObj;\n    /**\n     * The second game object in the collision.\n     */\n    target: GameObj;\n    /**\n     * The contact normal.\n     */\n    normal: Vec2;\n    /**\n     * The length of the displacement.\n     */\n    distance: number;\n    /**\n     * If the collision is resolved.\n     */\n    resolved: boolean = false;\n    constructor(\n        source: GameObj,\n        target: GameObj,\n        normal: Vec2,\n        distance: number,\n        resolved = false,\n    ) {\n        this.source = source;\n        this.target = target;\n        this.normal = normal;\n        this.distance = distance;\n        this.resolved = resolved;\n    }\n    /**\n     * The displacement source game object have to make to avoid the collision.\n     */\n    get displacement() {\n        return this.normal.scale(this.distance);\n    }\n    /**\n     * Get a new collision with reversed source and target relationship.\n     */\n    reverse() {\n        return new Collision(\n            this.target,\n            this.source,\n            this.normal.scale(-1),\n            this.distance,\n            this.resolved,\n        );\n    }\n    /**\n     * If the 2 objects have any overlap, or they're just touching edges.\n     *\n     * @since v3000.0\n     */\n    hasOverlap() {\n        return this.distance > 0;\n    }\n    /**\n     * If the collision happened (roughly) on the left side.\n     */\n    isLeft() {\n        return this.normal.cross(_k.game.gravity || vec2(0, 1)) > 0;\n    }\n    /**\n     * If the collision happened (roughly) on the right side.\n     */\n    isRight() {\n        return this.normal.cross(_k.game.gravity || vec2(0, 1)) < 0;\n    }\n    /**\n     * If the collision happened (roughly) on the top side.\n     */\n    isTop() {\n        return this.normal.dot(_k.game.gravity || vec2(0, 1)) > 0;\n    }\n    /**\n     * If the collision happened (roughly) on the bottom side.\n     */\n    isBottom() {\n        return this.normal.dot(_k.game.gravity || vec2(0, 1)) < 0;\n    }\n    /**\n     * Prevent collision resolution if not yet resolved.\n     *\n     * @since v3000.0\n     */\n    preventResolution() {\n        this.resolved = true;\n    }\n}\n", "import { _k } from \"../shared\";\nimport { deprecateMsg } from \"../utils/log\";\n\n// Layering\n\nexport function setLayers(layerNames: string[], defaultLayer: string) {\n    if (_k.game.layers) {\n        throw Error(\"Layers can only be assigned once.\");\n    }\n    const defaultLayerIndex = layerNames.indexOf(defaultLayer);\n    if (defaultLayerIndex == -1) {\n        throw Error(\n            \"The default layer name should be present in the layers list.\",\n        );\n    }\n    _k.game.layers = layerNames;\n    _k.game.defaultLayerIndex = defaultLayerIndex;\n}\n\nexport function getLayers() {\n    return _k.game.layers;\n}\n\nexport function getDefaultLayer() {\n    return _k.game.layers?.[_k.game.defaultLayerIndex] ?? null;\n}\n\nexport function layers(layerNames: string[], defaultLayer: string) {\n    deprecateMsg(\"layers\", \"setLayers\");\n    setLayers(layerNames, defaultLayer);\n}\n", "import { Vec2 } from \"../math/Vec2\";\nimport { _k } from \"../shared\";\n\n/*\nThe viewport is where the game is rendered. There's various concepts for\nrendering the viewport\n\n- Canvas size: The CSS size of the canvas element\n\n- Buffer size: The quantity of pixels that are rendered by WebGL. It varies\ndepending of the\n\n- Desired Size: The desired size is the size the user defines for keeping an\naspect ratio\n\n- Viewport size: The final rendered size\n\nWe update the canvas before run this, you should check initEvents.ts\nin onResize method.\n*/\n\nexport function updateViewport() {\n    const pixelDensity = _k.gfx.pixelDensity;\n    const desiredWidth = _k.globalOpt.width;\n    const desiredHeight = _k.globalOpt.height;\n    const drawingBufferWidth = _k.gfx.gl.drawingBufferWidth;\n    const drawingBufferHeight = _k.gfx.gl.drawingBufferHeight;\n    const canvasWidth = drawingBufferWidth / pixelDensity;\n    const canvasHeight = drawingBufferHeight / pixelDensity;\n\n    // console.log(\"[vwp] buffer size\", drawingBufferWidth, drawingBufferHeight);\n    // console.log(\"[vwp] desired size\", desiredWidth, desiredHeight);\n    // console.log(\"[vwp] canvas size\", canvasWidth, canvasHeight);\n\n    let x = 0;\n    let y = 0;\n    let viewportWidth = canvasWidth;\n    let viewportHeight = canvasHeight;\n\n    if (_k.globalOpt.letterbox) {\n        if (!desiredWidth || !desiredHeight) {\n            throw new Error(\n                \"Letterboxing requires width and height defined.\",\n            );\n        }\n\n        const canvasAspectRatio = canvasWidth / canvasHeight;\n        const disairedAspectRatio = desiredWidth / desiredHeight;\n\n        // In letterbox, we scale one width/height for keep aspect ratio,\n        // depending of what side is larger\n        if (canvasAspectRatio > disairedAspectRatio) {\n            const scaledWidth = canvasHeight * disairedAspectRatio;\n\n            x = (canvasWidth - scaledWidth) / 2;\n            viewportWidth = scaledWidth;\n        }\n        else {\n            const scaledHeight = canvasWidth / disairedAspectRatio;\n\n            viewportHeight = scaledHeight;\n            y = (canvasHeight - scaledHeight) / 2;\n        }\n    }\n\n    _k.gfx.viewport = {\n        x: x,\n        y: y,\n        width: viewportWidth,\n        height: viewportHeight,\n        scale: (_k.gfx.viewport.width + _k.gfx.viewport.height)\n            / (_k.gfx.width + _k.gfx.height),\n    };\n\n    // console.log(\"[vwp] viewport is\", _k.gfx.viewport);\n}\n\nexport function viewportToCanvas(pt: Vec2) {\n    return new Vec2(\n        pt.x * _k.gfx.viewport.width / _k.gfx.width,\n        pt.y * _k.gfx.viewport.height / _k.gfx.height,\n    );\n}\n\nexport function canvasToViewport(pt: Vec2) {\n    return new Vec2(\n        (pt.x - _k.gfx.viewport.x) * _k.gfx.width / _k.gfx.viewport.width,\n        (pt.y - _k.gfx.viewport.y) * _k.gfx.height / _k.gfx.viewport.height,\n    );\n}\n", "import { burp } from \"../audio/burp\";\nimport { FrameBuffer } from \"../gfx/FrameBuffer\";\nimport { updateViewport } from \"../gfx/viewport\";\nimport { clamp } from \"../math/clamp\";\nimport { _k } from \"../shared\";\nimport { toFixed } from \"../utils/numbers\";\n\n// Events used at the start of a game\n\nexport function initAppEvents() {\n    _k.app.onHide(() => {\n        if (!_k.globalOpt.backgroundAudio) {\n            _k.audio.ctx.suspend();\n        }\n    });\n\n    _k.app.onShow(() => {\n        if (!_k.globalOpt.backgroundAudio && !_k.debug.paused) {\n            _k.audio.ctx.resume();\n        }\n    });\n\n    _k.app.onResize(() => {\n        if (_k.app.isFullscreen()) return;\n        const fixedSize = _k.globalOpt.width && _k.globalOpt.height;\n        if (fixedSize && !_k.globalOpt.letterbox) {\n            return;\n        }\n\n        _k.canvas.width = _k.canvas.offsetWidth * _k.gfx.pixelDensity;\n        _k.canvas.height = _k.canvas.offsetHeight * _k.gfx.pixelDensity;\n\n        updateViewport();\n\n        if (!fixedSize) {\n            _k.gfx.frameBuffer.free();\n            _k.gfx.frameBuffer = new FrameBuffer(\n                _k.gfx.ggl,\n                _k.gfx.ggl.gl.drawingBufferWidth,\n                _k.gfx.ggl.gl.drawingBufferHeight,\n            );\n            _k.gfx.width = _k.gfx.ggl.gl.drawingBufferWidth\n                / _k.gfx.pixelDensity\n                / _k.globalOpt.scale;\n            _k.gfx.height = _k.gfx.ggl.gl.drawingBufferHeight\n                / _k.gfx.pixelDensity\n                / _k.globalOpt.scale;\n        }\n    });\n\n    if (_k.globalOpt.debug !== false) {\n        _k.app.onKeyPress(\n            _k.globalOpt.debugKey ?? \"f1\",\n            () => _k.debug.inspect = !_k.debug.inspect,\n        );\n        _k.app.onKeyPress(\"f2\", () => _k.debug.clearLog());\n        _k.app.onKeyPress(\"f8\", () => _k.debug.paused = !_k.debug.paused);\n        _k.app.onKeyPress(\"f7\", () => {\n            _k.debug.timeScale = toFixed(\n                clamp(_k.debug.timeScale - 0.2, 0, 2),\n                1,\n            );\n        });\n        _k.app.onKeyPress(\"f9\", () => {\n            _k.debug.timeScale = toFixed(\n                clamp(_k.debug.timeScale + 0.2, 0, 2),\n                1,\n            );\n        });\n        _k.app.onKeyPress(\"f10\", () => _k.debug.stepFrame());\n    }\n\n    // burp mode initialization\n    if (_k.globalOpt.burp) {\n        _k.app.onKeyPress(\"b\", () => burp());\n    }\n}\n", "import { initAppEvents } from \"../app/appEvents\";\nimport type { KEventController } from \"../events/events\";\nimport { Mat23, vec2 } from \"../math/math\";\nimport { _k } from \"../shared\";\n\n/**\n * The function definition for a scene\n *\n * @group Scenes\n * @subgroup Types\n */\nexport type SceneDef = (...args: any) => void;\n\n/**\n * The state of a scene.\n *\n * @group Scenes\n * @subgroup Types\n */\nexport type SceneState = {\n    sceneID: string | null;\n    args: unknown[];\n};\n\nexport function scene(id: string, def: SceneDef) {\n    _k.game.scenes[id] = def;\n}\n\nexport function go(name: string, ...args: unknown[]) {\n    if (!_k.game.scenes[name]) {\n        throw new Error(`Scene not found: ${name}`);\n    }\n\n    _k.game.events.onOnce(\"frameEnd\", () => {\n        _k.game.events.trigger(\"sceneLeave\", name);\n        _k.app.events.clear();\n        _k.game.events.clear();\n\n        [..._k.game.root.children].forEach((obj) => {\n            if (\n                !obj.stay\n                || (obj.scenesToStay && !obj.scenesToStay.includes(name))\n            ) {\n                _k.game.root.remove(obj);\n            }\n            else {\n                obj.trigger(\"sceneEnter\", name);\n            }\n        });\n\n        _k.game.root.clearEvents();\n        initAppEvents();\n\n        // cam\n        _k.game.cam = {\n            pos: null,\n            scale: vec2(1),\n            angle: 0,\n            shake: 0,\n            transform: new Mat23(),\n        };\n\n        _k.game.currentSceneArgs = args;\n        _k.game.scenes[name](...args);\n    });\n\n    _k.game.currentScene = name;\n}\n\nexport function pushScene(id: string, ...args: unknown[]) {\n    _k.game.sceneStack.push({\n        sceneID: _k.game.currentScene,\n        args: _k.game.currentSceneArgs,\n    });\n    go(id, args);\n    return;\n}\n\nexport function popScene() {\n    const sceneData: SceneState | undefined = _k.game.sceneStack.pop();\n\n    if (sceneData === undefined) {\n        throw new Error(\"No more scenes to pop!\");\n    }\n\n    if (sceneData.sceneID === null) {\n        throw new Error(\"The scene ID should not be null\");\n    }\n\n    go(sceneData.sceneID, sceneData.args);\n}\n\nexport function onSceneLeave(\n    action: (newScene?: string) => void,\n): KEventController {\n    return _k.game.events.on(\"sceneLeave\", action);\n}\n\nexport function getSceneName() {\n    return _k.game.currentScene;\n}\n\nexport function getSceneArgs() {\n    return _k.game.currentSceneArgs;\n}\n", "import { type ColorArgs, rgb } from \"../math/color\";\nimport { _k } from \"../shared\";\n\nexport function setBackground(...args: ColorArgs) {\n    const color = rgb(...args);\n    const alpha = args[3] ?? 1;\n\n    _k.gfx.bgColor = color;\n    _k.gfx.bgAlpha = alpha;\n\n    _k.gfx.ggl.gl.clearColor(\n        color.r / 255,\n        color.g / 255,\n        color.b / 255,\n        alpha,\n    );\n}\n\nexport function getBackground() {\n    return _k.gfx.bgColor?.clone?.() ?? null;\n}\n", "import { _k } from \"../shared\";\nimport type { Canvas } from \"../types\";\nimport { FrameBuffer } from \"./FrameBuffer\";\nimport { flush } from \"./stack\";\n\nexport const makeCanvas = (w: number, h: number): Canvas => {\n    const fb = new FrameBuffer(_k.ggl, w, h);\n\n    return {\n        clear: () => fb.clear(),\n        free: () => fb.free(),\n        toDataURL: () => fb.toDataURL(),\n        toImageData: () => fb.toImageData(),\n        width: fb.width,\n        height: fb.height,\n        draw: (action: () => void) => {\n            flush();\n            fb.bind();\n            action();\n            flush();\n            fb.unbind();\n        },\n        get fb() {\n            return fb;\n        },\n    };\n};\n", "import type { Vec2 } from \"../../math/Vec2\";\nimport type { RenderProps } from \"../../types\";\nimport { drawLines } from \"./drawLine\";\n\n/**\n * @group Draw\n * @subgroup Types\n */\nexport type DrawCurveOpt = RenderProps & {\n    /**\n     * The amount of line segments to draw.\n     */\n    segments?: number;\n    /**\n     * The width of the line.\n     */\n    width?: number;\n};\n\nexport function drawCurve(curve: (t: number) => Vec2, opt: DrawCurveOpt) {\n    const segments = opt.segments ?? 16;\n    const p: Vec2[] = [];\n\n    for (let i = 0; i <= segments; i++) {\n        p.push(curve(i / segments));\n    }\n\n    drawLines(Object.assign({}, opt, {\n        pts: p,\n        width: opt.width || 1,\n        pos: opt.pos,\n        color: opt.color,\n        opacity: opt.opacity,\n    }));\n}\n", "import { evaluateBezier } from \"../../math/math\";\nimport { type Vec2 } from \"../../math/Vec2\";\nimport { drawCurve, type DrawCurveOpt } from \"./drawCurve\";\n\n/**\n * @group Draw\n * @subgroup Types\n */\nexport type DrawBezierOpt = DrawCurveOpt & {\n    /**\n     * The first point.\n     */\n    pt1: Vec2;\n    /**\n     * The the first control point.\n     */\n    pt2: Vec2;\n    /**\n     * The the second control point.\n     */\n    pt3: Vec2;\n    /**\n     * The second point.\n     */\n    pt4: Vec2;\n};\n\nexport function drawBezier(opt: DrawBezierOpt) {\n    drawCurve(\n        t => evaluateBezier(opt.pt1, opt.pt2, opt.pt3, opt.pt4, t),\n        opt,\n    );\n}\n", "import { vec2 } from \"../../math/math\";\nimport type { Canvas } from \"../../types\";\nimport { height } from \"../stack\";\nimport { drawUVQuad, type DrawUVQuadOpt } from \"./drawUVQuad\";\n\n/**\n * @group Draw\n * @subgroup Types\n */\nexport type DrawCanvasOpt = DrawUVQuadOpt & {\n    canvas: Canvas;\n};\n\nexport function drawCanvas(opt: DrawCanvasOpt) {\n    const fb = opt.canvas.fb;\n    drawUVQuad(Object.assign({}, opt, {\n        tex: fb.tex,\n        width: opt.width || fb.width,\n        height: opt.height || fb.height,\n        pos: (opt.pos || vec2()).add(0, height()),\n        scale: (opt.scale || vec2(1)).scale(1, -1),\n    }));\n}\n", "import type { Asset } from \"../../assets/asset\";\nimport { resolveSprite, type SpriteData } from \"../../assets/sprite\";\nimport { Quad } from \"../../math/math\";\nimport { type Vec2 } from \"../../math/Vec2\";\nimport type { Anchor, RenderProps } from \"../../types\";\nimport { drawTexture } from \"./drawTexture\";\n\n/**\n * How the sprite should look like.\n *\n * @group Draw\n * @subgroup Types\n */\nexport type DrawSpriteOpt = RenderProps & {\n    /**\n     * The sprite name in the asset manager, or the raw sprite data.\n     */\n    sprite: string | SpriteData | Asset<SpriteData>;\n    /**\n     * If the sprite is loaded with multiple frames, or sliced, use the frame option to specify which frame to draw.\n     */\n    frame?: number;\n    /**\n     * Width of sprite. If `height` is not specified it'll stretch with aspect ratio. If `tiled` is set to true it'll tiled to the specified width horizontally.\n     */\n    width?: number;\n    /**\n     * Height of sprite. If `width` is not specified it'll stretch with aspect ratio. If `tiled` is set to true it'll tiled to the specified width vertically.\n     */\n    height?: number;\n    /**\n     * When set to true, `width` and `height` will not scale the sprite but instead render multiple tiled copies of them until the specified width and height. Useful for background texture pattern etc.\n     */\n    tiled?: boolean;\n    /**\n     * If flip the texture horizontally.\n     */\n    flipX?: boolean;\n    /**\n     * If flip the texture vertically.\n     */\n    flipY?: boolean;\n    /**\n     * The sub-area to render from the texture, by default it'll render the whole `quad(0, 0, 1, 1)`\n     */\n    quad?: Quad;\n    /**\n     * The anchor point, or the pivot point. Default to \"topleft\".\n     */\n    anchor?: Anchor | Vec2;\n    /**\n     * The position\n     */\n    pos?: Vec2;\n};\n\nexport function drawSprite(opt: DrawSpriteOpt) {\n    if (!opt.sprite) {\n        throw new Error(\"drawSprite() requires property \\\"sprite\\\"\");\n    }\n\n    // TODO: slow\n    const spr = resolveSprite(opt.sprite);\n\n    if (!spr || !spr.data) {\n        return;\n    }\n\n    const q = spr.data.frames[opt.frame ?? 0];\n\n    if (!q) {\n        throw new Error(`Frame not found: ${opt.frame ?? 0}`);\n    }\n\n    drawTexture(Object.assign({}, opt, {\n        tex: spr.data.tex,\n        quad: q.scale(opt.quad ?? new Quad(0, 0, 1, 1)),\n    }));\n}\n", "import type { Vec2 } from \"../../math/Vec2\";\nimport type { RenderProps } from \"../../types\";\nimport { drawPolygon } from \"./drawPolygon\";\n\n/**\n * How the triangle should look like.\n *\n * @group Draw\n * @subgroup Types\n */\nexport type DrawTriangleOpt = RenderProps & {\n    /**\n     * First point of triangle.\n     */\n    p1: Vec2;\n    /**\n     * Second point of triangle.\n     */\n    p2: Vec2;\n    /**\n     * Third point of triangle.\n     */\n    p3: Vec2;\n    /**\n     * If fill the shape with color (set this to false if you only want an outline).\n     */\n    fill?: boolean;\n    /**\n     * The radius of each corner.\n     */\n    radius?: number;\n};\n\nexport function drawTriangle(opt: DrawTriangleOpt) {\n    if (!opt.p1 || !opt.p2 || !opt.p3) {\n        throw new Error(\n            \"drawTriangle() requires properties \\\"p1\\\", \\\"p2\\\" and \\\"p3\\\".\",\n        );\n    }\n\n    return drawPolygon(Object.assign({}, opt, {\n        pts: [opt.p1, opt.p2, opt.p3],\n    }));\n}\n", "import { rand } from \"../math\";\n\ntype Predicate = (value: any) => boolean;\n\nexport class DecisionNode {\n    attribute: string;\n    children: DecisionNode[] = [];\n    totalWeight = 0;\n    constructor(attribute: string) {\n        this.attribute = attribute;\n    }\n\n    addValueNode(value: any, attribute: string): DecisionNode {\n        const node = new ValueDecisionNode(value, attribute);\n        this.children.push(node);\n        return node;\n    }\n\n    addPredicateNode(predicate: Predicate, attribute: string): DecisionNode {\n        const node = new PredicateDecisionNode(predicate, attribute);\n        this.children.push(node);\n        return node;\n    }\n\n    addWeightNode(weight: any, attribute: string): DecisionNode {\n        if (weight === 0) {\n            throw Error(\"Weight nodes cannot have 0 probability\");\n        }\n        if (this.children.length > 0 && this.totalWeight == 0) {\n            throw Error(\"Weight nodes cannot be mixed with other nodes\");\n        }\n        const node = new WeightDecisionNode(weight, attribute);\n        this.children.push(node);\n        this.totalWeight += weight;\n        return node;\n    }\n\n    evaluate(answers: any): string {\n        if (this.children.length === 0) {\n            return this.attribute;\n        }\n        else {\n            // We need to pick a random node\n            if (this.totalWeight) {\n                const dice = rand(this.totalWeight);\n                let sum = 0;\n                for (const node of this.children) {\n                    sum += (node as WeightDecisionNode).weight;\n                    if (dice < sum) {\n                        return node.evaluate(answers);\n                    }\n                }\n            }\n            // We need to evaluate until a node asserts true\n            else {\n                const value = answers[this.attribute];\n                for (const node of this.children) {\n                    if (node.assert(value)) {\n                        return node.evaluate(answers);\n                    }\n                }\n            }\n        }\n        throw new Error(\"Invalid decision tree\");\n    }\n\n    assert(value: any): boolean {\n        return false;\n    }\n}\n\nclass ValueDecisionNode extends DecisionNode {\n    value: any;\n\n    constructor(value: any, attribute: string) {\n        super(attribute);\n        this.value = value;\n    }\n\n    assert(value: any): boolean {\n        return this.value == value;\n    }\n}\n\nclass PredicateDecisionNode extends DecisionNode {\n    predicate: Predicate;\n\n    constructor(predicate: Predicate, attribute: string) {\n        super(attribute);\n        this.predicate = predicate;\n    }\n\n    assert(value: any): boolean {\n        return this.predicate(value);\n    }\n}\n\nclass WeightDecisionNode extends DecisionNode {\n    weight: number;\n\n    constructor(weight: number, attribute: string) {\n        super(attribute);\n        this.weight = weight;\n    }\n\n    assert(value: any): boolean {\n        return false;\n    }\n}\n\nfunction sum(values: number[]) {\n    return values.reduce((sum, v) => sum + v, 0);\n}\n\nfunction distinct(values: any[]) {\n    return [...new Set(values)];\n}\n\nfunction entropy(outcomes: boolean[]) {\n    let positive = 0;\n    for (const outcome of outcomes) {\n        if (outcome) {\n            positive++;\n        }\n    }\n    const negative = (outcomes.length - positive) / outcomes.length;\n    positive = positive / outcomes.length;\n    return -(positive * (positive ? Math.log2(positive) : 0)\n        + negative * (negative ? Math.log2(negative) : 0));\n}\n\nfunction gain(values: any[], outcomes: boolean[]) {\n    const splitByAttribute: Record<string, boolean[]> = {};\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value in splitByAttribute) {\n            splitByAttribute[value].push(outcomes[i]);\n        }\n        else {\n            splitByAttribute[value] = [outcomes[i]];\n        }\n    }\n    return entropy(outcomes)\n        - sum(\n            Object.values(splitByAttribute).map(o =>\n                entropy(o) * o.length / outcomes.length\n            ),\n        );\n}\n\nexport class DecisionTree {\n    root: DecisionNode;\n\n    constructor(attribute: string) {\n        this.root = new DecisionNode(attribute);\n    }\n\n    evaluate(answers: any): string {\n        return this.root.evaluate(answers);\n    }\n\n    /**\n     * Computes a decision tree from example data\n     * @param data - Example data, a list of columns, where each column contains values for an attribute in attributes.\n     * @param attributes - The names of the columns.\n     * @param outcomes - The outcomes for each row.\n     */\n    static learnFromExamples(\n        data: any[][],\n        attributes: string[],\n        outcomes: boolean[],\n    ) {\n        function indexOfAttributeToSplitOn(\n            data: any[][],\n            attributes: string[],\n            outcomes: boolean[],\n        ) {\n            const gains = attributes.map((_, index) =>\n                gain(data[index], outcomes)\n            );\n            const maxGain = Math.max(...gains);\n            const index = gains.indexOf(maxGain);\n            return index;\n        }\n        function createBranches(\n            node: DecisionNode,\n            data: any[][],\n            attributes: string[],\n            outcomes: boolean[],\n            index: number,\n        ) {\n            const attributeColumn = data[index];\n            const values = distinct(attributeColumn);\n            // Remove the attribute column\n            const a = attributes.filter((_, i) => i != index);\n            data = data.filter((_, i) => i != index);\n            // Create a branch for each possible value of the attribute\n            for (const value of values) {\n                // Only filter the outcome for now, if the entropy is small, we will create a leaf\n                const o = outcomes.filter((_, index) =>\n                    attributeColumn[index] === value\n                );\n                const e = entropy(o);\n                if (e === 0) { // Or very small\n                    // Leaf\n                    node.addValueNode(value, o[0] ? \"true\" : \"false\");\n                }\n                else {\n                    // Branch\n                    const d = data.map(column =>\n                        column.filter((_, index) =>\n                            attributeColumn[index] === value\n                        )\n                    );\n                    // Split on the attribute with the most information gain\n                    const index = indexOfAttributeToSplitOn(\n                        d,\n                        a,\n                        o,\n                    );\n                    const attribute = attributes[index];\n                    const n = node.addValueNode(value, attribute);\n                    createBranches(n, d, a, o, index);\n                }\n            }\n        }\n        // Split on the attribute with the most information gain\n        const index = indexOfAttributeToSplitOn(data, attributes, outcomes);\n        const attribute = attributes[index];\n        const tree = new DecisionTree(attribute);\n        createBranches(tree.root, data, attributes, outcomes, index);\n        return tree;\n    }\n}\n", "type Predicate = (system: RuleSystem) => boolean;\ntype Action = (system: RuleSystem) => void;\n\nexport class Rule {\n    predicate: Predicate;\n    salience;\n    constructor(predicate: Predicate, salience: number) {\n        this.predicate = predicate;\n        this.salience = salience;\n    }\n\n    evaluate(system: RuleSystem): boolean {\n        return this.predicate(system);\n    }\n\n    execute(system: RuleSystem): void {\n    }\n}\n\nclass ActionRule extends Rule {\n    action;\n    constructor(predicate: Predicate, action: Action, salience: number) {\n        super(predicate, salience);\n        this.action = action;\n    }\n\n    execute(system: RuleSystem): void {\n        this.action(system);\n    }\n}\n\nclass AssertRule extends Rule {\n    fact;\n    grade;\n    constructor(\n        predicate: Predicate,\n        fact: string,\n        grade: number,\n        salience: number,\n    ) {\n        super(predicate, salience);\n        this.fact = fact;\n        this.grade = grade;\n    }\n\n    execute(system: RuleSystem): void {\n        system.assertFact(this.fact, this.grade);\n    }\n}\n\nclass RetractRule extends Rule {\n    fact;\n    grade;\n    constructor(\n        predicate: Predicate,\n        fact: string,\n        grade: number,\n        salience: number,\n    ) {\n        super(predicate, salience);\n        this.fact = fact;\n        this.grade = grade;\n    }\n\n    execute(system: RuleSystem) {\n        system.retractFact(this.fact, this.grade);\n    }\n}\n\nexport class RuleSystem {\n    // Rules to evaluate and execute\n    agenda: Rule[] = [];\n    // Game state\n    state: any = {};\n    // Asserted facts\n    facts: Map<string, number> = new Map<string, number>();\n\n    constructor() {\n    }\n\n    /**\n     * Adds a rule which runs an action if its predicate evaluates to true.\n     * @param predicate - Predicate to evaluate. A function taking the system as parameter.\n     * @param action - Action to execute. A function taking the system as parameter.\n     * @param salience - Priority of the rule.\n     */\n    addRuleExecutingAction(\n        predicate: Predicate,\n        action: Action,\n        salience: number = 0,\n    ) {\n        this.addRule(new ActionRule(predicate, action, salience));\n    }\n\n    /**\n     * Add a rule which asserts a fact if its predicate evaluates to true.\n     * @param predicate - Predicate to evaluate. A function taking the system as parameter.\n     * @param fact - The fact to assert.\n     * @param grade - The optional grade to use when asserting the fact.\n     * @param salience - Priority of the rule.\n     */\n    addRuleAssertingFact(\n        predicate: Predicate,\n        fact: string,\n        grade: number = 1,\n        salience: number = 0,\n    ) {\n        this.addRule(new AssertRule(predicate, fact, grade, salience));\n    }\n\n    /**\n     * Add a rule which retracts a fact if its predicate evaluates to true.\n     * @param predicate - Predicate to evaluate. A function taking the system as parameter.\n     * @param fact - The fact to retract.\n     * @param grade - The optional grade to use when retracting the fact.\n     * @param salience - Priority of the rule.\n     */\n    addRuleRetractingFact(\n        predicate: Predicate,\n        fact: string,\n        grade: number = 1,\n        salience: number = 0,\n    ) {\n        this.addRule(new RetractRule(predicate, fact, grade, salience));\n    }\n\n    /**\n     * Add a custom rule.\n     * @param rule - The rule to add.\n     */\n    addRule(rule: Rule) {\n        this.agenda.push(rule);\n    }\n\n    /**\n     * Removes all rules.\n     */\n    removeAllRules() {\n        this.agenda.length = 0;\n    }\n\n    /**\n     * Executes all rules for which the predicate evaluates to true.\n     */\n    execute() {\n        this.agenda.sort((a, b) => a.salience - b.salience);\n        for (const rule of this.agenda) {\n            if (rule.evaluate(this)) {\n                rule.execute(this);\n            }\n        }\n    }\n\n    /**\n     * Asserts a fact.\n     * @param fact - The fact to assert.\n     * @param grade - The optional grade to use.\n     */\n    assertFact(fact: string, grade: number = 1) {\n        this.facts.set(fact, Math.min(1, this.gradeForFact(fact) + grade));\n    }\n\n    /**\n     * Retracts a fact.\n     * @param fact - The fact to retract.\n     * @param grade - The optional grade to use.\n     */\n    retractFact(fact: string, grade: number = 1) {\n        this.facts.set(fact, Math.max(0, this.gradeForFact(fact) - grade));\n    }\n\n    /**\n     * Returns the grade for the specified fact.\n     * @param fact - The fact to obtain the grade from.\n     *\n     * @returns The grade for the fact.\n     */\n    gradeForFact(fact: string) {\n        return this.facts.get(fact) || 0;\n    }\n\n    /**\n     * Returns the minimum grade for the specified facts.\n     * @param facts - The facts to obtain the minimum grade from.\n     *\n     * @returns The minimum grade for the facts.\n     */\n    minimumGradeForFacts(...facts: string[]) {\n        return Math.min(...facts.map(fact => this.gradeForFact(fact)));\n    }\n\n    /**\n     * Returns the maximum grade for the specified facts.\n     * @param facts - The facts to obtain the maximum grade from.\n     *\n     * @returns The maximum grade for the facts.\n     */\n    maximumGradeForFacts(...facts: string[]) {\n        return Math.max(...facts.map(fact => this.gradeForFact(fact)));\n    }\n\n    /**\n     * Resets the facts.\n     */\n    reset() {\n        this.facts.clear();\n    }\n}\n", "type EnterCallback = (sm: StateMachine, previous: string) => void;\ntype UpdateCallback = (sm: StateMachine, current: string) => void;\ntype DrawCallback = (sm: StateMachine, current: string) => void;\ntype ExitCallback = (sm: StateMachine, next: string) => void;\ntype TransitionCallback = (sm: StateMachine, from: string, to: string) => void;\n\ntype StateCallbacks = {\n    enter?: EnterCallback;\n    update?: UpdateCallback;\n    draw?: DrawCallback;\n    exit?: ExitCallback;\n};\n\nclass State {\n    name: string;\n    callbacks: StateCallbacks;\n    transitions: Record<string, TransitionCallback> = {};\n    constructor(name: string, callbacks: StateCallbacks) {\n        this.name = name;\n        this.callbacks = callbacks;\n    }\n}\n\n/**\n * A finite state machine\n */\nexport class StateMachine {\n    stateMap: Record<string, State> = {};\n    state: State | undefined;\n\n    /**\n     * Create a machine given the states and initial state\n     * @param states - The states the machine can be in\n     * @param initialState - The initial state it will enter if given\n     */\n    constructor(states: string[]) {\n        states.forEach(name => {\n            this.stateMap[name] = new State(name, {});\n        });\n    }\n\n    /**\n     * Make the machine enter a state\n     * @param name - The new state\n     */\n    enterState(name: string) {\n        let oldStateName = this.state?.name || \"\";\n\n        // Exit old state\n        if (this.state?.callbacks.exit) {\n            this.state.callbacks.exit(this, name);\n        }\n\n        if (this.state?.transitions[name]) {\n            this.state.transitions[name](this, oldStateName, name);\n        }\n\n        // Enter new state\n        this.state = this.stateMap[name];\n        if (this.state.callbacks.enter) {\n            this.state.callbacks.enter(this, oldStateName);\n        }\n    }\n\n    /**\n     * Set a callback for when the machine enters a state\n     * @param name - The state\n     * @param cb - The callback\n     */\n    onStateEnter(\n        name: string,\n        cb: (sm: StateMachine, previous: string) => void,\n    ) {\n        const state = this.stateMap[name];\n        if (state) {\n            state.callbacks.enter = cb;\n        }\n    }\n\n    /**\n     * Set a callback for when the machine updates a state\n     * @param name - The state\n     * @param cb - The callback\n     */\n    onStateUpdate(\n        name: string,\n        cb: (sm: StateMachine, current: string) => void,\n    ) {\n        const state = this.stateMap[name];\n        if (state) {\n            state.callbacks.update = cb;\n        }\n    }\n\n    /**\n     * Set a callback for when the machine draws a state\n     * @param name - The state\n     * @param cb - The callback\n     */\n    onStateDraw(name: string, cb: (sm: StateMachine, current: string) => void) {\n        const state = this.stateMap[name];\n        if (state) {\n            state.callbacks.draw = cb;\n        }\n    }\n\n    /**\n     * Set a callback for when the machine exits a state\n     * @param name - The state\n     * @param cb - The callback\n     */\n    onStateExit(name: string, cb: (sm: StateMachine, next: string) => void) {\n        const state = this.stateMap[name];\n        if (state) {\n            state.callbacks.exit = cb;\n        }\n    }\n\n    /**\n     * Set a callback for when the machine transitions from one state to the other state\n     * @param from - The state which is exited\n     * @param to - The state which is entered\n     * @param cb - The callback\n     */\n    onStateTransition(\n        from: string,\n        to: string,\n        cb: (sm: StateMachine, from: string, to: string) => void,\n    ) {\n        const state = this.stateMap[from];\n        if (state) {\n            state.transitions[to] = cb;\n        }\n    }\n}\n", "import { MAX_TRIES } from \"../constants/general\";\nimport type { Shape } from \"../types\";\nimport { Circle, Ellipse, Polygon, Rect, vec2 } from \"./math\";\nimport { Vec2 } from \"./Vec2\";\n\nfunction calculateSupport(\n    shapeA: Shape,\n    shapeB: Shape,\n    direction: Vec2,\n): Vec2 {\n    // Calculate the support vector. This is done by calculating the difference between\n    // the furthest points found of the shapes along the given direction.\n    let oppositeDirection = new Vec2(-direction.x, -direction.y);\n    const supportA = shapeA.support(direction);\n    const supportB = shapeB.support(oppositeDirection);\n    return new Vec2(supportA.x - supportB.x, supportA.y - supportB.y);\n}\n\nfunction addSupport(\n    vertices: Array<Vec2>,\n    shapeA: Shape,\n    shapeB: Shape,\n    direction: Vec2,\n): boolean {\n    var support: Vec2 = calculateSupport(shapeA, shapeB, direction);\n    vertices.push(support);\n    // Returns true if both vectors are in the same direction\n    return direction.dot(support) >= 0;\n}\n\nenum EvolveResult {\n    NoIntersection,\n    FoundIntersection,\n    Evolving,\n}\n\nfunction tripleProduct(a: Vec2, b: Vec2, c: Vec2): Vec2 {\n    // AxB = (0, 0, axb)\n    // AxBxC = (-axb * c.y, axb * c.x, 0)\n    const n = a.x * b.y - a.y * b.x;\n\n    // This vector lies in the same plane as a and b and is perpendicular to c\n    return new Vec2(-n * c.y, n * c.x);\n}\n\nfunction evolveSimplex(\n    simplex: Vec2[],\n    colliderA: Shape,\n    colliderB: Shape,\n    direction: Vec2,\n): EvolveResult {\n    switch (simplex.length) {\n        case 0: {\n            // Zero points, set the direction the center of colliderA\n            // towards the center of of colliderB\n            direction.x = colliderB.gjkCenter.x - colliderA.gjkCenter.x;\n            direction.y = colliderB.gjkCenter.y - colliderA.gjkCenter.y;\n            break;\n        }\n        case 1: {\n            // Reverse the direction, to make a line\n            direction.x = direction.x *= -1;\n            direction.y = direction.y *= -1;\n            break;\n        }\n        case 2: {\n            // We now have a line ab. Take the vector ab and the vector a origin\n            const ab = new Vec2(\n                simplex[1].x - simplex[0].x,\n                simplex[1].y - simplex[0].y,\n            );\n            const a0 = new Vec2(-simplex[0].x, -simplex[0].y);\n\n            // Get the vector perpendicular to ab and a0\n            // Then get the vector perpendicular to the result and ab\n            const tp = tripleProduct(ab, a0, ab);\n            // This is our new direction to form a triangle\n            direction.x = tp.x;\n            direction.y = tp.y;\n            break;\n        }\n        case 3:\n            {\n                // We have a triangle, and need to check if it contains the origin\n                const c0 = new Vec2(-simplex[2].x, -simplex[2].y);\n                const bc = new Vec2(\n                    simplex[1].x - simplex[2].x,\n                    simplex[1].y - simplex[2].y,\n                );\n                const ca = new Vec2(\n                    simplex[0].x - simplex[2].x,\n                    simplex[0].y - simplex[2].y,\n                );\n\n                var bcNorm = tripleProduct(ca, bc, bc);\n                var caNorm = tripleProduct(bc, ca, ca);\n\n                if (bcNorm.dot(c0) > 0) {\n                    // The origin does not lie within the triangle\n                    // Remove the first point and look in the direction of bcNorm\n                    simplex.splice(0, 1);\n                    direction.x = bcNorm.x;\n                    direction.y = bcNorm.y;\n                }\n                else if (caNorm.dot(c0) > 0) {\n                    // The origin does not lie within the triangle\n                    // Remove the second point and look in the direction of caNorm\n                    simplex.splice(1, 1);\n                    direction.x = caNorm.x;\n                    direction.y = caNorm.y;\n                }\n                else {\n                    // The origin lies within the triangle\n                    return EvolveResult.FoundIntersection;\n                }\n            }\n            break;\n        default:\n            throw Error(\n                `Can\\'t have s simplex with ${simplex.length} vertices!`,\n            );\n    }\n\n    // Try to add a new support point to the simplex\n    // If successful, continue evolving\n    return addSupport(simplex, colliderA, colliderB, direction)\n        ? EvolveResult.Evolving\n        : EvolveResult.NoIntersection;\n}\n\n/**\n * Returns true if the colliders intersect.\n * @param colliderA - The first collider to test\n * @param colliderB - The second collider to test\n *\n * @returns True if the colliders intersect\n */\nfunction gjkIntersects(colliderA: Shape, colliderB: Shape): boolean {\n    const vertices: Vec2[] = [];\n    let direction = new Vec2();\n\n    var result: EvolveResult = EvolveResult.Evolving;\n    while (result === EvolveResult.Evolving) {\n        result = evolveSimplex(vertices, colliderA, colliderB, direction);\n    }\n    return result === EvolveResult.FoundIntersection;\n}\n\nenum PolygonWinding {\n    Clockwise,\n    CounterClockwise,\n}\n\ntype GjkEdge = {\n    distance: number;\n    normal: Vec2;\n    index: number;\n};\n\n/**\n * Returns the edge closest to the origin.\n * @param simplex - The simplex whose edges we will check to find the closest edge to the origin\n * @param winding - The winding order of the simplex\n *\n * @returns The edge closest to the origin.\n */\nfunction findClosestEdge(simplex: Vec2[], winding: PolygonWinding): GjkEdge {\n    let minDistance: number = Number.POSITIVE_INFINITY;\n    let minNormal = new Vec2();\n    let minIndex = 0;\n    let line = new Vec2();\n    let norm = new Vec2();\n    for (let i = 0; i < simplex.length; i++) {\n        let j = i + 1;\n        if (j >= simplex.length) j = 0;\n\n        Vec2.sub(simplex[j], simplex[i], line);\n\n        // The normal of the edge depends on the polygon winding of the simplex\n        switch (winding) {\n            case PolygonWinding.Clockwise:\n                norm.x = line.y;\n                norm.y = -line.x;\n                break;\n            case PolygonWinding.CounterClockwise:\n                norm.x = -line.y;\n                norm.y = line.x;\n                break;\n        }\n        Vec2.unit(norm, norm);\n\n        // Only keep the edge closest to the origin\n        var dist: number = norm.dot(simplex[i]);\n        if (dist < minDistance) {\n            minDistance = dist;\n            Vec2.copy(norm, minNormal);\n            minIndex = j;\n        }\n    }\n\n    return { distance: minDistance, normal: minNormal, index: minIndex };\n}\n\nexport type GjkCollisionResult = {\n    /**\n     * The direction the first shape needs to be moved to resolve the collision\n     */\n    normal: Vec2;\n    /**\n     * The distance the first shape needs to be moved to resolve the collision\n     */\n    distance: number;\n};\n\n/**\n * Returns true if the shapes collide\n * @param colliderA - The first collider to test\n * @param colliderB - The second collider to test\n *\n * @returns True if the shapes collide\n */\nfunction getIntersection(\n    colliderA: Shape,\n    colliderB: Shape,\n    simplex: Vec2[],\n): GjkCollisionResult | null {\n    const EPSILON = 0.00001;\n\n    const e0: number = (simplex[1].x - simplex[0].x)\n        * (simplex[1].y + simplex[0].y);\n    const e1: number = (simplex[2].x - simplex[1].x)\n        * (simplex[2].y + simplex[1].y);\n    const e2: number = (simplex[0].x - simplex[2].x)\n        * (simplex[0].y + simplex[2].y);\n    var winding: PolygonWinding = (e0 + e1 + e2 >= 0)\n        ? PolygonWinding.Clockwise\n        : PolygonWinding.CounterClockwise;\n\n    let intersection = new Vec2();\n    for (let i = 0; i < MAX_TRIES; i++) {\n        var edge: GjkEdge = findClosestEdge(simplex, winding);\n        // Calculate the difference for the two vertices furthest along the direction of the edge normal\n        var support = calculateSupport(colliderA, colliderB, edge.normal);\n        // Check distance to the origin\n        var distance: number = support.dot(edge.normal);\n\n        Vec2.scale(edge.normal, distance, intersection);\n\n        // If close enough, return if we need to move a distance greater than 0\n        if (Math.abs(distance - edge.distance) <= EPSILON) {\n            const len = intersection.len();\n            if (len != 0) {\n                Vec2.scale(intersection, -1 / len, intersection);\n                return { normal: intersection, distance: len };\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            simplex.splice(edge.index, 0, support);\n        }\n    }\n\n    // Return if we need to move a distance greater than 0\n    // Since we did more than the maximum amount of iterations, this may not be optimal\n    const len = intersection.len();\n    if (len != 0) {\n        Vec2.scale(intersection, -1 / len, intersection);\n        return { normal: intersection, distance: len };\n    }\n    else {\n        return null;\n    }\n}\n\n/**\n * Returns a collision result if there was a collision\n * @param colliderA - The first collider to test\n * @param colliderB - The second collider to test\n *\n * @returns A collision result or null\n */\nfunction gjkIntersection(\n    colliderA: Shape,\n    colliderB: Shape,\n): GjkCollisionResult | null {\n    const vertices: Vec2[] = [];\n    let direction = new Vec2(\n        colliderB.gjkCenter.x - colliderA.gjkCenter.x,\n        colliderB.gjkCenter.y - colliderA.gjkCenter.y,\n    );\n\n    var result: EvolveResult = EvolveResult.Evolving;\n    while (result === EvolveResult.Evolving) {\n        result = evolveSimplex(vertices, colliderA, colliderB, direction);\n    }\n    if (result !== EvolveResult.FoundIntersection) {\n        return null;\n    }\n    return getIntersection(colliderA, colliderB, vertices);\n}\n\n/**\n * Returns true if the shapes collide\n * @param shapeA - The first shape to test\n * @param shapeB - The second shape to test\n *\n * @returns True if the shapes collide\n */\nexport function gjkShapeIntersects(shapeA: Shape, shapeB: Shape): boolean {\n    return gjkIntersects(shapeA, shapeB);\n}\n\n/**\n * Returns a collision result if there was a collision\n * @param shapeA - The first shape to test\n * @param shapeB - The second shape to test\n *\n * @returns A collision result or null\n */\nexport function gjkShapeIntersection(\n    shapeA: Shape,\n    shapeB: Shape,\n): GjkCollisionResult | null {\n    return gjkIntersection(shapeA, shapeB);\n}\n", "import { vec2 } from \"./math\";\nimport { aStarSearch, type Graph } from \"./navigation\";\nimport { Vec2 } from \"./Vec2\";\n\nclass NavEdge {\n    a: Vec2;\n    b: Vec2;\n    polygon: WeakRef<NavPolygon>;\n\n    constructor(a: Vec2, b: Vec2, polygon: NavPolygon) {\n        this.a = a;\n        this.b = b;\n        this.polygon = new WeakRef(polygon);\n    }\n\n    isLeft(x: number, y: number) {\n        return ((this.b.x - this.a.x) * (y - this.a.y)\n            - (x - this.a.x) * (this.b.y - this.a.y));\n    }\n\n    get middle() {\n        return this.a.add(this.b).scale(0.5);\n    }\n}\n\nclass NavPolygon {\n    // I don't know if set a default affects how the code is did\n    // TODO: Remove non-null assertion\n    private _edges!: NavEdge[];\n    private _centroid!: Vec2;\n    private _id: number;\n\n    constructor(id: number) {\n        this._id = id;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    set edges(edges: NavEdge[]) {\n        this._edges = edges;\n        let centerX = 0;\n        let centerY = 0;\n        let area = 0;\n        for (let edge of this._edges) {\n            edge.polygon = new WeakRef(this);\n            const cross = edge.a.x * edge.b.y - edge.a.y * edge.b.x;\n            centerX += (edge.a.x + edge.b.x) * cross;\n            centerY += (edge.a.y + edge.b.y) * cross;\n            area += cross;\n        }\n        area /= 2;\n        this._centroid = vec2(centerX / (6 * area), centerY / (6 * area));\n    }\n\n    get edges(): NavEdge[] {\n        return this._edges;\n    }\n\n    get centroid(): Vec2 {\n        return this._centroid;\n    }\n\n    // https://web.archive.org/web/20130126163405/http://geomalgorithms.com/a03-_inclusion.html\n    /*contains(x: number, y: number) {\n        let wn = 0;\n\n        for (let edge of this._edges) {\n            if (edge.a.y <= y) {\n                if (edge.b.y > y) {\n                    if (edge.isLeft(x, y) > 0) {\n                        ++wn;\n                    }\n                }\n            } else {\n                if (edge.b.y <= y) {\n                    if (edge.isLeft(x, y) < 0) {\n                        --wn;\n                    }\n                }\n            }\n        }\n        return wn;\n    }*/\n\n    contains(p: Vec2) {\n        let c = false;\n\n        for (const e of this.edges) {\n            if (\n                ((e.b.y > p.y) != (e.a.y > p.y))\n                && (p.x\n                    < (e.a.x - e.b.x) * (p.y - e.b.y) / (e.a.y - e.b.y) + e.b.x)\n            ) {\n                c = !c;\n            }\n        }\n\n        return c;\n    }\n}\n\nexport class NavMesh implements Graph {\n    private _polygons: NavPolygon[];\n    private _pointCache: { [key: string]: Vec2 };\n    private _edgeCache: { [key: string]: NavEdge };\n\n    constructor() {\n        this._polygons = [];\n        this._pointCache = {};\n        this._edgeCache = {};\n    }\n\n    private _addPoint(p: Vec2) {\n        let point = this._pointCache[`${p.x}_${p.y}`];\n        if (point) {\n            return point;\n        }\n        point = p.clone();\n        this._pointCache[`${p.x}_${p.y}`] = point;\n        return point;\n    }\n\n    private _addEdge(edge: NavEdge): NavEdge {\n        const key = `${edge.a.x}_${edge.a.y}-${edge.b.x}_${edge.b.y}`;\n        this._edgeCache[key] = edge;\n        return edge;\n    }\n\n    private _findEdge(a: Vec2, b: Vec2) {\n        const key = `${a.x}_${a.y}-${b.x}_${b.y}`;\n        return this._edgeCache[key];\n    }\n\n    private _findCommonEdge(a: NavPolygon, b: NavPolygon): NavEdge | null {\n        for (const edge of a.edges) {\n            const e = this._findEdge(edge.b, edge.a);\n            // TODO: Remove non-null assertion\n            if (e && e.polygon.deref()!.id === b.id) {\n                return e;\n            }\n        }\n        return null;\n    }\n\n    addPolygon(vertices: Vec2[]) {\n        const polygon = new NavPolygon(this._polygons.length);\n        const edges = vertices.map((v, index) =>\n            new NavEdge(v, vertices[(index + 1) % vertices.length], polygon)\n        );\n        polygon.edges = edges;\n        this._polygons.push(polygon);\n        for (const edge of polygon.edges) {\n            this._addEdge(edge);\n        }\n        return polygon;\n    }\n\n    addRect(pos: Vec2, size: Vec2) {\n        const a = this._addPoint(pos);\n        const b = this._addPoint(pos.add(size.x, 0));\n        const c = this._addPoint(pos.add(size));\n        const d = this._addPoint(pos.add(0, size.y));\n        return this.addPolygon([a, b, c, d]);\n    }\n\n    private _getLocation(p: Vec2): NavPolygon | null {\n        for (let polygon of this._polygons) {\n            if (polygon.contains(p)) {\n                return polygon;\n            }\n        }\n        return null;\n    }\n\n    getNeighbours(index: number): number[] {\n        const neighbours = [];\n        for (let edge of this._polygons[index].edges) {\n            // Lookup polygons with reverse edge\n            const pairEdge = this._findEdge(edge.b, edge.a);\n            if (pairEdge) {\n                const pairPolygon = pairEdge.polygon.deref();\n                if (pairPolygon) {\n                    neighbours.push(pairPolygon.id);\n                }\n            }\n        }\n        return neighbours;\n    }\n\n    getCost(a: number, b: number) {\n        return 1;\n    }\n\n    getHeuristic(indexA: number, indexB: number) {\n        const a = this._polygons[indexA];\n        const b = this._polygons[indexB];\n        const x = a.centroid.x - b.centroid.x;\n        const y = a.centroid.y - b.centroid.y;\n        return Math.sqrt(x * x + y * y);\n    }\n\n    getPath(start: number, goal: number): number[] {\n        // Points are not within the navigation mesh\n        if (start === undefined || goal === undefined) {\n            return [];\n        }\n\n        // Same polygon\n        if (start === goal) {\n            return [start, goal];\n        }\n\n        return aStarSearch(this, start, goal);\n    }\n\n    getWaypointPath(start: Vec2, goal: Vec2, opt: any): Vec2[] {\n        const type = opt?.type || \"centroids\";\n\n        const startPolygon = this._getLocation(start);\n        const goalPolygon = this._getLocation(goal);\n\n        // Points are not within the navigation mesh\n        if (startPolygon === undefined || goalPolygon === undefined) {\n            return [];\n        }\n\n        // TODO: Remove non-null assertion\n        const path = this.getPath(startPolygon!.id, goalPolygon!.id);\n\n        // No path was found\n        if (!path) {\n            return [];\n        }\n\n        if (type === \"edges\") {\n            const edges = [];\n            for (let i = 1; i < path.length; i++) {\n                const p1 = this._polygons[path[i - 1]];\n                const p2 = this._polygons[path[i]];\n                const edge = this._findCommonEdge(p1, p2);\n                // TODO: Remove non-null assertion\n                edges.push(\n                    edge!.middle.add(\n                        p2.centroid.sub(edge!.middle).unit().scale(4),\n                    ),\n                );\n            }\n            return [start, ...edges, goal];\n        }\n        else { // type === \"centroids\"\n            return [\n                start,\n                ...path.slice(1, -1).map(index =>\n                    this._polygons[index].centroid\n                ),\n                goal,\n            ];\n        }\n    }\n}\n", "export function insertionSort<T>(a: T[], cmp: (a: T, b: T) => boolean) {\n    for (let i = 1; i < a.length; i++) {\n        for (let j = i - 1; j >= 0; j--) {\n            if (cmp(a[j], a[j + 1])) break;\n            swap(a, j, j + 1);\n        }\n    }\n}\n\nfunction swap<T>(a: T[], i: number, j: number) {\n    const temp = a[i];\n    a[i] = a[j];\n    a[j] = temp;\n}\n", "import { _k } from \"../shared\";\nimport type { KAPLAYPlugin } from \"../types\";\nimport type { KAPLAYCtx } from \"./contextType\";\n\nexport const plug = <T extends Record<string, any>>(\n    plugin: KAPLAYPlugin<T>,\n    ...args: any\n): KAPLAYCtx & T => {\n    const funcs = plugin(_k.k);\n    let funcsObj: T;\n    if (typeof funcs === \"function\") {\n        const plugWithOptions = funcs(...args);\n        funcsObj = plugWithOptions(_k.k);\n    }\n    else {\n        funcsObj = funcs;\n    }\n\n    for (const key in funcsObj) {\n        _k.k[key as keyof typeof _k.k] = funcsObj[key];\n\n        if (_k.globalOpt.global !== false) {\n            window[key as any] = funcsObj[key];\n        }\n    }\n\n    return _k.k as unknown as KAPLAYCtx & T;\n};\n", "import { _k } from \"../shared\";\n\nexport const quit = () => {\n    const { game, app, gfx, ggl, gc } = _k;\n    game.events.onOnce(\"frameEnd\", () => {\n        app.quit();\n\n        // clear canvas\n        gfx.gl.clear(\n            gfx.gl.COLOR_BUFFER_BIT | gfx.gl.DEPTH_BUFFER_BIT\n                | gfx.gl.STENCIL_BUFFER_BIT,\n        );\n\n        // unbind everything\n        const numTextureUnits = gfx.gl.getParameter(\n            gfx.gl.MAX_TEXTURE_IMAGE_UNITS,\n        );\n\n        for (let unit = 0; unit < numTextureUnits; unit++) {\n            gfx.gl.activeTexture(gfx.gl.TEXTURE0 + unit);\n            gfx.gl.bindTexture(gfx.gl.TEXTURE_2D, null);\n            gfx.gl.bindTexture(gfx.gl.TEXTURE_CUBE_MAP, null);\n        }\n\n        gfx.gl.bindBuffer(gfx.gl.ARRAY_BUFFER, null);\n        gfx.gl.bindBuffer(gfx.gl.ELEMENT_ARRAY_BUFFER, null);\n        gfx.gl.bindRenderbuffer(gfx.gl.RENDERBUFFER, null);\n        gfx.gl.bindFramebuffer(gfx.gl.FRAMEBUFFER, null);\n\n        // run all scattered gc events\n        ggl.destroy();\n        gc.forEach((f) => f());\n\n        // remove canvas\n        app.canvas.remove();\n    });\n};\n\nexport const onCleanup = (action: () => void) => {\n    _k.gc.push(action);\n};\n", "import { getData, setData } from \"../app/data\";\nimport { loadAseprite } from \"../assets/aseprite\";\nimport {\n    Asset,\n    getAsset,\n    load,\n    loadJSON,\n    loadProgress,\n    loadRoot,\n} from \"../assets/asset\";\nimport {\n    getBitmapFont,\n    loadBitmapFont,\n    loadBitmapFontFromSprite,\n    loadHappy,\n} from \"../assets/bitmapFont\";\nimport { getFont, loadFont } from \"../assets/font\";\nimport { getShader, loadShader, loadShaderURL } from \"../assets/shader\";\nimport { getSound, loadMusic, loadSound, SoundData } from \"../assets/sound\";\nimport { getSprite, loadBean, loadSprite, SpriteData } from \"../assets/sprite\";\nimport { loadSpriteAtlas } from \"../assets/spriteAtlas\";\nimport { burp } from \"../audio/burp\";\nimport { play } from \"../audio/play\";\nimport { getVolume, setVolume, volume } from \"../audio/volume\";\nimport { ASCII_CHARS, EVENT_CANCEL_SYMBOL } from \"../constants/general\";\nimport { record } from \"../debug/record\";\nimport { blend } from \"../ecs/components/draw/blend\";\nimport { circle } from \"../ecs/components/draw/circle\";\nimport { color } from \"../ecs/components/draw/color\";\nimport { drawon } from \"../ecs/components/draw/drawon\";\nimport { ellipse } from \"../ecs/components/draw/ellipse\";\nimport { fadeIn } from \"../ecs/components/draw/fadeIn\";\nimport { mask } from \"../ecs/components/draw/mask\";\nimport { opacity } from \"../ecs/components/draw/opacity\";\nimport { outline } from \"../ecs/components/draw/outline\";\nimport { particles } from \"../ecs/components/draw/particles\";\nimport { picture } from \"../ecs/components/draw/picture\";\nimport { polygon } from \"../ecs/components/draw/polygon\";\nimport { raycast } from \"../ecs/components/draw/raycast\";\nimport { rect } from \"../ecs/components/draw/rect\";\nimport { shader } from \"../ecs/components/draw/shader\";\nimport { sprite } from \"../ecs/components/draw/sprite\";\nimport { text } from \"../ecs/components/draw/text\";\nimport { uvquad } from \"../ecs/components/draw/uvquad\";\nimport { video } from \"../ecs/components/draw/video\";\nimport { agent } from \"../ecs/components/level/agent\";\nimport { level } from \"../ecs/components/level/level\";\nimport { pathfinder } from \"../ecs/components/level/pathfinder\";\nimport { patrol } from \"../ecs/components/level/patrol\";\nimport { sentry } from \"../ecs/components/level/sentry\";\nimport { tile } from \"../ecs/components/level/tile\";\nimport { animate, serializeAnimation } from \"../ecs/components/misc/animate\";\nimport { fakeMouse } from \"../ecs/components/misc/fakeMouse\";\nimport { health } from \"../ecs/components/misc/health\";\nimport { lifespan } from \"../ecs/components/misc/lifespan\";\nimport { named } from \"../ecs/components/misc/named\";\nimport { state } from \"../ecs/components/misc/state\";\nimport { stay } from \"../ecs/components/misc/stay\";\nimport { textInput } from \"../ecs/components/misc/textInput\";\nimport { timer } from \"../ecs/components/misc/timer\";\nimport { area } from \"../ecs/components/physics/area\";\nimport { body } from \"../ecs/components/physics/body\";\nimport { doubleJump } from \"../ecs/components/physics/doubleJump\";\nimport {\n    areaEffector,\n    buoyancyEffector,\n    constantForce,\n    platformEffector,\n    pointEffector,\n    surfaceEffector,\n} from \"../ecs/components/physics/effectors\";\nimport { anchor } from \"../ecs/components/transform/anchor\";\nimport { constraint } from \"../ecs/components/transform/constraint\";\nimport { fixed } from \"../ecs/components/transform/fixed\";\nimport { follow } from \"../ecs/components/transform/follow\";\nimport { layer } from \"../ecs/components/transform/layer\";\nimport { move } from \"../ecs/components/transform/move\";\nimport { offscreen } from \"../ecs/components/transform/offscreen\";\nimport { pos } from \"../ecs/components/transform/pos\";\nimport { rotate } from \"../ecs/components/transform/rotate\";\nimport { scale } from \"../ecs/components/transform/scale\";\nimport { skew } from \"../ecs/components/transform/skew\";\nimport { z } from \"../ecs/components/transform/z\";\nimport { KeepFlags } from \"../ecs/entity/GameObjRaw\";\nimport { createPrefab, loadPrefab } from \"../ecs/entity/prefab\";\nimport { addKaboom } from \"../ecs/entity/premade/addKaboom\";\nimport { addLevel } from \"../ecs/entity/premade/addLevel\";\nimport { destroy, getTreeRoot } from \"../ecs/entity/utils\";\nimport { Collision } from \"../ecs/systems/Collision\";\nimport { system, SystemPhase } from \"../ecs/systems/systems\";\nimport { KEvent, KEventController, KEventHandler } from \"../events/events\";\nimport {\n    on,\n    onAdd,\n    onClick,\n    onCollide,\n    onCollideEnd,\n    onCollideUpdate,\n    onDestroy,\n    onDraw,\n    onError,\n    onFixedUpdate,\n    onHover,\n    onHoverEnd,\n    onHoverUpdate,\n    onLoad,\n    onLoadError,\n    onLoading,\n    onResize,\n    onTag,\n    onUntag,\n    onUnuse,\n    onUpdate,\n    onUse,\n    trigger,\n} from \"../events/globalEvents\";\nimport {\n    camFlash,\n    camPos,\n    camRot,\n    camScale,\n    camTransform,\n    flash,\n    getCamPos,\n    getCamRot,\n    getCamScale,\n    getCamTransform,\n    setCamPos,\n    setCamRot,\n    setCamScale,\n    shake,\n    toScreen,\n    toWorld,\n} from \"../game/camera\";\nimport {\n    getGravity,\n    getGravityDirection,\n    setGravity,\n    setGravityDirection,\n} from \"../game/gravity\";\nimport { getDefaultLayer, getLayers, layers, setLayers } from \"../game/layers\";\nimport {\n    getSceneName,\n    go,\n    onSceneLeave,\n    popScene,\n    pushScene,\n    scene,\n} from \"../game/scenes\";\nimport { anchorPt } from \"../gfx/anchor\";\nimport { getBackground, setBackground } from \"../gfx/bg\";\nimport { makeCanvas } from \"../gfx/canvasBuffer\";\nimport { drawBezier } from \"../gfx/draw/drawBezier\";\nimport { drawCanvas } from \"../gfx/draw/drawCanvas\";\nimport { drawCircle } from \"../gfx/draw/drawCircle\";\nimport { drawCurve } from \"../gfx/draw/drawCurve\";\nimport { drawEllipse } from \"../gfx/draw/drawEllipse\";\nimport { drawFormattedText } from \"../gfx/draw/drawFormattedText\";\nimport { drawLine, drawLines } from \"../gfx/draw/drawLine\";\nimport { drawMasked } from \"../gfx/draw/drawMasked\";\nimport {\n    appendToPicture,\n    beginPicture,\n    drawPicture,\n    endPicture,\n    Picture,\n} from \"../gfx/draw/drawPicture\";\nimport { drawPolygon } from \"../gfx/draw/drawPolygon\";\nimport { drawRect } from \"../gfx/draw/drawRect\";\nimport { drawSprite } from \"../gfx/draw/drawSprite\";\nimport { drawSubtracted } from \"../gfx/draw/drawSubstracted\";\nimport { drawText } from \"../gfx/draw/drawText\";\nimport { drawTriangle } from \"../gfx/draw/drawTriangle\";\nimport { drawUVQuad } from \"../gfx/draw/drawUVQuad\";\nimport { compileStyledText, formatText } from \"../gfx/formatText\";\nimport {\n    center,\n    height,\n    loadMatrix,\n    multRotate,\n    multScaleV,\n    multTranslateV,\n    popTransform,\n    pushTransform,\n    usePostEffect,\n    width,\n} from \"../gfx/stack\";\nimport { DecisionNode, DecisionTree } from \"../math/ai/decisiontree\";\nimport { Rule, RuleSystem } from \"../math/ai/rulesystem\";\nimport { StateMachine } from \"../math/ai/statemachine\";\nimport { clamp } from \"../math/clamp\";\nimport { Color, hsl2rgb, rgb } from \"../math/color\";\nimport { easings } from \"../math/easings\";\nimport { gjkShapeIntersection, gjkShapeIntersects } from \"../math/gjk\";\nimport { lerp } from \"../math/lerp\";\nimport { Mat4 } from \"../math/Mat4\";\nimport {\n    bezier,\n    cardinal,\n    catmullRom,\n    chance,\n    choose,\n    chooseMultiple,\n    Circle,\n    clipLineToCircle,\n    clipLineToRect,\n    curveLengthApproximation,\n    deg2rad,\n    easingCubicBezier,\n    easingLinear,\n    easingSteps,\n    Ellipse,\n    evaluateBezier,\n    evaluateBezierFirstDerivative,\n    evaluateBezierSecondDerivative,\n    evaluateCatmullRom,\n    evaluateCatmullRomFirstDerivative,\n    evaluateQuadratic,\n    evaluateQuadraticFirstDerivative,\n    evaluateQuadraticSecondDerivative,\n    hermite,\n    isConvex,\n    kochanekBartels,\n    Line,\n    map,\n    mapc,\n    Mat23,\n    normalizedCurve,\n    Point,\n    Polygon,\n    Quad,\n    quad,\n    rad2deg,\n    rand,\n    randi,\n    randSeed,\n    Rect,\n    RNG,\n    shuffle,\n    smoothstep,\n    step,\n    testCirclePolygon,\n    testLineCircle,\n    testLineLine,\n    testLinePoint,\n    testRectLine,\n    testRectPoint,\n    testRectRect,\n    triangulate,\n    vec2,\n    wave,\n} from \"../math/math\";\nimport { NavMesh } from \"../math/navigationmesh\";\nimport { insertionSort } from \"../math/sort\";\nimport { Vec2 } from \"../math/Vec2\";\nimport { BlendMode, type KAPLAYPlugin } from \"../types\";\nimport {\n    download,\n    downloadBlob,\n    downloadJSON,\n    downloadText,\n} from \"../utils/dataURL\";\nimport type { KAPLAYCtx } from \"./contextType\";\nimport type { Engine } from \"./engine\";\nimport { throwError } from \"./errors\";\nimport { plug } from \"./plug\";\nimport { onCleanup, quit } from \"./quit\";\n\n// The context is the way the user interact with a KAPLAY game.\nexport const createContext = (\n    e: Engine,\n    plugins?: KAPLAYPlugin<Record<string, unknown>>[],\n    exportToGlobal?: boolean,\n): KAPLAYCtx => {\n    // aliases for root Game Obj operations\n    const { game, app, audio, debug } = e;\n    const add = game.root.add.bind(game.root);\n    const addPrefab = game.root.addPrefab.bind(game.root);\n    const readd = game.root.readd.bind(game.root);\n    const destroyAll = game.root.removeAll.bind(game.root);\n    const get = game.root.get.bind(game.root);\n    const wait = game.root.wait.bind(game.root);\n    const loop = game.root.loop.bind(game.root);\n    const query = game.root.query.bind(game.root);\n    const tween = game.root.tween.bind(game.root);\n\n    const ctx: KAPLAYCtx = {\n        _k: e,\n        // @ts-ignore\n        VERSION: KAPLAY_VERSION,\n        // asset load\n        loadRoot,\n        loadProgress,\n        loadSprite,\n        loadSpriteAtlas,\n        loadSound,\n        loadMusic,\n        loadBitmapFont,\n        loadFont,\n        loadBitmapFontFromSprite,\n        loadShader,\n        loadShaderURL,\n        loadAseprite,\n        loadBean,\n        loadHappy,\n        loadJSON,\n        loadPrefab,\n        load,\n        getSound,\n        getFont,\n        getBitmapFont,\n        getSprite,\n        getShader,\n        getAsset,\n        Asset,\n        SpriteData,\n        SoundData,\n        // query\n        width,\n        height,\n        center,\n        dt: app.dt,\n        fixedDt: app.fixedDt,\n        restDt: app.restDt,\n        time: app.time,\n        screenshot: app.screenshot,\n        screenshotToBlob: app.screenshotToBlob,\n        record,\n        isFocused: app.isFocused,\n        setCursor: app.setCursor,\n        getCursor: app.getCursor,\n        setCursorLocked: app.setCursorLocked,\n        isCursorLocked: app.isCursorLocked,\n        setFullscreen: app.setFullscreen,\n        isFullscreen: app.isFullscreen,\n        isTouchscreen: app.isTouchscreen,\n        onLoad,\n        onLoadError,\n        onLoading,\n        onResize,\n        onGamepadConnect: app.onGamepadConnect,\n        onGamepadDisconnect: app.onGamepadDisconnect,\n        onError,\n        onCleanup,\n        // misc\n        flash: flash,\n        setCamPos: setCamPos,\n        getCamPos: getCamPos,\n        setCamRot: setCamRot,\n        getCamRot: getCamRot,\n        setCamScale: setCamScale,\n        getCamScale: getCamScale,\n        getCamTransform: getCamTransform,\n        camPos,\n        camScale,\n        camFlash,\n        camRot,\n        camTransform,\n        shake,\n        toScreen,\n        toWorld,\n        setGravity,\n        getGravity,\n        setGravityDirection,\n        getGravityDirection,\n        setBackground,\n        getBackground,\n        getGamepads: app.getGamepads,\n        // obj\n        getTreeRoot,\n        add,\n        addPrefab,\n        createPrefab,\n        destroy,\n        destroyAll,\n        get,\n        query,\n        readd,\n        // comps\n        pos,\n        rotate,\n        scale,\n        skew,\n        color,\n        blend,\n        opacity,\n        anchor,\n        area,\n        sprite,\n        text,\n        polygon,\n        rect,\n        circle,\n        ellipse,\n        uvquad,\n        video,\n        picture,\n        outline,\n        particles,\n        body,\n        surfaceEffector,\n        areaEffector,\n        pointEffector,\n        buoyancyEffector,\n        platformEffector,\n        constantForce,\n        doubleJump,\n        shader,\n        textInput,\n        timer,\n        fixed,\n        stay,\n        health,\n        lifespan,\n        named,\n        state,\n        z,\n        layer,\n        move,\n        constraint,\n        offscreen,\n        follow,\n        fadeIn,\n        mask,\n        drawon,\n        raycast,\n        tile,\n        animate,\n        serializeAnimation,\n        agent,\n        sentry,\n        patrol,\n        pathfinder,\n        level,\n        fakeMouse,\n        // group events\n        trigger,\n        on: on as KAPLAYCtx[\"on\"], // our internal on should be strict, user shouldn't\n        onFixedUpdate,\n        onUpdate,\n        onDraw,\n        onAdd,\n        onDestroy,\n        onUse,\n        onUnuse,\n        onTag,\n        onUntag,\n        onClick,\n        onCollide,\n        onCollideUpdate,\n        onCollideEnd,\n        onHover,\n        onHoverUpdate,\n        onHoverEnd,\n        // input\n        onKeyDown: app.onKeyDown,\n        onKeyPress: app.onKeyPress,\n        onKeyPressRepeat: app.onKeyPressRepeat,\n        onKeyRelease: app.onKeyRelease,\n        onMouseDown: app.onMouseDown,\n        onMousePress: app.onMousePress,\n        onMouseRelease: app.onMouseRelease,\n        onMouseMove: app.onMouseMove,\n        onCharInput: app.onCharInput,\n        onTouchStart: app.onTouchStart,\n        onTouchMove: app.onTouchMove,\n        onTouchEnd: app.onTouchEnd,\n        onScroll: app.onScroll,\n        onHide: app.onHide,\n        onShow: app.onShow,\n        onGamepadButtonDown: app.onGamepadButtonDown,\n        onGamepadButtonPress: app.onGamepadButtonPress,\n        onGamepadButtonRelease: app.onGamepadButtonRelease,\n        onGamepadStick: app.onGamepadStick,\n        onButtonPress: app.onButtonPress,\n        onButtonDown: app.onButtonDown,\n        onButtonRelease: app.onButtonRelease,\n        mousePos: app.mousePos,\n        mouseDeltaPos: app.mouseDeltaPos,\n        isKeyDown: app.isKeyDown,\n        isKeyPressed: app.isKeyPressed,\n        isKeyPressedRepeat: app.isKeyPressedRepeat,\n        isKeyReleased: app.isKeyReleased,\n        isMouseDown: app.isMouseDown,\n        isMousePressed: app.isMousePressed,\n        isMouseReleased: app.isMouseReleased,\n        isMouseMoved: app.isMouseMoved,\n        isGamepadButtonPressed: app.isGamepadButtonPressed,\n        isGamepadButtonDown: app.isGamepadButtonDown,\n        isGamepadButtonReleased: app.isGamepadButtonReleased,\n        getGamepadStick: app.getGamepadStick,\n        isButtonPressed: app.isButtonPressed,\n        isButtonDown: app.isButtonDown,\n        isButtonReleased: app.isButtonReleased,\n        getButton: app.getButton,\n        getButtons: app.getButtons,\n        setButton: app.setButton,\n        pressButton: app.pressButton,\n        releaseButton: app.releaseButton,\n        getLastInputDeviceType: app.getLastInputDeviceType,\n        charInputted: app.charInputted,\n        // timer\n        loop,\n        wait,\n        // audio\n        play,\n        setVolume: setVolume,\n        getVolume: getVolume,\n        volume,\n        burp,\n        audioCtx: audio.ctx,\n        // math\n        Line,\n        Rect,\n        Circle,\n        Ellipse,\n        Point,\n        Polygon,\n        Collision,\n        Vec2,\n        Color,\n        Mat4,\n        Mat23,\n        Quad,\n        RNG,\n        Rule,\n        RuleSystem,\n        DecisionNode,\n        DecisionTree,\n        StateMachine,\n        insertionSort,\n        rand,\n        randi,\n        randSeed,\n        vec2,\n        rgb,\n        hsl2rgb,\n        quad,\n        choose,\n        chooseMultiple,\n        shuffle,\n        chance,\n        lerp,\n        step,\n        smoothstep,\n        tween,\n        easings,\n        map,\n        mapc,\n        wave,\n        deg2rad,\n        rad2deg,\n        clamp,\n        evaluateQuadratic,\n        evaluateQuadraticFirstDerivative,\n        evaluateQuadraticSecondDerivative,\n        evaluateBezier,\n        evaluateBezierFirstDerivative,\n        evaluateBezierSecondDerivative,\n        evaluateCatmullRom,\n        evaluateCatmullRomFirstDerivative,\n        curveLengthApproximation,\n        normalizedCurve,\n        hermite,\n        cardinal,\n        catmullRom,\n        bezier,\n        kochanekBartels,\n        easingSteps,\n        easingLinear,\n        easingCubicBezier,\n        testLineLine,\n        testRectRect,\n        testRectLine,\n        testRectPoint,\n        testCirclePolygon,\n        testLinePoint,\n        testLineCircle,\n        clipLineToRect,\n        clipLineToCircle,\n        anchorToVec2: anchorPt,\n        gjkShapeIntersects,\n        gjkShapeIntersection,\n        isConvex,\n        triangulate,\n        NavMesh,\n        // raw draw\n        drawSprite,\n        drawText,\n        formatText,\n        compileStyledText,\n        drawRect,\n        drawLine,\n        drawLines,\n        drawTriangle,\n        drawCircle,\n        drawEllipse,\n        drawUVQuad,\n        drawPolygon,\n        drawCurve,\n        drawBezier,\n        drawFormattedText,\n        drawMasked,\n        drawSubtracted,\n        beginPicture,\n        appendToPicture,\n        endPicture,\n        drawPicture,\n        pushTransform,\n        popTransform,\n        pushTranslate: multTranslateV,\n        pushScale: multScaleV,\n        pushRotate: multRotate,\n        pushMatrix: loadMatrix,\n        usePostEffect,\n        makeCanvas,\n        drawCanvas,\n        Picture,\n        // debug\n        debug,\n        // scene\n        scene,\n        getSceneName,\n        go,\n        onSceneLeave,\n        pushScene,\n        popScene,\n        // layers\n        layers: layers,\n        getLayers: getLayers,\n        setLayers: setLayers,\n        getDefaultLayer: getDefaultLayer,\n        // level\n        addLevel,\n        // storage\n        getData,\n        setData,\n        download,\n        downloadJSON,\n        downloadText,\n        downloadBlob,\n        // plugin\n        plug,\n        system,\n        SystemPhase,\n        // char sets\n        ASCII_CHARS,\n        // dom\n        canvas: app.canvas,\n        // misc\n        addKaboom,\n        // dirs\n        LEFT: Vec2.LEFT,\n        RIGHT: Vec2.RIGHT,\n        UP: Vec2.UP,\n        DOWN: Vec2.DOWN,\n        // colors\n        RED: Color.RED,\n        GREEN: Color.GREEN,\n        BLUE: Color.BLUE,\n        YELLOW: Color.YELLOW,\n        MAGENTA: Color.MAGENTA,\n        CYAN: Color.CYAN,\n        WHITE: Color.WHITE,\n        BLACK: Color.BLACK,\n        quit,\n        throwError,\n        // helpers\n        KEvent,\n        KEventHandler,\n        KEventController,\n        KeepFlags,\n        cancel: () => EVENT_CANCEL_SYMBOL,\n        BlendMode,\n    };\n\n    // Export context to Engine\n    e.k = ctx;\n\n    if (plugins) {\n        plugins.forEach(plug);\n    }\n\n    if (exportToGlobal) {\n        for (const key in ctx) {\n            ((window as any)[key]) = ctx[key as keyof KAPLAYCtx];\n        }\n    }\n\n    return ctx;\n};\n", "export const isEqOrIncludes = <T>(listOrSmt: T | T[], el: unknown): boolean => {\n    if (Array.isArray(listOrSmt)) {\n        return (listOrSmt as any[])?.includes(el);\n    }\n\n    return listOrSmt === el;\n};\n\nexport const setHasOrIncludes = <K>(\n    set: Set<K>,\n    key: K | K[],\n): boolean => {\n    if (Array.isArray(key)) {\n        return key.some((k) => set.has(k));\n    }\n\n    return set.has(key);\n};\n\nexport const mapAddOrPush = <K, V>(\n    map: Map<K, V[]>,\n    key: K,\n    value: V,\n): void => {\n    if (map.has(key)) {\n        map.get(key)?.push(value);\n    }\n    else {\n        map.set(key, [value]);\n    }\n};\n", "import { _k } from \"../shared\";\nimport type { ButtonBinding } from \"./inputBindings\";\n\n// Getting / Setting bindings\n\nexport const getButtons = () => {\n    return _k.app.state.buttons;\n};\n\nexport const getButton = (btn: string): ButtonBinding => {\n    return _k.app.state.buttons?.[btn];\n};\n\nexport const setButton = (btn: string, binding: ButtonBinding) => {\n    _k.app.state.buttons[btn] = {\n        ..._k.app.state.buttons[btn],\n        ...binding,\n    };\n};\n\n// Virtually pressing / releasing\n\nexport const pressButton = (btn: string) => {\n    _k.app.state.buttonState.press(btn);\n    _k.app.state.events.trigger(\"buttonPress\", btn);\n};\n\nexport const releaseButton = (btn: string) => {\n    _k.app.state.buttonState.release(btn);\n    _k.app.state.events.trigger(\"buttonRelease\", btn);\n};\n", "import type { Key, KGamepadButton, MouseButton } from \"../types\";\nimport { mapAddOrPush } from \"../utils/sets\";\nimport type { AppState } from \"./app\";\n\n/**\n * A button binding.\n *\n * @group Input\n * @subgroup Buttons API\n */\nexport type ButtonBinding = {\n    keyboard?: Key | Key[];\n    keyboardCode?: string | string[];\n    gamepad?: KGamepadButton | KGamepadButton[];\n    mouse?: MouseButton | MouseButton[];\n};\n\n/**\n * A buttons definition for an action (jump, walk-left, run).\n *\n * @group Input\n * @subgroup Buttons API\n */\nexport type ButtonsDef = Record<string, ButtonBinding>;\n\n/**\n * A button binding device\n *\n * @group Input\n * @subgroup Buttons API\n */\nexport type ButtonBindingDevice = \"keyboard\" | \"gamepad\" | \"mouse\";\n\n// pass the user `buttons` definition to different keymaps\nexport const parseButtonBindings = (appState: AppState) => {\n    const btns = appState.buttons;\n\n    for (const b in btns) {\n        const keyboardBtns = btns[b].keyboard && [btns[b].keyboard].flat();\n        const keyboardCodes = btns[b].keyboardCode\n            && [btns[b].keyboardCode].flat();\n        const gamepadBtns = btns[b].gamepad && [btns[b].gamepad].flat();\n        const mouseBtns = btns[b].mouse && [btns[b].mouse].flat();\n\n        if (keyboardBtns) {\n            keyboardBtns.forEach((k) => {\n                mapAddOrPush(appState.buttonsByKey, k, b);\n            });\n        }\n\n        if (keyboardCodes) {\n            keyboardCodes.forEach((k) => {\n                mapAddOrPush(appState.buttonsByKeyCode, k, b);\n            });\n        }\n\n        if (gamepadBtns) {\n            gamepadBtns.forEach((g) => {\n                mapAddOrPush(appState.buttonsByGamepad, g, b);\n            });\n        }\n\n        if (mouseBtns) {\n            mouseBtns.forEach((m) => {\n                mapAddOrPush(appState.buttonsByMouse, m, b);\n            });\n        }\n    }\n};\n", "// App is everything related to canvas, game loop and input\n\nimport type {\n    Cursor,\n    GamepadDef,\n    KAPLAYOpt,\n    Key,\n    KGamepad,\n    KGamepadButton,\n    KGamepadStick,\n    MouseButton,\n} from \"../types\";\n\nimport { GP_MAP } from \"../constants/general\";\nimport type { AppEventMap } from \"../events/eventMap\";\nimport { type KEventController, KEventHandler } from \"../events/events\";\nimport { canvasToViewport } from \"../gfx/viewport\";\nimport { map, vec2 } from \"../math/math\";\nimport { Vec2 } from \"../math/Vec2\";\nimport { _k } from \"../shared\";\nimport { overload2 } from \"../utils/overload\";\nimport { isEqOrIncludes, setHasOrIncludes } from \"../utils/sets\";\nimport {\n    getButton,\n    getButtons,\n    pressButton,\n    releaseButton,\n    setButton,\n} from \"./buttons\";\nimport {\n    type ButtonBinding,\n    type ButtonsDef,\n    parseButtonBindings,\n} from \"./inputBindings\";\n\nexport class ButtonState<T = string> {\n    pressed: Set<T> = new Set([]);\n    pressedRepeat: Set<T> = new Set([]);\n    released: Set<T> = new Set([]);\n    down: Set<T> = new Set([]);\n    update() {\n        this.pressed.clear();\n        this.released.clear();\n        this.pressedRepeat.clear();\n    }\n    press(btn: T) {\n        this.pressed.add(btn);\n        this.pressedRepeat.add(btn);\n        this.down.add(btn);\n    }\n    pressRepeat(btn: T) {\n        this.pressedRepeat.add(btn);\n    }\n    release(btn: T) {\n        this.down.delete(btn);\n        this.pressed.delete(btn);\n        this.released.add(btn);\n    }\n}\n\nclass GamepadState {\n    buttonState: ButtonState<KGamepadButton> = new ButtonState();\n    stickState: Map<KGamepadStick, Vec2> = new Map();\n}\n\nclass FPSCounter {\n    dts: number[] = [];\n    timer: number = 0;\n    fps: number = 0;\n    tick(dt: number) {\n        this.dts.push(dt);\n        this.timer += dt;\n        if (this.timer >= 1) {\n            this.timer = 0;\n            this.fps = Math.round(\n                1 / (this.dts.reduce((a, b) => a + b) / this.dts.length),\n            );\n            this.dts = [];\n        }\n    }\n}\n\nexport type App = ReturnType<typeof initApp>;\nexport type AppState = ReturnType<typeof initAppState>;\n\n/**\n * The App method names that will have a helper in GameObjRaw\n */\nexport type AppEvents = keyof {\n    [K in keyof App as K extends `on${any}` ? K : never]: [never];\n};\n\n/**\n * Create the App state object.\n *\n * @ignore\n *\n * @param opt - Options.\n *\n * @returns The app state.\n */\nexport const initAppState = (opt: {\n    canvas: HTMLCanvasElement;\n    touchToMouse?: boolean;\n    gamepads?: Record<string, GamepadDef>;\n    pixelDensity?: number;\n    maxFPS?: number;\n    buttons?: ButtonsDef;\n}) => {\n    const buttons = opt.buttons ?? {};\n\n    return {\n        canvas: opt.canvas,\n        buttons: buttons,\n        buttonsByKey: new Map<Key, string[]>(),\n        buttonsByMouse: new Map<MouseButton, string[]>(),\n        buttonsByGamepad: new Map<KGamepadButton, string[]>(),\n        buttonsByKeyCode: new Map<string, string[]>(),\n        loopID: null as null | number,\n        stopped: false,\n        dt: 0,\n        fixedDt: 1 / 50,\n        restDt: 0,\n        time: 0,\n        realTime: 0,\n        fpsCounter: new FPSCounter(),\n        timeScale: 1,\n        skipTime: false,\n        isHidden: false,\n        numFrames: 0,\n        capsOn: false,\n        mousePos: new Vec2(0),\n        mouseDeltaPos: new Vec2(0),\n        keyState: new ButtonState<Key>(),\n        mouseState: new ButtonState<MouseButton>(),\n        mergedGamepadState: new GamepadState(),\n        gamepadStates: new Map<number, GamepadState>(),\n        lastInputDevice: null as \"mouse\" | \"keyboard\" | \"gamepad\" | null,\n        // unified input state\n        buttonState: new ButtonState<string>(),\n        gamepads: [] as KGamepad[],\n        charInputted: [] as string[],\n        isMouseMoved: false,\n        lastWidth: opt.canvas.offsetWidth,\n        lastHeight: opt.canvas.offsetHeight,\n        events: new KEventHandler<AppEventMap>(),\n    };\n};\n\n/**\n * Create the App, the context, and handler for all things related to the game\n * canvas, input, and DOM interaction.\n *\n * @ignore\n *\n * @param opt - Options.\n *\n * @returns The app context.\n */\nexport const initApp = (\n    opt: {\n        canvas: HTMLCanvasElement;\n    } & KAPLAYOpt,\n) => {\n    if (!opt.canvas) {\n        throw new Error(\"Please provide a canvas\");\n    }\n\n    const state = initAppState(opt);\n    parseButtonBindings(state);\n\n    function dt() {\n        return state.dt * state.timeScale;\n    }\n\n    function fixedDt() {\n        return state.fixedDt * state.timeScale;\n    }\n\n    function restDt() {\n        return state.restDt * state.timeScale;\n    }\n\n    function isHidden() {\n        return state.isHidden;\n    }\n\n    function time() {\n        return state.time;\n    }\n\n    function fps() {\n        return state.fpsCounter.fps;\n    }\n\n    function numFrames() {\n        return state.numFrames;\n    }\n\n    function screenshot(): string {\n        return state.canvas.toDataURL();\n    }\n\n    function screenshotToBlob(): Promise<Blob> {\n        return new Promise<Blob>((resolve, reject) => {\n            state.canvas.toBlob(b => {\n                if (b !== null) resolve(b);\n                else reject(new Error(\"failed to make blob\"));\n            });\n        });\n    }\n\n    function setCursor(c: Cursor): void {\n        state.canvas.style.cursor = c;\n    }\n\n    function getCursor(): Cursor {\n        return state.canvas.style.cursor;\n    }\n\n    function setCursorLocked(b: boolean): void {\n        if (b) {\n            try {\n                const res = state.canvas\n                    .requestPointerLock() as unknown as Promise<void>;\n                if (res?.catch) {\n                    res.catch((e) => console.error(e));\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        }\n        else {\n            document.exitPointerLock();\n        }\n    }\n\n    function isCursorLocked(): boolean {\n        return !!document.pointerLockElement;\n    }\n\n    // wrappers around full screen functions to work across browsers\n    function enterFullscreen(el: HTMLElement) {\n        if (el.requestFullscreen) el.requestFullscreen();\n        // @ts-ignore\n        else if (el.webkitRequestFullscreen) el.webkitRequestFullscreen();\n    }\n\n    function exitFullscreen() {\n        if (document.exitFullscreen) document.exitFullscreen();\n        // @ts-ignore\n        else if (document.webkitExitFullScreen) document.webkitExitFullScreen();\n    }\n\n    function setFullscreen(f: boolean = true) {\n        if (f) {\n            enterFullscreen(state.canvas);\n        }\n        else {\n            exitFullscreen();\n        }\n    }\n\n    function isFullscreen(): boolean {\n        return document.fullscreenElement === state.canvas\n            // @ts-ignore\n            || document.webkitFullscreenElement === state.canvas;\n    }\n\n    const isFocused = () => {\n        return document.activeElement === state.canvas;\n    };\n\n    function quit() {\n        state.stopped = true;\n        const ce = Object.entries(canvasEvents);\n        const de = Object.entries(docEvents);\n        const we = Object.entries(winEvents);\n        type EL = EventListenerOrEventListenerObject;\n        for (const [name, val] of ce) {\n            state.canvas.removeEventListener(name, val as EL);\n        }\n        for (const [name, val] of de) {\n            document.removeEventListener(name, val as EL);\n        }\n        for (const [name, val] of we) {\n            window.removeEventListener(name, val as EL);\n        }\n        resizeObserver.disconnect();\n    }\n\n    function run(\n        fixedUpdate: () => void,\n        update: (processInput: () => void, resetInput: () => void) => void,\n    ) {\n        if (state.loopID !== null) {\n            cancelAnimationFrame(state.loopID);\n        }\n\n        let fixedAccumulatedDt = 0;\n        let accumulatedDt = 0;\n\n        const frame = (t: number) => {\n            if (state.stopped) return;\n\n            // TODO: allow background actions?\n            if (document.visibilityState !== \"visible\") {\n                state.loopID = requestAnimationFrame(frame);\n                return;\n            }\n\n            const loopTime = t / 1000;\n            const realDt = Math.min(loopTime - state.realTime, 0.25);\n            const desiredDt = opt.maxFPS ? 1 / opt.maxFPS : 0;\n\n            state.realTime = loopTime;\n            accumulatedDt += realDt;\n\n            if (accumulatedDt > desiredDt) {\n                if (!state.skipTime) {\n                    fixedAccumulatedDt += accumulatedDt;\n                    state.dt = state.fixedDt;\n                    state.restDt = 0;\n                    while (fixedAccumulatedDt > state.fixedDt) {\n                        fixedAccumulatedDt -= state.fixedDt;\n                        if (fixedAccumulatedDt < state.fixedDt) {\n                            state.restDt = fixedAccumulatedDt;\n                        }\n                        fixedUpdate();\n                    }\n                    state.restDt = fixedAccumulatedDt;\n                    state.dt = accumulatedDt;\n                    state.time += dt();\n                    state.fpsCounter.tick(state.dt);\n                }\n                accumulatedDt = 0;\n                state.skipTime = false;\n                state.numFrames++;\n\n                update(processInput, resetInput);\n            }\n\n            state.loopID = requestAnimationFrame(frame);\n        };\n\n        frame(0);\n    }\n\n    function isTouchscreen() {\n        return (\"ontouchstart\" in window) || navigator.maxTouchPoints > 0;\n    }\n\n    function mousePos(): Vec2 {\n        return state.mousePos.clone();\n    }\n\n    function mouseDeltaPos(): Vec2 {\n        return state.mouseDeltaPos.clone();\n    }\n\n    function isMousePressed(m: MouseButton = \"left\"): boolean {\n        return state.mouseState.pressed.has(m);\n    }\n\n    function isMouseDown(m: MouseButton = \"left\"): boolean {\n        return state.mouseState.down.has(m);\n    }\n\n    function isMouseReleased(m: MouseButton = \"left\"): boolean {\n        return state.mouseState.released.has(m);\n    }\n\n    function isMouseMoved(): boolean {\n        return state.isMouseMoved;\n    }\n\n    function isKeyPressed(k?: Key | Key[]): boolean {\n        return k === undefined\n            ? state.keyState.pressed.size > 0\n            : setHasOrIncludes(state.keyState.pressed, k);\n    }\n\n    function isKeyPressedRepeat(k?: Key | Key[]): boolean {\n        return k === undefined\n            ? state.keyState.pressedRepeat.size > 0\n            : setHasOrIncludes(state.keyState.pressedRepeat, k);\n    }\n\n    function isKeyDown(k?: Key | Key[]): boolean {\n        return k === undefined\n            ? state.keyState.down.size > 0\n            : setHasOrIncludes(state.keyState.down, k);\n    }\n\n    function isKeyReleased(k?: Key | Key[]): boolean {\n        return k === undefined\n            ? state.keyState.released.size > 0\n            : setHasOrIncludes(state.keyState.released, k);\n    }\n\n    function isGamepadButtonPressed(\n        btn?: KGamepadButton | KGamepadButton[],\n    ): boolean {\n        return btn === undefined\n            ? state.mergedGamepadState.buttonState.pressed.size > 0\n            : setHasOrIncludes(\n                state.mergedGamepadState.buttonState.pressed,\n                btn,\n            );\n    }\n\n    function isGamepadButtonDown(\n        btn?: KGamepadButton | KGamepadButton[],\n    ): boolean {\n        return btn === undefined\n            ? state.mergedGamepadState.buttonState.down.size > 0\n            : setHasOrIncludes(state.mergedGamepadState.buttonState.down, btn);\n    }\n\n    function isGamepadButtonReleased(\n        btn?: KGamepadButton | KGamepadButton[],\n    ): boolean {\n        return btn === undefined\n            ? state.mergedGamepadState.buttonState.released.size > 0\n            : setHasOrIncludes(\n                state.mergedGamepadState.buttonState.released,\n                btn,\n            );\n    }\n\n    function isButtonPressed(btn?: string | string[]): boolean {\n        return btn === undefined\n            ? state.buttonState.pressed.size > 0\n            : setHasOrIncludes(state.buttonState.pressed, btn);\n    }\n\n    function isButtonDown(btn?: string | string[]): boolean {\n        return btn === undefined\n            ? state.buttonState.down.size > 0\n            : setHasOrIncludes(state.buttonState.down, btn);\n    }\n\n    function isButtonReleased(btn?: string | string[]): boolean {\n        return btn === undefined\n            ? state.buttonState.released.size > 0\n            : setHasOrIncludes(state.buttonState.released, btn);\n    }\n\n    function onResize(action: () => void): KEventController {\n        return state.events.on(\"resize\", action);\n    }\n\n    // input callbacks\n    const onKeyDown = overload2((action: (key: Key) => void) => {\n        return state.events.on(\"keyDown\", action);\n    }, (key: Key | Key[], action: (key: Key) => void) => {\n        return state.events.on(\n            \"keyDown\",\n            (k) => isEqOrIncludes(key, k) && action(k),\n        );\n    });\n\n    // key pressed is equal to the key by the user\n    const onKeyPress = overload2((action: (key: Key) => void) => {\n        return state.events.on(\"keyPress\", (k) => action(k));\n    }, (key: Key | Key[], action: (key: Key) => void) => {\n        return state.events.on(\n            \"keyPress\",\n            (k) => isEqOrIncludes(key, k) && action(k),\n        );\n    });\n\n    const onKeyPressRepeat = overload2((action: (key: Key) => void) => {\n        return state.events.on(\"keyPressRepeat\", action);\n    }, (key: Key | Key[], action: (key: Key) => void) => {\n        return state.events.on(\n            \"keyPressRepeat\",\n            (k) => isEqOrIncludes(key, k) && action(k),\n        );\n    });\n\n    const onKeyRelease = overload2((action: (key: Key) => void) => {\n        return state.events.on(\"keyRelease\", action);\n    }, (key: Key | Key[], action: (key: Key) => void) => {\n        return state.events.on(\n            \"keyRelease\",\n            (k) => isEqOrIncludes(key, k) && action(k),\n        );\n    });\n\n    const onMouseDown = overload2((action: (m: MouseButton) => void) => {\n        return state.events.on(\"mouseDown\", (m) => action(m));\n    }, (\n        mouse: MouseButton | MouseButton[],\n        action: (m: MouseButton) => void,\n    ) => {\n        return state.events.on(\n            \"mouseDown\",\n            (m) => isEqOrIncludes(mouse, m) && action(m),\n        );\n    });\n\n    const onMousePress = overload2((action: (m: MouseButton) => void) => {\n        return state.events.on(\"mousePress\", (m) => action(m));\n    }, (\n        mouse: MouseButton | MouseButton[],\n        action: (m: MouseButton) => void,\n    ) => {\n        return state.events.on(\n            \"mousePress\",\n            (m) => isEqOrIncludes(mouse, m) && action(m),\n        );\n    });\n\n    const onMouseRelease = overload2((action: (m: MouseButton) => void) => {\n        return state.events.on(\"mouseRelease\", (m) => action(m));\n    }, (\n        mouse: MouseButton | MouseButton[],\n        action: (m: MouseButton) => void,\n    ) => {\n        return state.events.on(\"mouseRelease\", (m) => m === mouse && action(m));\n    });\n\n    function onMouseMove(f: (pos: Vec2, dpos: Vec2) => void): KEventController {\n        return state.events.on(\n            \"mouseMove\",\n            () => f(mousePos(), mouseDeltaPos()),\n        );\n    }\n\n    function onCharInput(action: (ch: string) => void): KEventController {\n        return state.events.on(\"charInput\", action);\n    }\n\n    function onTouchStart(f: (pos: Vec2, t: Touch) => void): KEventController {\n        return state.events.on(\"touchStart\", f);\n    }\n\n    function onTouchMove(f: (pos: Vec2, t: Touch) => void): KEventController {\n        return state.events.on(\"touchMove\", f);\n    }\n\n    function onTouchEnd(f: (pos: Vec2, t: Touch) => void): KEventController {\n        return state.events.on(\"touchEnd\", f);\n    }\n\n    function onScroll(action: (delta: Vec2) => void): KEventController {\n        return state.events.on(\"scroll\", action);\n    }\n\n    function onHide(action: () => void): KEventController {\n        return state.events.on(\"hide\", action);\n    }\n\n    function onShow(action: () => void): KEventController {\n        return state.events.on(\"show\", action);\n    }\n\n    const onGamepadButtonPress = overload2(\n        (action: (btn: KGamepadButton, gamepad: KGamepad) => void) => {\n            return state.events.on(\n                \"gamepadButtonPress\",\n                (b, gp) => action(b, gp),\n            );\n        },\n        (\n            btn: KGamepadButton | KGamepadButton[],\n            action: (btn: KGamepadButton, gamepad: KGamepad) => void,\n        ) => {\n            return state.events.on(\n                \"gamepadButtonPress\",\n                (b, gp) => isEqOrIncludes(btn, b) && action(b, gp),\n            );\n        },\n    );\n\n    const onGamepadButtonDown = overload2(\n        (action: (btn: KGamepadButton, gamepad: KGamepad) => void) => {\n            return state.events.on(\n                \"gamepadButtonDown\",\n                (b, gp) => action(b, gp),\n            );\n        },\n        (\n            btn: KGamepadButton,\n            action: (btn: KGamepadButton, gamepad: KGamepad) => void,\n        ) => {\n            return state.events.on(\n                \"gamepadButtonDown\",\n                (b, gp) => isEqOrIncludes(btn, b) && action(b, gp),\n            );\n        },\n    );\n\n    const onGamepadButtonRelease = overload2(\n        (action: (btn: KGamepadButton, gamepad: KGamepad) => void) => {\n            return state.events.on(\n                \"gamepadButtonRelease\",\n                (b, gp) => action(b, gp),\n            );\n        },\n        (\n            btn: KGamepadButton | KGamepadButton[],\n            action: (btn: KGamepadButton, gamepad: KGamepad) => void,\n        ) => {\n            return state.events.on(\n                \"gamepadButtonRelease\",\n                (b, gp) => isEqOrIncludes(btn, b) && action(b, gp),\n            );\n        },\n    );\n\n    function onGamepadStick(\n        stick: KGamepadStick,\n        action: (value: Vec2, gp: KGamepad) => void,\n    ): KEventController {\n        return state.events.on(\n            \"gamepadStick\",\n            (a, v, gp) => a === stick && action(v, gp),\n        );\n    }\n\n    function onGamepadConnect(action: (gamepad: KGamepad) => void) {\n        return state.events.on(\"gamepadConnect\", action);\n    }\n\n    function onGamepadDisconnect(action: (gamepad: KGamepad) => void) {\n        return state.events.on(\"gamepadDisconnect\", action);\n    }\n\n    function getGamepadStick(stick: KGamepadStick): Vec2 {\n        return state.mergedGamepadState.stickState.get(stick) || new Vec2(0);\n    }\n\n    function charInputted(): string[] {\n        return [...state.charInputted];\n    }\n\n    function getGamepads(): KGamepad[] {\n        return [...state.gamepads];\n    }\n\n    const onButtonPress = overload2((action: (btn: string) => void) => {\n        return state.events.on(\"buttonPress\", (b) => action(b));\n    }, (btn: string | string, action: (btn: string) => void) => {\n        return state.events.on(\n            \"buttonPress\",\n            (b) => isEqOrIncludes(btn, b) && action(b),\n        );\n    });\n\n    const onButtonDown = overload2((action: (btn: string) => void) => {\n        return state.events.on(\"buttonDown\", (b) => action(b));\n    }, (btn: string | string, action: (btn: string) => void) => {\n        return state.events.on(\n            \"buttonDown\",\n            (b) => isEqOrIncludes(btn, b) && action(b),\n        );\n    });\n\n    const onButtonRelease = overload2((action: (btn: string) => void) => {\n        return state.events.on(\"buttonRelease\", (b) => action(b));\n    }, (btn: string | string, action: (btn: string) => void) => {\n        return state.events.on(\n            \"buttonRelease\",\n            (b) => isEqOrIncludes(btn, b) && action(b),\n        );\n    });\n\n    const getLastInputDeviceType = () => {\n        return state.lastInputDevice;\n    };\n\n    function processInput() {\n        state.events.trigger(\"input\");\n        state.keyState.down.forEach((k) => state.events.trigger(\"keyDown\", k));\n        state.mouseState.down.forEach((k) =>\n            state.events.trigger(\"mouseDown\", k)\n        );\n        state.buttonState.down.forEach((btn) => {\n            state.events.trigger(\"buttonDown\", btn);\n        });\n\n        processGamepad();\n    }\n\n    function resetInput() {\n        state.keyState.update();\n        state.mouseState.update();\n        state.buttonState.update();\n\n        state.mergedGamepadState.buttonState.update();\n        state.mergedGamepadState.stickState.forEach((v, k) => {\n            state.mergedGamepadState.stickState.set(k, new Vec2(0));\n        });\n\n        state.charInputted = [];\n        state.isMouseMoved = false;\n        state.mouseDeltaPos = new Vec2(0);\n\n        state.gamepadStates.forEach((s) => {\n            s.buttonState.update();\n            s.stickState.forEach((v, k) => {\n                s.stickState.set(k, new Vec2(0));\n            });\n        });\n    }\n\n    function registerGamepad(browserGamepad: Gamepad) {\n        const gamepad: KGamepad = {\n            index: browserGamepad.index,\n            isPressed: (btn: KGamepadButton) => {\n                return state.gamepadStates.get(browserGamepad.index)\n                    ?.buttonState\n                    .pressed.has(btn) || false;\n            },\n            isDown: (btn: KGamepadButton) => {\n                return state.gamepadStates.get(browserGamepad.index)\n                    ?.buttonState\n                    .down.has(btn) || false;\n            },\n            isReleased: (btn: KGamepadButton) => {\n                return state.gamepadStates.get(browserGamepad.index)\n                    ?.buttonState\n                    .released.has(btn) || false;\n            },\n            getStick: (stick: KGamepadStick) => {\n                return state.gamepadStates.get(browserGamepad.index)?.stickState\n                    .get(stick) || vec2();\n            },\n        };\n\n        state.gamepads.push(gamepad);\n\n        state.gamepadStates.set(browserGamepad.index, {\n            buttonState: new ButtonState(),\n            stickState: new Map([\n                [\"left\", new Vec2(0)],\n                [\"right\", new Vec2(0)],\n            ]),\n        });\n\n        return gamepad;\n    }\n\n    function removeGamepad(gamepad: Gamepad) {\n        state.gamepads = state.gamepads.filter((g) =>\n            g.index !== gamepad.index\n        );\n        state.gamepadStates.delete(gamepad.index);\n    }\n\n    // TODO: Clean up this function\n    function processGamepad() {\n        for (const browserGamepad of navigator.getGamepads()) {\n            if (\n                browserGamepad && !state.gamepadStates.has(\n                    browserGamepad.index,\n                )\n            ) {\n                registerGamepad(browserGamepad);\n            }\n        }\n\n        for (const gamepad of state.gamepads) {\n            const browserGamepad = navigator.getGamepads()[gamepad.index];\n            if (!browserGamepad) continue;\n\n            const customMap = opt.gamepads ?? {};\n            const map = customMap[browserGamepad.id]\n                || GP_MAP[browserGamepad.id] || GP_MAP[\"default\"];\n            const gamepadState = state.gamepadStates.get(gamepad.index);\n            if (!gamepadState) continue;\n\n            for (let i = 0; i < browserGamepad.buttons.length; i++) {\n                const gamepadBtn = map.buttons[i];\n                const browserGamepadBtn = browserGamepad.buttons[i];\n                const isGamepadButtonBind = state.buttonsByGamepad.has(\n                    gamepadBtn,\n                );\n\n                if (browserGamepadBtn.pressed) {\n                    if (gamepadState.buttonState.down.has(gamepadBtn)) {\n                        state.events.trigger(\n                            \"gamepadButtonDown\",\n                            gamepadBtn,\n                            gamepad,\n                        );\n\n                        continue;\n                    }\n\n                    state.lastInputDevice = \"gamepad\";\n\n                    if (isGamepadButtonBind) {\n                        // replicate input in merged state, defined button state and gamepad state\n                        state.buttonsByGamepad.get(gamepadBtn)?.forEach(\n                            (btn) => {\n                                state.buttonState.press(btn);\n                                state.events.trigger(\"buttonPress\", btn);\n                            },\n                        );\n                    }\n\n                    state.mergedGamepadState.buttonState.press(gamepadBtn);\n                    gamepadState.buttonState.press(gamepadBtn);\n                    state.events.trigger(\n                        \"gamepadButtonPress\",\n                        gamepadBtn,\n                        gamepad,\n                    );\n                }\n                else if (gamepadState.buttonState.down.has(gamepadBtn)) {\n                    if (isGamepadButtonBind) {\n                        state.buttonsByGamepad.get(gamepadBtn)?.forEach(\n                            (btn) => {\n                                state.buttonState.release(btn);\n                                state.events.trigger(\"buttonRelease\", btn);\n                            },\n                        );\n                    }\n\n                    state.mergedGamepadState.buttonState.release(\n                        gamepadBtn,\n                    );\n                    gamepadState.buttonState.release(gamepadBtn);\n\n                    state.events.trigger(\n                        \"gamepadButtonRelease\",\n                        gamepadBtn,\n                        gamepad,\n                    );\n                }\n            }\n\n            for (const stickName in map.sticks) {\n                const stick = map.sticks[stickName as KGamepadStick];\n                if (!stick) continue;\n                const value = new Vec2(\n                    browserGamepad.axes[stick.x],\n                    browserGamepad.axes[stick.y],\n                );\n                gamepadState.stickState.set(stickName as KGamepadStick, value);\n                state.mergedGamepadState.stickState.set(\n                    stickName as KGamepadStick,\n                    value,\n                );\n                state.events.trigger(\"gamepadStick\", stickName, value, gamepad);\n            }\n        }\n    }\n\n    type EventList<M> = {\n        [event in keyof M]?: (event: M[event]) => void;\n    };\n\n    const canvasEvents: EventList<HTMLElementEventMap> = {};\n    const docEvents: EventList<DocumentEventMap> = {};\n    const winEvents: EventList<WindowEventMap> = {};\n\n    const pd = opt.pixelDensity || 1;\n\n    canvasEvents.mousemove = (e) => {\n        // \uD83C\uDF5D Here we depend of GFX Context even if initGfx needs initApp for being used\n        // Letterbox creates some black bars so we need to remove that for calculating\n        // mouse position\n\n        // Ironically, e.offsetX and e.offsetY are the mouse position. Is not\n        // related to what we call the \"offset\" in this code\n        const mousePos = canvasToViewport(new Vec2(e.offsetX, e.offsetY));\n        const mouseDeltaPos = new Vec2(e.movementX, e.movementY);\n\n        if (isFullscreen()) {\n            const cw = state.canvas.width / pd;\n            const ch = state.canvas.height / pd;\n            const ww = window.innerWidth;\n            const wh = window.innerHeight;\n            const rw = ww / wh;\n            const rc = cw / ch;\n            if (rw > rc) {\n                const ratio = wh / ch;\n                const offset = (ww - (cw * ratio)) / 2;\n                mousePos.x = map(e.offsetX - offset, 0, cw * ratio, 0, cw);\n                mousePos.y = map(e.offsetY, 0, ch * ratio, 0, ch);\n            }\n            else {\n                const ratio = ww / cw;\n                const offset = (wh - (ch * ratio)) / 2;\n                mousePos.x = map(e.offsetX, 0, cw * ratio, 0, cw);\n                mousePos.y = map(e.offsetY - offset, 0, ch * ratio, 0, ch);\n            }\n        }\n\n        state.lastInputDevice = \"mouse\";\n        state.events.onOnce(\"input\", () => {\n            state.isMouseMoved = true;\n            state.mousePos = mousePos;\n            state.mouseDeltaPos = mouseDeltaPos;\n            state.events.trigger(\"mouseMove\");\n        });\n    };\n\n    const MOUSE_BUTTONS: MouseButton[] = [\n        \"left\",\n        \"middle\",\n        \"right\",\n        \"back\",\n        \"forward\",\n    ];\n\n    canvasEvents.mousedown = (e) => {\n        state.events.onOnce(\"input\", () => {\n            const m = MOUSE_BUTTONS[e.button];\n            if (!m) return;\n\n            state.lastInputDevice = \"mouse\";\n\n            if (state.buttonsByMouse.has(m)) {\n                state.buttonsByMouse.get(m)?.forEach((btn) => {\n                    state.buttonState.press(btn);\n                    state.events.trigger(\"buttonPress\", btn);\n                });\n            }\n\n            state.mouseState.press(m);\n            state.events.trigger(\"mousePress\", m);\n        });\n    };\n\n    canvasEvents.mouseup = (e) => {\n        state.events.onOnce(\"input\", () => {\n            const m = MOUSE_BUTTONS[e.button];\n            if (!m) return;\n\n            if (state.buttonsByMouse.has(m)) {\n                state.buttonsByMouse.get(m)?.forEach((btn) => {\n                    state.buttonState.release(btn);\n                    state.events.trigger(\"buttonRelease\", btn);\n                });\n            }\n\n            state.mouseState.release(m);\n            state.events.trigger(\"mouseRelease\", m);\n        });\n    };\n\n    const PREVENT_DEFAULT_KEYS = new Set([\n        \" \",\n        \"ArrowLeft\",\n        \"ArrowRight\",\n        \"ArrowUp\",\n        \"ArrowDown\",\n        \"Tab\",\n    ]);\n\n    // translate these key names to a simpler version\n    const KEY_ALIAS = {\n        \"ArrowLeft\": \"left\",\n        \"ArrowRight\": \"right\",\n        \"ArrowUp\": \"up\",\n        \"ArrowDown\": \"down\",\n        \" \": \"space\",\n    };\n\n    canvasEvents.keydown = (e) => {\n        state.capsOn = e.getModifierState(\"CapsLock\");\n\n        if (PREVENT_DEFAULT_KEYS.has(e.key)) {\n            e.preventDefault();\n        }\n        state.events.onOnce(\"input\", () => {\n            const k: Key = KEY_ALIAS[e.key as keyof typeof KEY_ALIAS] as Key\n                || e.key.toLowerCase();\n            const code = e.code;\n\n            if (k === undefined) throw new Error(`Unknown key: ${e.key}`);\n            if (k.length === 1) {\n                state.events.trigger(\"charInput\", k);\n                state.charInputted.push(k);\n            }\n            else if (k === \"space\") {\n                state.events.trigger(\"charInput\", \" \");\n                state.charInputted.push(\" \");\n            }\n            if (e.repeat) {\n                state.keyState.pressRepeat(k);\n                state.events.trigger(\"keyPressRepeat\", k);\n            }\n            else {\n                state.lastInputDevice = \"keyboard\";\n\n                if (state.buttonsByKey.has(k)) {\n                    state.buttonsByKey.get(k)?.forEach((btn) => {\n                        state.buttonState.press(btn);\n                        state.events.trigger(\"buttonPress\", btn);\n                    });\n                }\n\n                if (state.buttonsByKeyCode.has(code)) {\n                    state.buttonsByKeyCode.get(code)?.forEach((btn) => {\n                        state.buttonState.press(btn);\n                        state.events.trigger(\"buttonPress\", btn);\n                    });\n                }\n\n                state.keyState.press(k);\n                state.events.trigger(\"keyPressRepeat\", k);\n                state.events.trigger(\"keyPress\", k);\n            }\n        });\n    };\n\n    canvasEvents.keyup = (e) => {\n        state.events.onOnce(\"input\", () => {\n            const k: Key = KEY_ALIAS[e.key as keyof typeof KEY_ALIAS] as Key\n                || e.key.toLowerCase();\n            const code = e.code;\n\n            if (state.buttonsByKey.has(k)) {\n                state.buttonsByKey.get(k)?.forEach((btn) => {\n                    state.buttonState.release(btn);\n                    state.events.trigger(\"buttonRelease\", btn);\n                });\n            }\n\n            if (state.buttonsByKeyCode.has(code)) {\n                state.buttonsByKeyCode.get(code)?.forEach((btn) => {\n                    state.buttonState.release(btn);\n                    state.events.trigger(\"buttonRelease\", btn);\n                });\n            }\n\n            state.keyState.release(k);\n            state.events.trigger(\"keyRelease\", k);\n        });\n    };\n\n    // TODO: handle all touches at once instead of sequentially\n    canvasEvents.touchstart = (e) => {\n        // disable long tap context menu\n        e.preventDefault();\n\n        state.events.onOnce(\"input\", () => {\n            const touches = [...e.changedTouches];\n            const box = state.canvas.getBoundingClientRect();\n\n            if (opt.touchToMouse !== false) {\n                state.mousePos = canvasToViewport(\n                    new Vec2(\n                        touches[0].clientX - box.x,\n                        touches[0].clientY - box.y,\n                    ),\n                );\n                state.lastInputDevice = \"mouse\";\n\n                if (state.buttonsByMouse.has(\"left\")) {\n                    state.buttonsByMouse.get(\"left\")?.forEach((btn) => {\n                        state.buttonState.press(btn);\n                        state.events.trigger(\"buttonPress\", btn);\n                    });\n                }\n\n                state.mouseState.press(\"left\");\n                state.events.trigger(\"mousePress\", \"left\");\n            }\n\n            touches.forEach((t) => {\n                state.events.trigger(\n                    \"touchStart\",\n                    canvasToViewport(\n                        new Vec2(\n                            t.clientX - box.x,\n                            t.clientY - box.y,\n                        ),\n                    ),\n                    t,\n                );\n            });\n        });\n    };\n\n    canvasEvents.touchmove = (e) => {\n        // disable scrolling\n        e.preventDefault();\n        state.events.onOnce(\"input\", () => {\n            const touches = [...e.changedTouches];\n            const box = state.canvas.getBoundingClientRect();\n\n            if (opt.touchToMouse !== false) {\n                const lastMousePos = state.mousePos;\n                state.mousePos = canvasToViewport(\n                    new Vec2(\n                        touches[0].clientX - box.x,\n                        touches[0].clientY - box.y,\n                    ),\n                );\n                state.mouseDeltaPos = state.mousePos.sub(lastMousePos);\n                state.events.trigger(\"mouseMove\");\n            }\n\n            touches.forEach((t) => {\n                state.events.trigger(\n                    \"touchMove\",\n                    canvasToViewport(\n                        new Vec2(\n                            t.clientX - box.x,\n                            t.clientY - box.y,\n                        ),\n                    ),\n                    t,\n                );\n            });\n        });\n    };\n\n    canvasEvents.touchend = (e) => {\n        state.events.onOnce(\"input\", () => {\n            const touches = [...e.changedTouches];\n            const box = state.canvas.getBoundingClientRect();\n\n            if (opt.touchToMouse != false) {\n                state.mousePos = canvasToViewport(\n                    new Vec2(\n                        touches[0].clientX - box.x,\n                        touches[0].clientY - box.y,\n                    ),\n                );\n                state.mouseDeltaPos = new Vec2(0, 0);\n\n                if (state.buttonsByMouse.has(\"left\")) {\n                    state.buttonsByMouse.get(\"left\")?.forEach((btn) => {\n                        state.buttonState.release(btn);\n                        state.events.trigger(\"buttonRelease\", btn);\n                    });\n                }\n\n                state.mouseState.release(\"left\");\n                state.events.trigger(\"mouseRelease\", \"left\");\n            }\n\n            touches.forEach((t) => {\n                state.events.trigger(\n                    \"touchEnd\",\n                    canvasToViewport(\n                        new Vec2(\n                            t.clientX - box.x,\n                            t.clientY - box.y,\n                        ),\n                    ),\n                    t,\n                );\n            });\n        });\n    };\n\n    canvasEvents.touchcancel = (e) => {\n        state.events.onOnce(\"input\", () => {\n            const touches = [...e.changedTouches];\n            const box = state.canvas.getBoundingClientRect();\n\n            if (opt.touchToMouse !== false) {\n                state.mousePos = canvasToViewport(\n                    new Vec2(\n                        touches[0].clientX - box.x,\n                        touches[0].clientY - box.y,\n                    ),\n                );\n                state.mouseState.release(\"left\");\n                state.events.trigger(\"mouseRelease\", \"left\");\n            }\n\n            touches.forEach((t) => {\n                state.events.trigger(\n                    \"touchEnd\",\n                    canvasToViewport(\n                        new Vec2(\n                            t.clientX - box.x,\n                            t.clientY - box.y,\n                        ),\n                    ),\n                    t,\n                );\n            });\n        });\n    };\n\n    // TODO: option to not prevent default?\n    canvasEvents.wheel = (e) => {\n        e.preventDefault();\n        state.events.onOnce(\"input\", () => {\n            state.events.trigger(\"scroll\", new Vec2(e.deltaX, e.deltaY));\n        });\n    };\n\n    canvasEvents.contextmenu = (e) => e.preventDefault();\n\n    docEvents.visibilitychange = () => {\n        if (document.visibilityState === \"visible\") {\n            // prevent a surge of dt when switch back after the tab being hidden for a while\n            state.skipTime = true;\n            state.isHidden = false;\n            state.events.trigger(\"show\");\n        }\n        else {\n            state.isHidden = true;\n            state.events.trigger(\"hide\");\n        }\n    };\n\n    winEvents.gamepadconnected = (e) => {\n        const kbGamepad = registerGamepad(e.gamepad);\n        state.events.onOnce(\"input\", () => {\n            state.events.trigger(\"gamepadConnect\", kbGamepad);\n        });\n    };\n\n    winEvents.gamepaddisconnected = (e) => {\n        const kbGamepad =\n            getGamepads().filter((g) => g.index === e.gamepad.index)[0];\n        removeGamepad(e.gamepad);\n        state.events.onOnce(\"input\", () => {\n            state.events.trigger(\"gamepadDisconnect\", kbGamepad);\n        });\n    };\n\n    for (const [name, val] of Object.entries(canvasEvents)) {\n        state.canvas.addEventListener(\n            name,\n            val as EventListenerOrEventListenerObject,\n        );\n    }\n\n    for (const [name, val] of Object.entries(docEvents)) {\n        document.addEventListener(\n            name,\n            val as EventListenerOrEventListenerObject,\n        );\n    }\n\n    for (const [name, val] of Object.entries(winEvents)) {\n        window.addEventListener(\n            name,\n            val as EventListenerOrEventListenerObject,\n        );\n    }\n\n    const resizeObserver = new ResizeObserver((entries) => {\n        for (const entry of entries) {\n            if (entry.target !== state.canvas) continue;\n            if (\n                state.lastWidth === state.canvas.offsetWidth\n                && state.lastHeight === state.canvas.offsetHeight\n            ) return;\n            state.lastWidth = state.canvas.offsetWidth;\n            state.lastHeight = state.canvas.offsetHeight;\n            state.events.onOnce(\"input\", () => {\n                state.events.trigger(\"resize\");\n            });\n        }\n    });\n\n    resizeObserver.observe(state.canvas);\n\n    return {\n        state,\n        dt,\n        fixedDt,\n        restDt,\n        time,\n        run,\n        canvas: state.canvas,\n        fps,\n        numFrames,\n        quit,\n        isHidden,\n        setFullscreen,\n        isFullscreen,\n        setCursor,\n        screenshot,\n        screenshotToBlob,\n        getGamepads,\n        getCursor,\n        setCursorLocked,\n        isCursorLocked,\n        isTouchscreen,\n        mousePos,\n        mouseDeltaPos,\n        isKeyDown,\n        isKeyPressed,\n        isKeyPressedRepeat,\n        isKeyReleased,\n        isMouseDown,\n        isMousePressed,\n        isMouseReleased,\n        isMouseMoved,\n        isGamepadButtonPressed,\n        isGamepadButtonDown,\n        isGamepadButtonReleased,\n        isFocused,\n        getGamepadStick,\n        isButtonPressed,\n        isButtonDown,\n        isButtonReleased,\n        getButton,\n        getButtons,\n        setButton,\n        pressButton,\n        releaseButton,\n        charInputted,\n        onResize,\n        onKeyDown,\n        onKeyPress,\n        onKeyPressRepeat,\n        onKeyRelease,\n        onMouseDown,\n        onMousePress,\n        onMouseRelease,\n        onMouseMove,\n        onCharInput,\n        onTouchStart,\n        onTouchMove,\n        onTouchEnd,\n        onScroll,\n        onHide,\n        onShow,\n        onGamepadButtonDown,\n        onGamepadButtonPress,\n        onGamepadButtonRelease,\n        onGamepadStick,\n        onGamepadConnect,\n        onGamepadDisconnect,\n        onButtonPress,\n        onButtonDown,\n        onButtonRelease,\n        getLastInputDeviceType,\n        events: state.events,\n    };\n};\n", "import type { App } from \"../app/app\";\nimport type { InternalAudioCtx } from \"../audio/audio\";\nimport { LOG_MAX } from \"../constants/general\";\nimport type { FrameRenderer } from \"../core/frameRendering\";\nimport type { Game } from \"../game/game\";\nimport type { AppGfxCtx } from \"../gfx/gfxApp\";\nimport { _k } from \"../shared\";\nimport type { KAPLAYOpt } from \"../types\";\nimport type { Recording } from \"./record\";\n\n/**\n * An interface for debugging the game.\n *\n * @group Debug\n */\nexport interface Debug {\n    /**\n     * Pause the whole game.\n     */\n    paused: boolean;\n    /**\n     * Draw bounding boxes of all objects with `area()` component, hover to inspect their states.\n     */\n    inspect: boolean;\n    /**\n     * Global time scale.\n     */\n    timeScale: number;\n    /**\n     * Show the debug log or not.\n     */\n    showLog: boolean;\n    /**\n     * Current frames per second.\n     */\n    fps(): number;\n    /**\n     * Total number of frames elapsed.\n     *\n     * @since v3000.0\n     */\n    numFrames(): number;\n    /**\n     * Number of draw calls made last frame.\n     */\n    drawCalls(): number;\n    /**\n     * Step to the next frame. Useful with pausing.\n     */\n    stepFrame(): void;\n    /**\n     * Clear the debug log.\n     */\n    clearLog(): void;\n    /**\n     * Log some text to on screen debug log.\n     */\n    log(...msg: any): void;\n    /**\n     * Log an error message to on screen debug log.\n     */\n    error(msg: any): void;\n    /**\n     * The recording handle if currently in recording mode.\n     *\n     * @since v2000.1\n     */\n    curRecording: Recording | null;\n    /**\n     * Get total number of objects.\n     *\n     * @since v3001.0\n     */\n    numObjects(): number;\n}\n\nexport const createDebug = (\n    gopt: KAPLAYOpt,\n    app: App,\n    appGfx: AppGfxCtx,\n    audio: InternalAudioCtx,\n    game: Game,\n    fr: FrameRenderer,\n): Debug => {\n    let debugPaused = false;\n\n    const debug = {\n        inspect: false,\n        set timeScale(timeScale: number) {\n            app.state.timeScale = timeScale;\n        },\n        get timeScale() {\n            return app.state.timeScale;\n        },\n        showLog: true,\n        fps: () => app.fps(),\n        numFrames: () => app.numFrames(),\n        stepFrame: fr.updateFrame,\n        drawCalls: () => appGfx.lastDrawCalls,\n        clearLog: () => game.logs = [],\n        log: (...msgs) => {\n            const max = gopt.logMax ?? LOG_MAX;\n            const msg = msgs.length > 1 ? msgs.concat(\" \").join(\" \") : msgs[0];\n\n            game.logs.unshift({\n                msg: msg,\n                time: app.time(),\n            });\n            if (game.logs.length > max) {\n                game.logs = game.logs.slice(0, max);\n            }\n        },\n        error: (msg) =>\n            debug.log(new Error(msg.toString ? msg.toString() : msg as string)),\n        curRecording: null,\n        numObjects: () => game.root.get(\"*\", { recursive: true }).length,\n        get paused() {\n            return debugPaused;\n        },\n        set paused(v) {\n            debugPaused = v;\n            if (v) {\n                audio.ctx.suspend();\n            }\n            else {\n                audio.ctx.resume();\n            }\n        },\n    } satisfies Debug;\n\n    return debug;\n};\n", "// The Game is the interface that connects all related to a KAPLAY game state.\n// It contains the game object tree, game object events, scenes, etc.\n\n// All in /game folder is stuff that uses/modify the game state.\n\nimport type { Asset } from \"../assets/asset\";\nimport type { BitmapFontData } from \"../assets/bitmapFont\";\nimport type { SoundData } from \"../assets/sound\";\nimport type { SpriteData } from \"../assets/sprite\";\nimport type { FakeMouseComp } from \"../ecs/components/misc/fakeMouse\";\nimport { timer, type TimerComp } from \"../ecs/components/misc/timer\";\nimport type { PosComp } from \"../ecs/components/transform/pos\";\nimport { makeInternal } from \"../ecs/entity/make\";\nimport type { System } from \"../ecs/systems/systems\";\nimport type { GameEventMap, GameObjEventMap } from \"../events/eventMap\";\nimport { KEventHandler } from \"../events/events\";\nimport { Mat23, RNG } from \"../math/math\";\nimport { Vec2 } from \"../math/Vec2\";\nimport type { GameObj } from \"../types\";\nimport type { SceneDef, SceneState } from \"./scenes\";\n\n/**\n * The \"Game\" it's all the state related to the game running\n */\nexport type Game = {\n    /**\n     * The last game object id used.\n     */\n    gameObjLastId: number;\n    /**\n     * Where game object global events are stored.\n     */\n    events: KEventHandler<GameEventMap & GameObjEventMap>;\n    /**\n     * The root game object, parent of all game objects.\n     */\n    root: GameObj<TimerComp>;\n    /**\n     * The gravity vector of the game.\n     */\n    gravity: Vec2 | null;\n    /**\n     * The scenes of the game.\n     */\n    scenes: Record<string, SceneDef>;\n    /**\n     * The scene stack that stores the scene states\n     */\n    sceneStack: Array<SceneState>;\n    /**\n     * The current active scene arguments\n     */\n    currentSceneArgs: unknown[];\n    /**\n     * The current scene of the game.\n     */\n    currentScene: string | null;\n    /**\n     * The layers of the game.\n     */\n    layers: string[] | null;\n    /**\n     * The default layer index of the game.\n     */\n    defaultLayerIndex: number;\n    /**\n     * All systems added to the game.\n     */\n    systems: System[];\n    /**\n     * The systems added to the game, sorted by event.\n     */\n    systemsByEvent: [\n        System[],\n        System[],\n        System[],\n        System[],\n        System[],\n        System[],\n    ];\n    defaultAssets: {\n        ka?: Asset<SpriteData>;\n        boom?: Asset<SpriteData>;\n        burp?: SoundData;\n        happy?: string;\n        bean?: string;\n    };\n    logs: Log[];\n    cam: CamData;\n    /**\n     * The default RNG used by rng functions.\n     */\n    // TODO: let user pass seed\n    defRNG: RNG;\n    /**\n     * If game just crashed.\n     */\n    crashed: boolean;\n    /**\n     * How many areas are in the game.\n     */\n    areaCount: number;\n    /**\n     * Fake Mouse game obj.\n     */\n    fakeMouse: GameObj<FakeMouseComp | PosComp> | null;\n    /**\n     * All text inputs in the game.\n     */\n    allTextInputs: Set<GameObj>;\n    /**\n     * Deprecated functions we already warned about.\n     */\n    warned: Set<string>;\n};\n\n/**\n * @group Debug\n */\ntype Log = { msg: string | { toString(): string }; time: number };\n\n/**\n * @group Rendering\n * @subgroup Camera\n */\ntype CamData = {\n    pos: Vec2 | null;\n    scale: Vec2;\n    angle: number;\n    shake: number;\n    transform: Mat23;\n};\n\n/**\n * Creates the Game interface.\n *\n * This will create:\n *\n * - The root game object\n * - The game object events\n * - The camera data\n *\n * @returns A Game\n */\nexport const createGame = (): Game => {\n    const game: Game = {\n        gameObjLastId: 0,\n        root: makeInternal(0) as GameObj<TimerComp>,\n        events: new KEventHandler<GameEventMap & GameObjEventMap>(),\n        cam: {\n            pos: null as Vec2 | null,\n            scale: new Vec2(1),\n            angle: 0,\n            shake: 0,\n            transform: new Mat23(),\n        },\n\n        currentSceneArgs: [], // stores the current scene arguments //\n        sceneStack: [], // stores the scene names //\n\n        // Systems\n        systems: [], // all systems added\n        // we allocate systems here\n        systemsByEvent: [\n            [], // beforeUpdate\n            [], // beforeFixedUpdate\n            [], // beforeDraw\n            [], // afterUpdate\n            [], // afterFixedUpdate\n            [], // afterDraw\n        ],\n\n        // Scenes\n        scenes: {} as Record<string, SceneDef>,\n        currentScene: null as string | null,\n\n        // Layers\n        layers: null as string[] | null,\n        defaultLayerIndex: 0,\n\n        // Gravity\n        gravity: null as Vec2 | null,\n\n        // Default assets\n        defaultAssets: {},\n\n        // Logs\n        logs: [] as { msg: string | { toString(): string }; time: number }[],\n\n        // Fake mouse API\n        fakeMouse: null,\n\n        // Some state\n        crashed: false,\n        areaCount: 0,\n        allTextInputs: new Set<GameObj>(),\n        defRNG: new RNG(Date.now()),\n        warned: new Set<string>(),\n    };\n\n    game.root.use(timer());\n    game.gameObjLastId++;\n\n    return game;\n};\n", "import type { KAPLAYOpt, MustKAPLAYOpt } from \"../types\";\n\nexport const createCanvas = (gopt: MustKAPLAYOpt) => {\n    const root = gopt.root ?? document.body;\n    const pixelDensity = gopt.pixelDensity || 1;\n\n    // If root is not defined (which falls back to <body>) we assume user is on a clean page,\n    // and modify <body> to better fit a full screen canvas\n\n    if (root === document.body) {\n        document.body.style[\"width\"] = \"100%\";\n        document.body.style[\"height\"] = \"100%\";\n        document.body.style[\"margin\"] = \"0px\";\n        document.documentElement.style[\"width\"] = \"100%\";\n        document.documentElement.style[\"height\"] = \"100%\";\n    }\n\n    // Create a <canvas> if user didn't provide one\n    const canvas = gopt.canvas\n        ?? root.appendChild(document.createElement(\"canvas\"));\n\n    // canvas css styles\n    const styles = [\n        \"outline: none\",\n        \"cursor: default\",\n    ];\n\n    // Adjust canvas size according to user viewport settings\n    if (\n        // check if isFixed\n        gopt.width && gopt.height && !gopt.letterbox\n    ) {\n        canvas.width = gopt.width * gopt.scale;\n        canvas.height = gopt.height * gopt.scale;\n        styles.push(`width: ${canvas.width}px`);\n        styles.push(`height: ${canvas.height}px`);\n    }\n    else {\n        canvas.width = canvas.parentElement!.offsetWidth;\n        canvas.height = canvas.parentElement!.offsetHeight;\n        styles.push(\"width: 100%\");\n        styles.push(\"height: 100%\");\n    }\n\n    // Cripsing\n    if (gopt.crisp) {\n        // chrome only supports pixelated and firefox only supports crisp-edges\n        styles.push(\"image-rendering: pixelated\");\n        styles.push(\"image-rendering: crisp-edges\");\n    }\n\n    canvas.style.cssText = styles.join(\";\");\n    canvas.width *= pixelDensity;\n    canvas.height *= pixelDensity;\n\n    // Makes canvas focusable\n    canvas.tabIndex = 0;\n\n    return canvas;\n};\n", "import { makeShader, type Shader, type Uniform } from \"../assets/shader\";\nimport {\n    DEF_FRAG,\n    DEF_VERT,\n    MAX_BATCHED_INDICES,\n    MAX_BATCHED_VERTS,\n    VERTEX_FORMAT,\n} from \"../constants/general\";\nimport { type Color, rgb } from \"../math/color\";\nimport { Mat23 } from \"../math/math\";\nimport { Vec2 } from \"../math/Vec2\";\nimport type { MustKAPLAYOpt } from \"../types\";\nimport type { FontAtlas } from \"./formatText\";\nimport { FrameBuffer } from \"./FrameBuffer\";\nimport { BatchRenderer, type GfxCtx, Texture } from \"./gfx\";\n\nexport type AppGfxCtx = {\n    /** How many draw calls we're doing last frame */\n    lastDrawCalls: number;\n    /** Font atlases */\n    fontAtlases: Record<string, FontAtlas>;\n    /** The graphics context */\n    ggl: GfxCtx;\n    /** Default shader */\n    defShader: Shader;\n    /** Default texture */\n    defTex: Texture;\n    /** FrameBuffer */\n    frameBuffer: FrameBuffer;\n    /** Post Shader, used in postEffect() */\n    postShader: string | null;\n    postShaderUniform: Uniform | (() => Uniform) | null;\n    renderer: BatchRenderer;\n    pixelDensity: number;\n    transform: Mat23;\n    transformStack: Mat23[];\n    transformStackIndex: number;\n    /** The background texture */\n    bgTex: Texture;\n    bgColor: Color | null;\n    bgAlpha: number;\n    /**\n     * The\n     */\n    width: number;\n    height: number;\n    /**\n     * Where the game is rendered.\n     */\n    viewport: Viewport;\n    fixed: boolean;\n    gl: WebGLRenderingContext;\n    /**\n     * Scratch vec2\n     */\n    scratchPt: Vec2;\n};\n\n/**\n * @group Rendering\n * @subgroup Canvas\n */\nexport type Viewport = {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    scale: number;\n};\n\nexport const initAppGfx = (gfx: GfxCtx, gopt: MustKAPLAYOpt): AppGfxCtx => {\n    const defShader = makeShader(gfx, DEF_VERT, DEF_FRAG);\n    const pixelDensity = gopt.pixelDensity ?? 1;\n    const { gl } = gfx;\n\n    // a 1x1 white texture to draw raw shapes like rectangles and polygons\n    // we use a texture for those so we can use only 1 pipeline for drawing sprites + shapes\n    const emptyTex = Texture.fromImage(\n        gfx,\n        new ImageData(new Uint8ClampedArray([255, 255, 255, 255]), 1, 1),\n    );\n\n    const frameBuffer = (gopt.width && gopt.height)\n        ? new FrameBuffer(\n            gfx,\n            gopt.width * pixelDensity * gopt.scale,\n            gopt.height * pixelDensity * gopt.scale,\n        )\n        : new FrameBuffer(\n            gfx,\n            gl.drawingBufferWidth,\n            gl.drawingBufferHeight,\n        );\n\n    let bgColor: null | Color = null;\n    let bgAlpha = 1;\n\n    if (gopt.background) {\n        if (typeof gopt.background === \"string\") {\n            bgColor = rgb(gopt.background);\n        }\n        else {\n            bgColor = rgb(...gopt.background);\n            bgAlpha = gopt.background[3] ?? 1;\n        }\n\n        gl.clearColor(\n            bgColor.r / 255,\n            bgColor.g / 255,\n            bgColor.b / 255,\n            bgAlpha ?? 1,\n        );\n    }\n\n    gl.enable(gl.BLEND);\n    gl.blendFuncSeparate(\n        gl.ONE,\n        gl.ONE_MINUS_SRC_ALPHA,\n        gl.ONE,\n        gl.ONE_MINUS_SRC_ALPHA,\n    );\n\n    const renderer = new BatchRenderer(\n        gfx,\n        VERTEX_FORMAT,\n        MAX_BATCHED_VERTS,\n        MAX_BATCHED_INDICES,\n    );\n\n    // a checkerboard texture used for the default background\n    const bgTex = Texture.fromImage(\n        gfx,\n        new ImageData(\n            new Uint8ClampedArray([\n                128,\n                128,\n                128,\n                255,\n                190,\n                190,\n                190,\n                255,\n                190,\n                190,\n                190,\n                255,\n                128,\n                128,\n                128,\n                255,\n            ]),\n            2,\n            2,\n        ),\n        {\n            wrap: \"repeat\",\n            filter: \"nearest\",\n        },\n    );\n\n    const transformStack = new Array(32).fill(0).map(_ => new Mat23());\n\n    return {\n        // how many draw calls we're doing last frame, this is the number we give to users\n        lastDrawCalls: 0,\n        fontAtlases: {} as Record<string, FontAtlas>,\n\n        ggl: gfx,\n\n        // gfx states\n        defShader: defShader,\n        defTex: emptyTex,\n        frameBuffer: frameBuffer,\n        postShader: null as string | null,\n        postShaderUniform: null as Uniform | (() => Uniform) | null,\n        renderer: renderer,\n        pixelDensity: pixelDensity,\n\n        transform: new Mat23(),\n        transformStack: transformStack,\n        transformStackIndex: -1,\n\n        bgTex: bgTex,\n        bgColor: bgColor,\n        bgAlpha: bgAlpha,\n\n        width: gopt.width\n            ?? gl.drawingBufferWidth / pixelDensity / gopt.scale,\n        height: gopt.height\n            ?? gl.drawingBufferHeight / pixelDensity / gopt.scale,\n\n        viewport: {\n            x: 0,\n            y: 0,\n            width: gl.drawingBufferWidth,\n            height: gl.drawingBufferHeight,\n            scale: 1,\n        },\n\n        fixed: false,\n        gl,\n\n        scratchPt: new Vec2(0, 0),\n    };\n};\n", "import { DBG_FONT } from \"../../constants/general\";\nimport { rgb } from \"../../math/color\";\nimport { vec2 } from \"../../math/math\";\nimport { type Vec2 } from \"../../math/Vec2\";\nimport { formatText } from \"../formatText\";\nimport {\n    height,\n    multTranslateV,\n    popTransform,\n    pushTransform,\n    width,\n} from \"../stack\";\nimport { drawFormattedText } from \"./drawFormattedText\";\nimport { drawRect } from \"./drawRect\";\nimport { drawUnscaled } from \"./drawUnscaled\";\n\nexport function drawInspectText(pos: Vec2, txt: string) {\n    drawUnscaled(() => {\n        const pad = vec2(8);\n\n        pushTransform();\n        multTranslateV(pos);\n\n        const ftxt = formatText({\n            text: txt,\n            font: DBG_FONT,\n            size: 16,\n            pos: pad,\n            color: rgb(255, 255, 255),\n            fixed: true,\n        });\n\n        const bw = ftxt.width + pad.x * 2;\n        const bh = ftxt.height + pad.x * 2;\n\n        if (pos.x + bw >= width()) {\n            multTranslateV(vec2(-bw, 0));\n        }\n\n        if (pos.y + bh >= height()) {\n            multTranslateV(vec2(0, -bh));\n        }\n\n        drawRect({\n            width: bw,\n            height: bh,\n            color: rgb(0, 0, 0),\n            radius: 4,\n            opacity: 0.8,\n            fixed: true,\n        });\n\n        drawFormattedText(ftxt);\n        popTransform();\n    });\n}\n", "import { DBG_FONT, LOG_TIME } from \"../../constants/general\";\nimport { isPaused } from \"../../ecs/entity/utils\";\nimport { rgb } from \"../../math/color\";\nimport { vec2, wave } from \"../../math/math\";\nimport { _k } from \"../../shared\";\nimport { formatText } from \"../formatText\";\nimport {\n    height,\n    multTranslate,\n    popTransform,\n    pushTransform,\n    width,\n} from \"../stack\";\nimport { viewportToCanvas } from \"../viewport\";\nimport { drawCircle } from \"./drawCircle\";\nimport { drawFormattedText } from \"./drawFormattedText\";\nimport { drawInspectText } from \"./drawInspectText\";\nimport { drawRect } from \"./drawRect\";\nimport { drawTriangle } from \"./drawTriangle\";\nimport { drawUnscaled } from \"./drawUnscaled\";\n\nexport function drawDebug() {\n    if (_k.debug.inspect) {\n        let inspecting = null;\n\n        for (const obj of _k.game.root.get(\"*\", { recursive: true })) {\n            if (\n                obj.has(\"area\")\n                && (_k.globalOpt.inspectOnlyActive ? !isPaused(obj) : true)\n                && obj.isHovering()\n            ) {\n                inspecting = obj;\n                break;\n            }\n        }\n\n        pushTransform();\n        _k.game.root.drawInspect();\n        popTransform();\n\n        if (inspecting) {\n            const lines = [];\n            const data = inspecting.inspect();\n\n            for (const tag in data) {\n                if (data[tag]) {\n                    // pushes the inspect function (eg: `sprite: \"bean\"`)\n                    lines.push(data[tag]);\n                }\n                else {\n                    // pushes only the tag (name of the component)\n                    lines.push(tag);\n                }\n            }\n\n            lines.push(...inspecting.tags.map(t => `tag: ${t}`));\n\n            drawInspectText(\n                viewportToCanvas(_k.app.mousePos()),\n                lines.join(\"\\n\"),\n            );\n        }\n\n        drawInspectText(vec2(8), `FPS: ${_k.debug.fps()}`);\n    }\n\n    if (_k.debug.paused) {\n        drawUnscaled(() => {\n            // top right corner\n            pushTransform();\n            multTranslate(width(), 0);\n            multTranslate(-8, 8);\n\n            const size = 32;\n\n            // bg\n            drawRect({\n                width: size,\n                height: size,\n                anchor: \"topright\",\n                color: rgb(0, 0, 0),\n                opacity: 0.8,\n                radius: 4,\n                fixed: true,\n            });\n\n            // pause icon\n            for (let i = 1; i <= 2; i++) {\n                drawRect({\n                    width: 4,\n                    height: size * 0.6,\n                    anchor: \"center\",\n                    pos: vec2(-size / 3 * i, size * 0.5),\n                    color: rgb(255, 255, 255),\n                    radius: 2,\n                    fixed: true,\n                });\n            }\n\n            popTransform();\n        });\n    }\n\n    if (_k.debug.timeScale !== 1) {\n        drawUnscaled(() => {\n            // bottom right corner\n            pushTransform();\n            multTranslate(width(), height());\n            multTranslate(-8, -8);\n\n            const pad = 8;\n\n            // format text first to get text size\n            const ftxt = formatText({\n                text: _k.debug.timeScale.toFixed(1),\n                font: DBG_FONT,\n                size: 16,\n                color: rgb(255, 255, 255),\n                pos: vec2(-pad),\n                anchor: \"botright\",\n                fixed: true,\n            });\n\n            // bg\n            drawRect({\n                width: ftxt.width + pad * 2 + pad * 4,\n                height: ftxt.height + pad * 2,\n                anchor: \"botright\",\n                color: rgb(0, 0, 0),\n                opacity: 0.8,\n                radius: 4,\n                fixed: true,\n            });\n\n            // fast forward / slow down icon\n            for (let i = 0; i < 2; i++) {\n                const flipped = _k.debug.timeScale < 1;\n                drawTriangle({\n                    p1: vec2(-ftxt.width - pad * (flipped ? 2 : 3.5), -pad),\n                    p2: vec2(\n                        -ftxt.width - pad * (flipped ? 2 : 3.5),\n                        -pad - ftxt.height,\n                    ),\n                    p3: vec2(\n                        -ftxt.width - pad * (flipped ? 3.5 : 2),\n                        -pad - ftxt.height / 2,\n                    ),\n                    pos: vec2(-i * pad * 1 + (flipped ? -pad * 0.5 : 0), 0),\n                    color: rgb(255, 255, 255),\n                    fixed: true,\n                });\n            }\n\n            // text\n            drawFormattedText(ftxt);\n\n            popTransform();\n        });\n    }\n\n    if (_k.debug.curRecording !== null) {\n        drawUnscaled(() => {\n            pushTransform();\n            multTranslate(width() - 24, 24);\n\n            drawCircle({\n                radius: 12,\n                color: rgb(255, 0, 0),\n                opacity: wave(0, 1, _k.app.time() * 4),\n                fixed: true,\n            });\n\n            popTransform();\n        });\n    }\n\n    if (_k.debug.showLog && _k.game.logs.length > 0) {\n        drawUnscaled(() => {\n            pushTransform();\n            multTranslate(0, height());\n            multTranslate(8, -8);\n\n            const pad = 8;\n            const logs = [];\n\n            for (const log of _k.game.logs) {\n                let str = \"\";\n                const style = log.msg instanceof Error ? \"error\" : \"info\";\n                str += `[time]${log.time.toFixed(2)}[/time]`;\n                str += \" \";\n                str += `[${style}]${prettyDebug(log.msg)}[/${style}]`;\n                logs.push(str);\n            }\n\n            _k.game.logs = _k.game.logs\n                .filter((log) =>\n                    _k.app.time() - log.time\n                        < (_k.globalOpt.logTime || LOG_TIME)\n                );\n\n            const ftext = formatText({\n                text: logs.join(\"\\n\"),\n                font: DBG_FONT,\n                pos: vec2(pad, -pad),\n                anchor: \"botleft\",\n                size: 16,\n                width: width() * 0.6,\n                lineSpacing: pad / 2,\n                fixed: true,\n                styles: {\n                    \"time\": { color: rgb(127, 127, 127) },\n                    \"info\": { color: rgb(255, 255, 255) },\n                    \"error\": { color: rgb(255, 0, 127) },\n                },\n            });\n\n            drawRect({\n                width: ftext.width + pad * 2,\n                height: ftext.height + pad * 2,\n                anchor: \"botleft\",\n                color: rgb(0, 0, 0),\n                radius: 4,\n                opacity: 0.8,\n                fixed: true,\n            });\n\n            drawFormattedText(ftext);\n            popTransform();\n        });\n    }\n}\n\nfunction prettyDebug(\n    object: any | undefined,\n    inside: boolean = false,\n    seen: Set<any> = new Set(),\n): string {\n    if (seen.has(object)) return \"<recursive>\";\n    var outStr = \"\", tmp;\n    if (inside && typeof object === \"string\") {\n        object = JSON.stringify(object);\n    }\n    if (Array.isArray(object)) {\n        outStr = [\n            \"[\",\n            object.map(e => prettyDebug(e, true, seen.union(new Set([object]))))\n                .join(\", \"),\n            \"]\",\n        ].join(\"\");\n        object = outStr;\n    }\n    if (object === null) return \"null\";\n    if (\n        typeof object === \"object\"\n        && object.toString === Object.prototype.toString\n    ) {\n        if (object.constructor !== Object) {\n            outStr += object.constructor.name + \" \";\n        }\n        outStr += [\n            \"{\",\n            (tmp = Object.getOwnPropertyNames(object)\n                    .map(p =>\n                        `${/^\\w+$/.test(p) ? p : JSON.stringify(p)}: ${\n                            prettyDebug(\n                                object[p],\n                                true,\n                                seen.union(new Set([object])),\n                            )\n                        }`\n                    )\n                    .join(\", \"))\n                ? ` ${tmp} `\n                : \"\",\n            \"}\",\n        ].join(\"\");\n        object = outStr;\n    }\n    return String(object).replaceAll(/(?<!\\\\)\\[/g, \"\\\\[\");\n}\n", "import { lerp } from \"../../math/lerp\";\nimport { rand } from \"../../math/math\";\nimport { Vec2 } from \"../../math/Vec2\";\nimport { _k } from \"../../shared\";\nimport { center, flush } from \"../stack\";\n\nexport function transformFrame() {\n    _k.game.root.transformTree();\n}\n\nexport function drawFrame() {\n    // calculate camera matrix\n    const cam = _k.game.cam;\n    const shake = Vec2.fromAngle(rand(0, 360)).scale(cam.shake);\n\n    cam.shake = lerp(cam.shake, 0, 5 * _k.app.dt());\n    cam.transform.setIdentity()\n        .translateSelfV(center())\n        .scaleSelfV(cam.scale)\n        .rotateSelf(cam.angle)\n        .translateSelfV((cam.pos ?? center()).scale(-1).add(shake));\n\n    _k.game.root.draw();\n    flush();\n}\n", "import { loadProgress } from \"../../assets/asset\";\nimport { rgb } from \"../../math/color\";\nimport { vec2 } from \"../../math/math\";\nimport { _k } from \"../../shared\";\nimport { height, width } from \"../stack\";\nimport { drawRect } from \"./drawRect\";\nimport { drawUnscaled } from \"./drawUnscaled\";\n\nexport function drawLoadScreen() {\n    const progress = loadProgress();\n\n    if (_k.game.events.numListeners(\"loading\") > 0) {\n        _k.game.events.trigger(\"loading\", progress);\n    }\n    else {\n        drawUnscaled(() => {\n            const w = width() / 2;\n            const h = 24;\n            const pos = vec2(width() / 2, height() / 2).sub(\n                vec2(w / 2, h / 2),\n            );\n            drawRect({\n                pos: vec2(0),\n                width: width(),\n                height: height(),\n                color: rgb(0, 0, 0),\n            });\n            drawRect({\n                pos: pos,\n                width: w,\n                height: h,\n                fill: false,\n                outline: {\n                    width: 4,\n                },\n            });\n            drawRect({\n                pos: pos,\n                width: w * progress,\n                height: h,\n            });\n        });\n    }\n}\n", "import type { App } from \"../app/app\";\nimport { initAppEvents } from \"../app/appEvents\";\nimport {\n    getFailedAssets,\n    type InternalAssetsCtx,\n    loadProgress,\n} from \"../assets/asset\";\nimport type { Debug } from \"../debug/debug\";\nimport { SystemPhase } from \"../ecs/systems/systems\";\nimport type { Game } from \"../game/game\";\nimport { drawDebug } from \"../gfx/draw/drawDebug\";\nimport { drawFrame, transformFrame } from \"../gfx/draw/drawFrame\";\nimport { drawLoadScreen } from \"../gfx/draw/drawLoadingScreen\";\nimport { updateViewport } from \"../gfx/viewport\";\nimport type { KAPLAYOpt } from \"../types\";\nimport { handleErr } from \"./errors\";\nimport type { FrameRenderer } from \"./frameRendering\";\n\nexport function startEngineLoop(\n    app: App,\n    game: Game,\n    assets: InternalAssetsCtx,\n    gopt: KAPLAYOpt,\n    frameRenderer: FrameRenderer,\n    debug: Debug,\n) {\n    let isFirstFrame = true;\n\n    app.run(() => {\n        try {\n            if (assets.loaded) {\n                if (!debug.paused) {\n                    for (\n                        const sys of game\n                            .systemsByEvent[SystemPhase.BeforeFixedUpdate]\n                    ) {\n                        sys.run();\n                    }\n\n                    frameRenderer.fixedUpdateFrame();\n\n                    for (\n                        const sys of game\n                            .systemsByEvent[SystemPhase.AfterFixedUpdate]\n                    ) {\n                        sys.run();\n                    }\n                }\n\n                // checkFrame();\n            }\n        } catch (e) {\n            handleErr(e as Error);\n        }\n    }, (processInput, resetInput) => {\n        try {\n            processInput();\n\n            if (!assets.loaded) {\n                if (loadProgress() === 1 && !isFirstFrame) {\n                    assets.loaded = true;\n                    getFailedAssets().forEach(details =>\n                        game.events.trigger(\"loadError\", ...details)\n                    );\n                    game.events.trigger(\"load\");\n                }\n            }\n\n            if (\n                !assets.loaded && gopt.loadingScreen !== false\n                || isFirstFrame\n            ) {\n                frameRenderer.frameStart();\n                // TODO: Currently if assets are not initially loaded no updates or timers will be run, however they will run if loadingScreen is set to false. What's the desired behavior or should we make them consistent?\n                drawLoadScreen();\n                frameRenderer.frameEnd();\n            }\n            else {\n                if (!debug.paused) {\n                    for (\n                        const sys of game\n                            .systemsByEvent[SystemPhase.BeforeUpdate]\n                    ) {\n                        sys.run();\n                    }\n\n                    frameRenderer.updateFrame();\n\n                    for (\n                        const sys of game\n                            .systemsByEvent[SystemPhase.AfterUpdate]\n                    ) {\n                        sys.run();\n                    }\n                }\n\n                // checkFrame();\n                frameRenderer.frameStart();\n\n                transformFrame();\n\n                for (\n                    const sys of game.systemsByEvent[SystemPhase.BeforeDraw]\n                ) {\n                    sys.run();\n                }\n\n                drawFrame();\n                if (gopt.debug !== false) drawDebug();\n\n                for (const sys of game.systemsByEvent[SystemPhase.AfterDraw]) {\n                    sys.run();\n                }\n\n                frameRenderer.frameEnd();\n            }\n\n            if (isFirstFrame) {\n                isFirstFrame = false;\n            }\n\n            game.events.trigger(\"frameEnd\");\n\n            resetInput();\n        } catch (e) {\n            handleErr(e as Error);\n        }\n    });\n\n    updateViewport();\n    initAppEvents();\n}\n", "import { MAX_TEXT_CACHE_SIZE } from \"../constants/general\";\n\nexport const createFontCache = () => {\n    const fontCacheCanvas = document.createElement(\"canvas\");\n    fontCacheCanvas.width = MAX_TEXT_CACHE_SIZE;\n    fontCacheCanvas.height = MAX_TEXT_CACHE_SIZE;\n    const fontCacheC2d = fontCacheCanvas.getContext(\"2d\", {\n        willReadFrequently: true,\n    });\n\n    return {\n        fontCacheCanvas,\n        fontCacheC2d,\n    };\n};\n", "import { BG_GRID_SIZE } from \"../constants/general\";\nimport type { Game } from \"../game/game\";\nimport { drawTexture } from \"../gfx/draw/drawTexture\";\nimport { drawUnscaled } from \"../gfx/draw/drawUnscaled\";\nimport { drawUVQuad } from \"../gfx/draw/drawUVQuad\";\nimport type { AppGfxCtx } from \"../gfx/gfxApp\";\nimport { flush, height, width } from \"../gfx/stack\";\nimport { Quad } from \"../math/math\";\nimport { Vec2 } from \"../math/Vec2\";\n\n/**\n * A frame renderer.\n *\n * @ignore\n */\nexport interface FrameRenderer {\n    frameStart: () => void;\n    frameEnd: () => void;\n    fixedUpdateFrame: () => void;\n    updateFrame: () => void;\n}\n\n/**\n * @ignore\n */\nexport const createFrameRenderer = (\n    gfx: AppGfxCtx,\n    game: Game,\n    pixelDensity: number,\n) => {\n    // start a rendering frame, reset some states\n    function frameStart() {\n        // clear backbuffer\n        gfx.gl.clear(gfx.gl.COLOR_BUFFER_BIT);\n        gfx.frameBuffer.bind();\n        // clear framebuffer\n        gfx.gl.clear(gfx.gl.COLOR_BUFFER_BIT);\n\n        // Iconic background\n        if (!gfx.bgColor) {\n            drawUnscaled(() => {\n                drawUVQuad({\n                    width: width(),\n                    height: height(),\n                    quad: new Quad(\n                        0,\n                        0,\n                        width() / BG_GRID_SIZE,\n                        height() / BG_GRID_SIZE,\n                    ),\n                    tex: gfx.bgTex,\n                    fixed: true,\n                });\n            });\n        }\n\n        gfx.renderer.numDraws = 0;\n        gfx.fixed = false;\n        gfx.transformStackIndex = -1;\n        gfx.transform.setIdentity();\n    }\n\n    function frameEnd() {\n        // TODO: don't render debug UI with framebuffer\n        // TODO: polish framebuffer rendering / sizing issues\n        flush();\n        gfx.lastDrawCalls = gfx.renderer.numDraws;\n        gfx.frameBuffer.unbind();\n        gfx.gl.viewport(\n            0,\n            0,\n            gfx.gl.drawingBufferWidth,\n            gfx.gl.drawingBufferHeight,\n        );\n\n        const ow = gfx.width;\n        const oh = gfx.height;\n        gfx.width = gfx.gl.drawingBufferWidth / pixelDensity;\n        gfx.height = gfx.gl.drawingBufferHeight / pixelDensity;\n\n        drawTexture({\n            flipY: true,\n            tex: gfx.frameBuffer.tex,\n            pos: new Vec2(gfx.viewport.x, gfx.viewport.y),\n            width: gfx.viewport.width,\n            height: gfx.viewport.height,\n            shader: gfx.postShader,\n            uniform: typeof gfx.postShaderUniform === \"function\"\n                ? gfx.postShaderUniform()\n                : gfx.postShaderUniform,\n            fixed: true,\n        });\n\n        flush();\n        gfx.width = ow;\n        gfx.height = oh;\n    }\n\n    function fixedUpdateFrame() {\n        // update every obj\n        game.root.fixedUpdate();\n    }\n\n    function updateFrame() {\n        game.root.update();\n    }\n\n    return { frameStart, frameEnd, fixedUpdateFrame, updateFrame };\n};\n", "// The engine is what KAPLAY needs for running and proccesing all it's stuff\n\nimport { initApp } from \"../app/app\";\nimport { initAssets } from \"../assets/asset\";\nimport { initAudio } from \"../audio/audio\";\nimport { createDebug } from \"../debug/debug\";\nimport { blendFactory } from \"../ecs/components/draw/blend\";\nimport { circleFactory } from \"../ecs/components/draw/circle\";\nimport { colorFactory } from \"../ecs/components/draw/color\";\nimport { ellipseFactory } from \"../ecs/components/draw/ellipse\";\nimport { maskFactory } from \"../ecs/components/draw/mask\";\nimport { opacityFactory } from \"../ecs/components/draw/opacity\";\nimport { outlineFactory } from \"../ecs/components/draw/outline\";\nimport { rectFactory } from \"../ecs/components/draw/rect\";\nimport { spriteFactory } from \"../ecs/components/draw/sprite\";\nimport { textFactory } from \"../ecs/components/draw/text\";\nimport { anchorFactory } from \"../ecs/components/transform/anchor\";\nimport { fixedFactory } from \"../ecs/components/transform/fixed\";\nimport { moveFactory } from \"../ecs/components/transform/move\";\nimport { posFactory } from \"../ecs/components/transform/pos\";\nimport { rotateFactory } from \"../ecs/components/transform/rotate\";\nimport { scaleFactory } from \"../ecs/components/transform/scale\";\nimport { zFactory } from \"../ecs/components/transform/z\";\nimport { registerPrefabFactory } from \"../ecs/entity/prefab\";\nimport { createGame } from \"../game/game\";\nimport { createCanvas } from \"../gfx/canvas\";\nimport { initGfx } from \"../gfx/gfx\";\nimport { initAppGfx } from \"../gfx/gfxApp\";\nimport type { KAPLAYOpt } from \"../types\";\nimport type { KAPLAYCtx } from \"./contextType\";\nimport { startEngineLoop } from \"./engineLoop\";\nimport { createFontCache } from \"./fontCache\";\nimport { createFrameRenderer } from \"./frameRendering\";\n\nexport type Engine = ReturnType<typeof createEngine>;\n\n// Create global variables\nwindow.kaplayjs_assetsAliases = {};\n\n/**\n * Creates all necessary contexts and variables for running a KAPLAY instance.\n *\n * @ignore\n *\n * @param gopt - Global options for create the engine.\n *\n * @returns Engine.\n */\nexport const createEngine = (gopt: KAPLAYOpt) => {\n    // Default options\n    const opt = Object.assign(\n        {\n            scale: 1,\n            spriteAtlasPadding: 2,\n        } satisfies KAPLAYOpt,\n        gopt,\n    );\n\n    const canvas = createCanvas(opt);\n    const { fontCacheC2d, fontCacheCanvas } = createFontCache();\n    const app = initApp({ canvas, ...gopt });\n\n    // TODO: Probably we should move this to initGfx\n    const canvasContext = app.canvas\n        .getContext(\"webgl\", {\n            antialias: true,\n            depth: true,\n            stencil: true,\n            alpha: true,\n            preserveDrawingBuffer: true,\n        });\n\n    if (!canvasContext) throw new Error(\"WebGL not supported\");\n\n    const gl = canvasContext;\n\n    // TODO: Investigate correctly what's the differente between GFX and AppGFX and reduce to 1 method\n    const gfx = initGfx(gl, opt);\n    const appGfx = initAppGfx(gfx, opt);\n    const assets = initAssets(gfx, opt);\n    const audio = initAudio();\n    const game = createGame();\n\n    // Frame rendering\n    const frameRenderer = createFrameRenderer(\n        appGfx,\n        game,\n        opt.pixelDensity ?? 1,\n    );\n\n    // Debug mode\n    const debug = createDebug(opt, app, appGfx, audio, game, frameRenderer);\n\n    // Register default factories\n\n    // Transform Serialization\n    registerPrefabFactory(\"anchor\", anchorFactory);\n    registerPrefabFactory(\"fixed\", fixedFactory);\n    // `follow()` missing, we should figure a way to serialize an object reference (probably use named())\n    // `layer()` missing, needs investigation\n    registerPrefabFactory(\"move\", moveFactory);\n    // `offscreen()` missing\n    registerPrefabFactory(\"pos\", posFactory);\n    registerPrefabFactory(\"rotate\", rotateFactory);\n    registerPrefabFactory(\"scale\", scaleFactory);\n    registerPrefabFactory(\"z\", zFactory);\n\n    // Draw Serialization\n    registerPrefabFactory(\"blend\", blendFactory);\n    registerPrefabFactory(\"circle\", circleFactory);\n    registerPrefabFactory(\"color\", colorFactory);\n    // `drawon()` missing\n    registerPrefabFactory(\"ellipse\", ellipseFactory);\n    // `fadeIn()` missing\n    registerPrefabFactory(\"mask\", maskFactory);\n    registerPrefabFactory(\"opacity\", opacityFactory);\n    registerPrefabFactory(\"outline\", outlineFactory);\n    // `particles()` missing\n    // `picture()` missing\n    // `raycast()` missing, anyway, is not a component\n    registerPrefabFactory(\"rect\", rectFactory);\n    registerPrefabFactory(\"sprite\", spriteFactory);\n    registerPrefabFactory(\"text\", textFactory);\n    // `uvquad()` missing\n    // `video()` missing\n\n    return {\n        globalOpt: opt,\n        canvas,\n        app,\n        ggl: gfx,\n        gfx: appGfx,\n        audio,\n        assets,\n        frameRenderer,\n        fontCacheC2d,\n        fontCacheCanvas,\n        game,\n        debug,\n        gc: [] as (() => void)[],\n        // Patch, k it's only avaible after running kaplay()\n        k: null as unknown as KAPLAYCtx,\n        startLoop() {\n            startEngineLoop(\n                app,\n                game,\n                assets,\n                opt,\n                frameRenderer,\n                debug,\n            );\n        },\n    };\n};\n", "import type { Shape } from \"../types\";\nimport { Rect, vec2 } from \"./math\";\nimport { Vec2 } from \"./Vec2\";\n\nfunction minkowskiRectDifference(r1: Rect, r2: Rect): Rect {\n    return new Rect(\n        vec2(\n            r1.pos.x - (r2.pos.x + r2.width),\n            r1.pos.y - (r2.pos.y + r2.height),\n        ),\n        r1.width + r2.width,\n        r1.height + r2.height,\n    );\n}\n\nexport function minkowskiRectShapeIntersection(shape1: Shape, shape2: Shape) {\n    const s1 = shape1 instanceof Rect\n        ? shape1\n        : shape1.bbox();\n    const s2 = shape2 instanceof Rect\n        ? shape2\n        : shape2.bbox();\n    const res = minkowskiRectDifference(s1, s2);\n\n    if (!res.contains(new Vec2())) {\n        return null;\n    }\n\n    const distance = Math.min(\n        Math.abs(res.pos.x),\n        Math.abs(res.pos.x + res.width),\n        Math.abs(res.pos.y),\n        Math.abs(res.pos.y + res.height),\n    );\n\n    let normal = vec2();\n\n    switch (distance) {\n        case Math.abs(res.pos.x):\n            normal = vec2(1, 0);\n            break;\n        case Math.abs(res.pos.x + res.width):\n            normal = vec2(-1, 0);\n            break;\n        case Math.abs(res.pos.y):\n            normal = vec2(0, 1);\n            break;\n        case Math.abs(res.pos.y + res.height):\n            normal = vec2(0, -1);\n            break;\n    }\n\n    return {\n        normal,\n        distance,\n    };\n}\n", "import type { Shape } from \"../types\";\nimport { Polygon, vec2 } from \"./math\";\nimport { Vec2 } from \"./Vec2\";\n\nexport type SatResult = {\n    normal: Vec2;\n    distance: number;\n};\n\nexport function satShapeIntersection(shape1: Shape, shape2: Shape) {\n    const s1 = shape1 instanceof Polygon\n        ? shape1\n        : new Polygon(shape1.bbox().points());\n    const s2 = shape2 instanceof Polygon\n        ? shape2\n        : new Polygon(shape2.bbox().points());\n    return sat(s1, s2);\n}\n\nexport function sat(p1: Polygon, p2: Polygon): SatResult | null {\n    let overlap = Number.MAX_VALUE;\n    let result: SatResult | null = null;\n    for (const poly of [p1, p2]) {\n        for (let i = 0; i < poly.pts.length; i++) {\n            const a = poly.pts[i];\n            const b = poly.pts[(i + 1) % poly.pts.length];\n            const axisProj = b.sub(a).normal().unit();\n            let min1 = Number.MAX_VALUE;\n            let max1 = -Number.MAX_VALUE;\n            for (let j = 0; j < p1.pts.length; j++) {\n                const q = p1.pts[j].dot(axisProj);\n                min1 = Math.min(min1, q);\n                max1 = Math.max(max1, q);\n            }\n            let min2 = Number.MAX_VALUE;\n            let max2 = -Number.MAX_VALUE;\n            for (let j = 0; j < p2.pts.length; j++) {\n                const q = p2.pts[j].dot(axisProj);\n                min2 = Math.min(min2, q);\n                max2 = Math.max(max2, q);\n            }\n            const o = Math.min(max1, max2) - Math.max(min1, min2);\n            if (o < 0) { // This should be <= 0 !!!!\n                return null;\n            }\n            if (o < Math.abs(overlap)) {\n                const o1 = max2 - min1;\n                const o2 = min2 - max1;\n                overlap = Math.abs(o1) < Math.abs(o2) ? o1 : o2;\n                if (!result) {\n                    result = {\n                        normal: overlap !== 0\n                            ? axisProj.scale(Math.sign(overlap))\n                            : axisProj.scale(Math.sign(min1 - max2)),\n                        distance: Math.abs(overlap),\n                    };\n                }\n                else {\n                    const s = overlap !== 0\n                        ? Math.sign(overlap)\n                        : Math.sign(min1 - max2);\n                    result.normal.x = s * axisProj.x;\n                    result.normal.y = s * axisProj.y;\n                    result.distance = Math.abs(overlap);\n                }\n            }\n        }\n    }\n    return result;\n}\n", "import type { AreaComp } from \"../../ecs/components/physics/area\";\nimport { isPaused } from \"../../ecs/entity/utils\";\nimport type { GameObj } from \"../../types\";\nimport { calcTransform } from \"../various\";\n\n/**\n * Left or right edge of an object's bbox\n */\nclass SapEdge {\n    obj: GameObj<AreaComp>;\n    x: number;\n    isLeft: boolean;\n\n    constructor(obj: GameObj<AreaComp>, isLeft: boolean) {\n        this.obj = obj;\n        this.x = 0;\n        this.isLeft = isLeft;\n    }\n}\n\n/**\n * One dimensional sweep and prune\n *\n * @ignore\n */\nexport class SweepAndPrune {\n    edges: Array<SapEdge>;\n    objects: Map<GameObj<AreaComp>, [SapEdge, SapEdge]>;\n\n    constructor() {\n        this.edges = [];\n        this.objects = new Map<GameObj<AreaComp>, [SapEdge, SapEdge]>();\n    }\n\n    /**\n     * Add the object and its edges to the list\n     * @param obj - The object to add\n     */\n    add(obj: GameObj<AreaComp>) {\n        const left = new SapEdge(obj, true);\n        const right = new SapEdge(obj, false);\n        this.edges.push(left);\n        this.edges.push(right);\n        this.objects.set(obj, [left, right]);\n    }\n\n    /**\n     * Remove the object and its edges from the list\n     * @param obj - The object to remove\n     */\n    remove(obj: GameObj<AreaComp>) {\n        const pair = this.objects.get(obj);\n        if (pair) {\n            this.edges.splice(this.edges.indexOf(pair[0]), 1);\n            this.edges.splice(this.edges.indexOf(pair[1]), 1);\n            this.objects.delete(obj);\n        }\n    }\n\n    clear() {\n        this.edges = [];\n        this.objects.clear();\n    }\n\n    /**\n     * Update edges and sort\n     */\n    update() {\n        // Update edge data\n        for (const [obj, edges] of this.objects.entries()) {\n            if (shouldIgnore(obj)) continue;\n            calcTransform(obj, obj.transform);\n            const bbox = obj.worldArea().bbox();\n            edges[0].x = bbox.pos.x;\n            edges[1].x = bbox.pos.x + bbox.width;\n        }\n        // Insertion sort is ~O(n) for nearly-sorted lists - which this will be\n        // on all but the first iteration. The builtin Array.sort() can't make\n        // this guarantee of speed -- JS engines typically use various other sorting\n        // algorithms (introsort, mergesort, selection sort, treesort, etc.) that don't\n        // have this nice property.\n        //\n        // There's an insertionSort() function elsewhere, but inlining it here\n        // offers some speed benefits especially with dumber JS optimizers that\n        // won't or can't automatically inline \"hot\" functions.\n        for (let i = 1; i < this.edges.length; i++) {\n            for (let j = i - 1; j >= 0; j--) {\n                if (this.edges[j].x < this.edges[j + 1].x) break;\n                const temp = this.edges[j];\n                this.edges[j] = this.edges[j + 1];\n                this.edges[j + 1] = temp;\n            }\n        }\n    }\n\n    /**\n     * Iterates all object pairs which potentially collide\n     */\n    *[Symbol.iterator]() {\n        const touching = new Set<GameObj<AreaComp>>();\n\n        for (const edge of this.edges) {\n            if (edge.isLeft) {\n                if (!shouldIgnore(edge.obj)) {\n                    for (const obj of touching) {\n                        if (!shouldIgnore(obj)) {\n                            yield [obj, edge.obj];\n                        }\n                    }\n                }\n                touching.add(edge.obj);\n            }\n            else {\n                touching.delete(edge.obj);\n            }\n        }\n    }\n}\n\nfunction shouldIgnore(obj: GameObj) {\n    return !obj.exists() || isPaused(obj);\n}\n", "import { onAdd, onDestroy, onUnuse, onUse } from \"../../events/globalEvents\";\nimport { onSceneLeave } from \"../../game/scenes\";\nimport { gjkShapeIntersection } from \"../../math/gjk\";\nimport { minkowskiRectShapeIntersection } from \"../../math/minkowski\";\nimport { satShapeIntersection } from \"../../math/sat\";\nimport { SweepAndPrune } from \"../../math/spatial/sweepandprune\";\nimport { _k } from \"../../shared\";\nimport type { GameObj } from \"../../types\";\nimport { type AreaComp, usesArea } from \"../components/physics/area\";\nimport { Collision } from \"./Collision\";\n\nexport const createCollisionSystem = ({ narrow = \"gjk\" } = {}) => {\n    const narrowPhaseIntersection = narrow === \"gjk\"\n        ? gjkShapeIntersection\n        : narrow === \"sat\"\n        ? satShapeIntersection\n        : narrow === \"box\"\n        ? minkowskiRectShapeIntersection\n        : gjkShapeIntersection;\n\n    function narrowPhase(\n        obj: GameObj<AreaComp>,\n        other: GameObj<AreaComp>,\n    ): boolean {\n        for (const tag of obj.collisionIgnore) {\n            if (other.is(tag)) {\n                return false;\n            }\n        }\n        for (const tag of other.collisionIgnore) {\n            if (obj.is(tag)) {\n                return false;\n            }\n        }\n        const res = narrowPhaseIntersection(obj.worldArea(), other.worldArea());\n        if (res) {\n            const col1 = new Collision(\n                obj,\n                other,\n                res.normal,\n                res.distance,\n            );\n            obj.trigger(\"collideUpdate\", other, col1);\n            const col2 = col1.reverse();\n            // resolution only has to happen once\n            col2.resolved = col1.resolved;\n            other.trigger(\"collideUpdate\", obj, col2);\n        }\n        return true;\n    }\n\n    const sap = new SweepAndPrune();\n    let sapInit = false;\n\n    function broadPhase() {\n        if (!usesArea()) {\n            return;\n        }\n\n        if (!sapInit) {\n            sapInit = true;\n            onAdd(obj => {\n                if (obj.has(\"area\")) {\n                    sap.add(obj as GameObj<AreaComp>);\n                }\n            });\n            onDestroy(obj => {\n                sap.remove(obj as GameObj<AreaComp>);\n            });\n            onUse((obj, id) => {\n                if (id === \"area\") {\n                    sap.add(obj as GameObj<AreaComp>);\n                }\n            });\n            onUnuse((obj, id) => {\n                if (id === \"area\") {\n                    sap.remove(obj as GameObj<AreaComp>);\n                }\n            });\n            onSceneLeave(scene => {\n                sapInit = false;\n                sap.clear();\n            });\n\n            for (const obj of _k.game.root.get(\"*\", { recursive: true })) {\n                if (obj.has(\"area\")) {\n                    sap.add(obj as GameObj<AreaComp>);\n                }\n            }\n        }\n\n        sap.update();\n        for (const [obj1, obj2] of sap) {\n            narrowPhase(obj1, obj2);\n        }\n    }\n\n    function checkFrame() {\n        if (!usesArea()) {\n            return;\n        }\n\n        return broadPhase();\n\n        /*// TODO: persistent grid?\n        // start a spatial hash grid for more efficient collision detection\n        const grid: Record<number, Record<number, GameObj<AreaComp>[]>> = {};\n        const cellSize = gopt.hashGridSize || DEF_HASH_GRID_SIZE;\n\n        // current transform\n        let tr = new Mat23();\n\n        // a local transform stack\n        const stack: any[] = [];\n\n        function checkObj(obj: GameObj) {\n            stack.push(tr.clone());\n\n            // Update object transform here. This will be the transform later used in rendering.\n            if (obj.pos) tr.translate(obj.pos);\n            if (obj.scale) tr.scale(obj.scale);\n            if (obj.angle) tr.rotate(obj.angle);\n            obj.transform = tr.clone();\n\n            if (obj.c(\"area\") && !obj.paused) {\n                // TODO: only update worldArea if transform changed\n                const aobj = obj as GameObj<AreaComp>;\n                const area = aobj.worldArea();\n                const bbox = area.bbox();\n\n                // Get spatial hash grid coverage\n                const xmin = Math.floor(bbox.pos.x / cellSize);\n                const ymin = Math.floor(bbox.pos.y / cellSize);\n                const xmax = Math.ceil((bbox.pos.x + bbox.width) / cellSize);\n                const ymax = Math.ceil((bbox.pos.y + bbox.height) / cellSize);\n\n                // Cache objs that are already checked\n                const checked = new Set();\n\n                // insert & check against all covered grids\n                for (let x = xmin; x <= xmax; x++) {\n                    for (let y = ymin; y <= ymax; y++) {\n                        if (!grid[x]) {\n                            grid[x] = {};\n                            grid[x][y] = [aobj];\n                        }\n                        else if (!grid[x][y]) {\n                            grid[x][y] = [aobj];\n                        }\n                        else {\n                            const cell = grid[x][y];\n                            check: for (const other of cell) {\n                                if (other.paused) continue;\n                                if (!other.exists()) continue;\n                                if (checked.has(other.id)) continue;\n                                for (const tag of aobj.collisionIgnore) {\n                                    if (other.is(tag)) {\n                                        continue check;\n                                    }\n                                }\n                                for (const tag of other.collisionIgnore) {\n                                    if (aobj.is(tag)) {\n                                        continue check;\n                                    }\n                                }\n                                const res = gjkShapeIntersection( // sat(\n                                    aobj.worldArea(),\n                                    other.worldArea(),\n                                );\n                                if (res) {\n                                    // TODO: rehash if the object position is changed after resolution?\n                                    const col1 = new Collision(\n                                        aobj,\n                                        other,\n                                        res.normal,\n                                        res.distance,\n                                    );\n                                    aobj.trigger(\"collideUpdate\", other, col1);\n                                    const col2 = col1.reverse();\n                                    // resolution only has to happen once\n                                    col2.resolved = col1.resolved;\n                                    other.trigger(\"collideUpdate\", aobj, col2);\n                                }\n                                checked.add(other.id);\n                            }\n                            cell.push(aobj);\n                        }\n                    }\n                }\n            }\n\n            obj.children.forEach(checkObj);\n            tr = stack.pop();\n        }\n\n        checkObj(game.root);*/\n    }\n\n    return {\n        checkFrame,\n    };\n};\n", "// The definitive version!\nimport { SoundData } from \"./assets/sound\";\nimport { loadSprite } from \"./assets/sprite\";\nimport { createEmptyAudioBuffer } from \"./audio/audio\";\nimport { createContext } from \"./core/context\";\nimport type { KAPLAYCtx } from \"./core/contextType\";\nimport { createEngine } from \"./core/engine\";\nimport type {\n    KAPLAYCtxT,\n    KAPLAYOptTypeOptions,\n    KAPLAYTypeOptWithoutPlugins,\n    TypesOpt,\n} from \"./core/taf\";\nimport beanSrc from \"./data/assets/bean.png\";\nimport boomSpriteSrc from \"./data/assets/boom.png\";\nimport burpSoundSrc from \"./data/assets/burp.mp3\";\nimport happyFontSrc from \"./data/assets/happy.png\";\nimport kaSpriteSrc from \"./data/assets/ka.png\";\nimport { createCollisionSystem } from \"./ecs/systems/createCollisionSystem\";\nimport { system, SystemPhase } from \"./ecs/systems/systems\";\nimport { _k, updateEngine } from \"./shared\";\nimport {\n    type KAPLAYOpt,\n    type KAPLAYPlugin,\n    type MergePlugins,\n    type PluginList,\n} from \"./types\";\n\n// If KAPLAY was runned before\nlet runned = false;\n\ntype HasDefinedKeys<TObj, TCheck> = {\n    [K in keyof TCheck & keyof TObj]: TObj[K] extends undefined ? never : K;\n}[keyof TCheck & keyof TObj] extends never ? never : TObj;\n\ntype ChooseKAPLAYCtx<O extends KAPLAYOptTypeOptions> =\n    HasDefinedKeys<O, KAPLAYTypeOptWithoutPlugins> extends never ? KAPLAYCtx\n        : KAPLAYCtxT<O>;\n\ntype KAPLAYGame<O extends KAPLAYOptTypeOptions | undefined> = O extends\n    KAPLAYOptTypeOptions ? O[\"plugins\"] extends PluginList<any> ?\n            & ChooseKAPLAYCtx<O>\n            & MergePlugins<O[\"plugins\"]>\n    : ChooseKAPLAYCtx<O>\n    : KAPLAYCtx;\n\n/**\n * Initialize KAPLAY context. The starting point of all KAPLAY games.\n *\n * @example\n * ```js\n * // Start KAPLAY with default options (will create a fullscreen canvas under <body>)\n * kaplay()\n *\n * // Init with some options\n * kaplay({\n *     width: 320,\n *     height: 240,\n *     font: \"sans-serif\",\n *     canvas: document.querySelector(\"#mycanvas\"),\n *     background: [ 0, 0, 255, ],\n * })\n *\n * // All KAPLAY functions are imported to global after calling kaplay()\n * add()\n * onUpdate()\n * onKeyPress()\n * vec2()\n *\n * // If you want to prevent KAPLAY from importing all functions to global and use a context handle for all KAPLAY functions\n * const k = kaplay({ global: false })\n *\n * k.add(...)\n * k.onUpdate(...)\n * k.onKeyPress(...)\n * k.vec2(...)\n * ```\n *\n * @group Start\n */\nexport const kaplay = <\n    O extends KAPLAYOpt,\n>(\n    opt?: O,\n): KAPLAYGame<O> => {\n    if (runned) {\n        console.warn(\n            \"KAPLAY was runned before, cleaning state\",\n        );\n\n        // cleanup\n        // @ts-ignore\n        updateEngine(null);\n    }\n\n    const gopt = opt ?? {} as KAPLAYOpt;\n\n    runned = true;\n\n    updateEngine(createEngine(gopt));\n\n    const {\n        app,\n        game,\n        audio,\n    } = _k;\n\n    const { checkFrame } = createCollisionSystem({\n        narrow: gopt.narrowPhaseCollisionAlgorithm || \"gjk\",\n    });\n\n    system(\"collision\", checkFrame, [\n        SystemPhase.AfterFixedUpdate,\n        SystemPhase.AfterUpdate,\n    ]);\n\n    // #region Loading default assets\n    game.defaultAssets.ka = loadSprite(null, kaSpriteSrc);\n    game.defaultAssets.boom = loadSprite(null, boomSpriteSrc);\n\n    // by default browsers can only load audio async, we don't deal with that and just start with an empty audio buffer\n    const burpSnd = new SoundData(createEmptyAudioBuffer(audio.ctx));\n\n    // load that burp sound\n    audio.ctx.decodeAudioData(burpSoundSrc.buffer.slice(0) as ArrayBuffer).then(\n        (buf) => {\n            burpSnd.buf = buf;\n            game.defaultAssets.burp = burpSnd;\n        },\n    ).catch((err) => {\n        console.error(\"Failed to load burp: \", err);\n    });\n\n    game.defaultAssets.bean = beanSrc;\n    game.defaultAssets.happy = happyFontSrc;\n    // #endregion\n\n    _k.startLoop();\n\n    // the exported ctx handle\n    const ctx: KAPLAYCtx = createContext(\n        _k,\n        gopt.plugins as KAPLAYPlugin<Record<string, unknown>>[],\n        gopt.global !== false,\n    );\n\n    if (gopt.focus !== false) {\n        app.canvas.focus();\n    }\n\n    return ctx as KAPLAYGame<O>;\n};\n\nexport const kaplayTypes = <T extends TypesOpt = TypesOpt>(): T => {\n    return null as unknown as T;\n};\n\nexport default kaplay;\n"],
  "mappings": "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",
  "names": ["_k", "updateEngine", "e", "base64ToArrayBuffer", "base64", "binstr", "len", "bytes", "i", "dataURLToArrayBuffer", "url", "download", "filename", "a", "downloadText", "text", "downloadJSON", "data", "downloadBlob", "blob", "isDataURL", "str", "getFileName", "p", "gamepad_default", "ASCII_CHARS", "DEF_ANCHOR", "BG_GRID_SIZE", "DEF_FONT", "DBG_FONT", "DEF_TEXT_SIZE", "DEF_TEXT_CACHE_SIZE", "MAX_TEXT_CACHE_SIZE", "FONT_ATLAS_WIDTH", "FONT_ATLAS_HEIGHT", "SPRITE_ATLAS_WIDTH", "SPRITE_ATLAS_HEIGHT", "DEF_FONT_FILTER", "LOG_MAX", "LOG_TIME", "VERTEX_FORMAT", "STRIDE", "sum", "f", "MAX_BATCHED_QUAD", "MAX_BATCHED_VERTS", "MAX_BATCHED_INDICES", "VERT_TEMPLATE", "FRAG_TEMPLATE", "DEF_VERT", "DEF_FRAG", "DEF_OFFSCREEN_DIS", "DEF_JUMP_FORCE", "MAX_VEL", "EVENT_CANCEL_SYMBOL", "GP_MAP", "MAX_TRIES", "Registry", "v", "id", "KEventController", "_KEventController", "cancel", "events", "ev", "oldEv", "newEv", "KEvent", "action", "handler", "args", "res", "result", "KEventHandler", "name", "clamp", "val", "min", "max", "CSS_COLOR_MAP", "lerpNumber", "b", "t", "Color", "_Color", "r", "g", "arr", "hex", "h", "s", "l", "hue2rgb", "q", "cssColor", "color", "other", "dest", "d", "rgb", "cl", "hsl2rgb", "Vec2", "_Vec2", "x", "y", "deg", "angle", "deg2rad", "out", "p2", "vec2", "normal", "on", "vecOrAngle", "c", "dir", "tmp", "rad2deg", "src", "dst", "cos", "sin", "t1", "t2", "invSin", "n", "m", "Rect", "lerp", "rad", "map", "l1", "h1", "l2", "h2", "mapc", "step", "edge", "smoothstep", "edge0", "edge1", "Quad", "_Quad", "w", "quad", "Mat2", "_Mat2", "point", "det", "e1", "e2", "radians", "Mat23", "_Mat23", "sx", "sy", "degrees", "oldA", "oldB", "o", "Mat3", "_Mat3", "m11", "m12", "m13", "m21", "m22", "m23", "m31", "m32", "m33", "wave", "lo", "hi", "A", "C", "M", "RNG", "seed", "randSeed", "rand", "randi", "chance", "shuffle", "list", "j", "chooseMultiple", "count", "choose", "testRectRect", "r1", "r2", "testLineLineT", "denom", "ua", "ub", "testLineLine", "clipLineToRect", "tmin", "tmax", "tx1", "tx2", "ty1", "ty2", "testRectLine", "testRectPoint", "pt", "testRectCircle", "nx", "ny", "testRectPolygon", "testPolygonPolygon", "Polygon", "testLinePoint", "v1", "v2", "clipLineToCircle", "circle", "centerToOrigin", "dis", "testCirclePoint", "b1", "b2", "testLineCircle", "testLinePolygon", "testPolygonPoint", "p1", "Line", "testCircleCircle", "c1", "c2", "testCirclePolygon", "prev", "cur", "poly", "testEllipsePoint", "ellipse", "vx", "vy", "testEllipseCircle", "center", "cx", "cy", "Ellipse", "testEllipseLine", "line", "T", "Circle", "testEllipseEllipse", "ellipse1", "ellipse2", "A1", "A2", "x1", "y1", "x2", "y2", "theta1", "theta2", "M1", "M2", "M1inv", "M2inv", "B", "a11", "a12", "a13", "a21", "a22", "a23", "a31", "a32", "a33", "b11", "b12", "b13", "b21", "b22", "b23", "b31", "b32", "b33", "factor", "condition1", "condition2", "condition3", "testEllipseRect", "rect", "testEllipsePolygon", "testPointPoint", "testPointShape", "shape", "testLineShape", "testCircleShape", "testRectShape", "testPolygonShape", "polygon", "testEllipseShape", "raycastLine", "origin", "direction", "ab", "cd", "abxcd", "ac", "raycastRect", "raycastCircle", "disc", "raycastPolygon", "points", "minHit", "hit", "raycastEllipse", "TI", "Torigin", "Tdirection", "R", "fraction", "raycastGrid", "gridPosHit", "maxDistance", "pos", "gridPos", "tDelta", "dist", "tMax", "steppedIndex", "Point", "_Point", "_Line", "_Rect", "width", "height", "dx", "dy", "pts", "maxPoint", "vertex", "distance", "_Circle", "radius", "tr", "_Ellipse", "rx", "ry", "inv", "scale", "ux", "uy", "halfwidth", "halfheight", "axis", "segmentLineIntersection", "_Polygon", "total", "srcUv", "dstUv", "surfaceLine", "left", "right", "ap", "wasLeft", "index", "isLeft", "intersection", "uv1", "uv2", "alpha", "uv", "evaluateQuadratic", "pt1", "pt2", "pt3", "mt", "mt2", "evaluateQuadraticFirstDerivative", "evaluateQuadraticSecondDerivative", "evaluateBezier", "pt4", "t3", "mt3", "evaluateBezierFirstDerivative", "evaluateBezierSecondDerivative", "evaluateCatmullRom", "D", "evaluateCatmullRomFirstDerivative", "normalizedCurve", "curve", "curveLength", "curveLengthApproximation", "length", "entries", "detail", "llut", "tlut", "ddt", "pp", "inverse", "hermite", "m1", "m2", "cardinal", "tension", "hx", "hy", "catmullRom", "bezier", "kochanekBartels", "continuity", "bias", "hermiteFirstDerivative", "inZeroOneDomain", "approximately", "cubeRoot", "getCubicRoots", "pa", "pb", "pc", "pd", "a2", "p3", "q2", "discriminant", "mp3", "mp33", "cosphi", "phi", "root1", "root2", "root3", "u1", "sd", "cubicBezierYforX", "easingLinear", "keys", "easingCubicBezier", "easingSteps", "steps", "position", "xdist", "jumpStart", "jumpEnd", "ydist", "startY", "isOrientedCcw", "isOrientedCcwPolygon", "onSameSide", "px", "py", "pointInTriangle", "someInTriangle", "vertices", "isEar", "triangulate", "nextIdx", "prevIdx", "idx", "lm", "concaveVertices", "triangles", "nVertices", "current", "skipped", "next", "isConvex", "k", "winding", "Mat4", "_Mat4", "m0", "m4", "m5", "f00", "f01", "f02", "f03", "f04", "f05", "f06", "f07", "f08", "f09", "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", "IDENTITY_MATRIX", "TOP_LEFT", "TOP", "TOP_RIGHT", "LEFT", "CENTER", "RIGHT", "BOTTOM_LEFT", "BOTTOM", "BOTTOM_RIGHT", "colorFactory", "c3", "c4", "c5", "easings", "toFixed", "opacity", "time", "easeFunc", "opacityFactory", "getRenderProps", "obj", "calcTransform", "updateTransformRecursive", "updateChildrenTransformRecursive", "clampAngle", "getArcPts", "radiusX", "radiusY", "start", "end", "isLoop", "nverts", "BlendMode", "anchorPt", "orig", "alignPt", "align", "pushTransform", "popTransform", "multTranslateV", "multTranslate", "multRotate", "multScaleV", "multSkewV", "loadMatrix", "storeMatrix", "flush", "usePostEffect", "uniform", "arrayIsColor", "arrayIsVec2", "arrayIsNumber", "getErrorMessage", "error", "warn", "msg", "deprecateMsg", "oldName", "newName", "fixURL", "TextureUnitManager", "_TextureUnitManager", "texture", "unit", "gl", "Shader", "ctx", "vert", "frag", "attribs", "vertShader", "fragShader", "prog", "attrib", "vertError", "fragError", "linkError", "loc", "Texture", "makeShader", "ggl", "vertSrc", "fragSrc", "vcode", "fcode", "fmt", "match", "ty", "lineContents", "resolveShader", "shader", "getShader", "loadProgress", "Asset", "loadShader", "loadShaderURL", "resolveUrl", "fetchText", "load", "drawRaw", "attributes", "indices", "fixed", "tex", "shaderSrc", "blend", "parsedTex", "parsedShader", "transform", "vertLength", "vv", "drawLine", "opt", "_drawLinesBevel", "halfWidth", "centerOffset", "offset", "segment", "vector", "cs", "sn", "nextSegment", "nextLength", "nextNormal", "lambda", "_drawLinesRound", "fixedPoint", "verts", "_drawLinesMiter", "drawLines", "drawPolygon", "npts", "drawRect", "maxRadius", "_shape", "_width", "_height", "value", "rectFactory", "fixedFactory", "destroy", "getTreeRoot", "isFixed", "isPaused", "setCamPos", "getCamPos", "setCamScale", "getCamScale", "setCamRot", "getCamRot", "getCamTransform", "flash", "flashColor", "fadeOutTime", "fade", "shake", "intensity", "toScreen", "toWorld", "camPos", "camScale", "camRot", "camFlash", "camTransform", "deepEq", "o1", "o2", "k1", "k2", "_Texture", "glText", "filter", "wrap", "img", "BatchRenderer", "format", "maxVertices", "maxIndices", "glVBuf", "primitive", "indexOffset", "material", "lastCommand", "lastMaterial", "command", "Mesh", "genStack", "setFunc", "stack", "push", "item", "pop", "initGfx", "opts", "gc", "onDestroy", "extension", "curVertexFormat", "setVertexFormat", "stride", "pushTexture2D", "popTexture2D", "pushArrayBuffer", "popArrayBuffer", "pushElementArrayBuffer", "popElementArrayBuffer", "pushFramebuffer", "popFramebuffer", "pushRenderbuffer", "popRenderbuffer", "pushViewport", "popViewport", "pushProgram", "popProgram", "TexPacker", "gfx", "padding", "context2D", "paddedWidth", "paddedHeight", "curTex", "packerId", "_Asset", "loader", "err", "asset", "AssetBucket", "handle", "loaded", "timeout", "rej", "_", "fetchURL", "fetchJSON", "path", "fetchArrayBuffer", "loadRoot", "loadJSON", "loadImg", "resolve", "reject", "buckets", "bucket", "getFailedAssets", "fails", "getAsset", "prom", "initAssets", "SoundData", "_SoundData", "buf", "resolveSound", "snd", "getSound", "loadSound", "fixedSrc", "sound", "loadMusic", "musicUrl", "SpriteData", "_SpriteData", "frames", "anims", "slice9", "slice", "resolveSprite", "spr", "getSprite", "loadSprite", "images", "createSpriteSheet", "qw", "qh", "canvas", "c2d", "merged", "loadBean", "createEmptyAudioBuffer", "initAudio", "masterNode", "getData", "key", "def", "setData", "loadAseprite", "imgSrc", "jsonSrc", "resolveJSON", "size", "anim", "FontData", "face", "resolveFont", "bfont", "getBitmapFont", "font", "getFont", "loadFont", "makeFont", "gw", "gh", "chars", "cols", "charMap", "ch", "loadBitmapFont", "fontSrc", "loadBitmapFontFromSprite", "spriteID", "splittedChars", "loadHappy", "fontName", "loadSpriteAtlas", "json", "atlas", "info", "playMusic", "onEndEvents", "el", "resumeAudioCtx", "play", "node", "paused", "srcNode", "gainNode", "panNode", "startTime", "stopTime", "started", "getTime", "cloneNode", "oldNode", "newNode", "pan", "burp", "setVolume", "getVolume", "volume", "dummy", "record", "frameRate", "mimeTypes", "options", "mimeType", "mime", "audioDest", "audioStream", "firstAudioTrack", "canvasStream", "firstCanvasTrack", "recorder", "chunks", "defaultExt", "finalized", "checkFinalized", "rec", "blendFactory", "drawEllipse", "polyOpt", "drawCircle", "_radius", "circleFactory", "drawon", "_radiusX", "_radiusY", "ellipseFactory", "fadeIn", "finalOpacity", "done", "mask", "maskFactory", "outline", "join", "miterLimit", "cap", "outlineFactory", "Particle", "particles", "popt", "eopt", "emitterLifetime", "colors", "opacities", "quads", "scales", "lifetime", "spread", "speed", "angleRange", "angularVelocityRange", "accelerationRange", "dampingRange", "nextFree", "velocityAngle", "vel", "angularVelocity", "acceleration", "damping", "lt", "DT", "progress", "colorIndex", "opacityIndex", "quadIndex", "scaleIndex", "hw", "hh", "Picture", "drawPicture", "picture", "a_pos", "a_uv", "a_color", "lastShader", "lastTexture", "beginPicture", "appendToPicture", "endPicture", "raycast", "exclude", "tag", "overload2", "fn1", "fn2", "al", "event", "cb", "obj2Handler", "handleNew", "ec", "ecOnTag", "newTag", "ecOnUntag", "oldTag", "trigger", "onFixedUpdate", "onUpdate", "onDraw", "onAdd", "onUse", "onUnuse", "onTag", "onUntag", "onCollide", "col", "onCollideUpdate", "onCollideEnd", "forAllCurrentAndFuture", "onClick", "onHover", "onHoverUpdate", "onHoverEnd", "onLoading", "onResize", "onError", "onLoad", "onLoadError", "drawUVQuad", "anchor", "offsetX", "offsetY", "drawTexture", "fcols", "frows", "rows", "fracX", "fracY", "addQuad", "sprite", "spriteData", "curAnim", "curAnimDir", "spriteLoadedEvent", "calcTexScale", "setSpriteData", "animName", "createAnimFrames", "frameSeqLength", "top", "bottom", "tw", "th", "iw", "ih", "w1", "w3", "w2", "h3", "props", "prevAnim", "spriteFactory", "drawFormattedText", "ftext", "charsByTexture", "GRAPHEMES", "runes", "string", "increment", "nextUnits", "isGrapheme", "isVariationSelector", "isDiacriticalMark", "isZeroWidthJoiner", "isFirstOfSurrogatePair", "currentPair", "nextPair", "isRegionalIndicator", "isSubdivisionFlag", "isSupplementarySpecialpurposePlane", "isFitzpatrickModifier", "betweenInclusive", "codePointFromSurrogatePair", "codePoint", "pair", "highOffset", "lowOffset", "lower", "upper", "applyCharTransform", "fchar", "compileStyledText", "txt", "charStyleMap", "renderText", "styleStack", "emit", "execResult", "gn", "getFontName", "getFontAtlasForFont", "updateFontAtlas", "formatText", "defGfxFont", "lineSpacing", "letterSpacing", "curX", "lines", "curLine", "cursor", "lastSpace", "lastSpaceWidth", "paraIndentX", "defaultFontValue", "theFChar", "styles", "style", "requestedFont", "resolvedFont", "requestedFontData", "formattedChars", "ox", "thisLineHeight", "theFormattedText", "update", "nt", "textFactory", "uvquad", "video", "_video", "_playing", "_timeupdate", "_canCopyVideo", "_texture", "updateCopyFlag", "response", "agent", "target", "navMapChangedEvent", "BinaryHeap", "compareFn", "lastItem", "parent", "child", "index1", "index2", "factoryMethods", "registerPrefabFactory", "factoryMethod", "deserializePrefabAsset", "serializedPrefab", "loadPrefab", "createPrefab", "nameOrObject", "object", "diff", "posFactory", "tile", "tilePos", "isObstacle", "cost", "edges", "getEdgeMask", "loopup", "edgeMask", "level", "is", "numRows", "numColumns", "spatialMap", "costMap", "edgeMap", "connectivityMap", "tile2Hash", "hash2Tile", "hash", "createSpatialMap", "insertIntoSpatialMap", "removeFromSpatialMap", "updateSpatialMap", "spatialMapChanged", "createCostMap", "objects", "createEdgeMap", "createConnectivityMap", "traverse", "frontier", "getNeighbours", "getCost", "neighbour", "getHeuristic", "goal", "diagonals", "row", "comps", "hasPos", "hasTile", "comp", "worldOrigin", "worldDirection", "invTileWidth", "levelOrigin", "tiles", "from", "to", "cameFrom", "costSoFar", "neighbours", "newCost", "cameNode", "compsAndTags", "tags", "compOrTag", "buildPath", "aStarSearch", "graph", "pathfinder", "patrol", "waypoints", "endBehavior", "finished", "nextWaypoint", "sentry", "candidates", "get", "checkFrequency", "directionVector", "fieldOfView", "fov", "halfAngle", "AnimateChannel", "relative", "timing", "maxIndex", "serialization", "reflect", "AnimateChannelNumber", "isFinished", "easing", "AnimateChannelVec2", "followMotion", "prevKey", "nextIndex", "nextKey", "prevPrevKey", "nextNextKey", "AnimateChannelColor", "Anim", "acc", "channel", "allFinished", "localFinished", "animate", "gopts", "currentAnim", "serializeAnimation", "fakeMouse", "isPressed", "health", "hp", "maxHP", "origHP", "lifespan", "named", "state", "initState", "stateList", "transitions", "initStateEvents", "didFirstEnter", "oldState", "available", "stay", "scenesToStay", "textInput", "hasFocus", "maxInputLength", "charEv", "backEv", "origText", "newValue", "flip", "character", "timer", "maxLoopsPerFrame", "waitFirst", "duration", "setValue", "curTime", "usesArea", "area", "colliding", "collidingThisFrame", "oldShape", "mpos", "otherOrTag", "btn", "hovering", "localArea", "setGravity", "getGravity", "setGravityDirection", "getGravityDirection", "body", "curPlatform", "lastPlatformPos", "willFall", "prevPhysicsPos", "nextPhysicsPos", "prevDrawPos", "rcol", "tmass", "col2", "pastPlatform", "restitution", "friction", "projection", "rejection", "dt", "prevVel", "maxVel", "nextVel", "impulse", "force", "doubleJump", "numJumps", "jumpsLeft", "surfaceEffector", "currentVel", "areaEffector", "pointEffector", "forceScale", "constantForce", "platformEffector", "collision", "buoyancyEffector", "submergedArea", "displacedMass", "buoyancyForce", "velocity", "dragMagnitude", "dragForce", "anchorFactory", "SystemPhase", "system", "when", "systems", "replacingSystemIdx", "systemInstalled", "installSystem", "constraints", "constraint", "dd", "srcAngle", "dstAngle", "newAngle", "srcScale", "dstScale", "newScale", "newX", "newY", "minAngle", "maxAngle", "_minAngle", "_maxAngle", "algorithm", "depth", "iterations", "chain", "endEffector", "it", "effector", "effectorTransform", "angleToTarget", "angleToEndEffector", "angleCorrection", "rotation", "root", "rootPosX", "rootPosY", "parentTransform", "follow", "layer", "_layerIndex", "move", "moveFactory", "offscreen", "isOut", "screenRect", "selfRect", "check", "self", "rotate", "rotateFactory", "_scale", "scaleFactory", "skew", "_skew", "z", "zFactory", "drawText", "drawUnscaled", "content", "ow", "oh", "throwError", "handleErr", "showErrorScreen", "textStyle", "title", "esc", "drawStenciled", "test", "drawMasked", "drawSubtracted", "FrameBuffer", "frameBuffer", "renderBuffer", "bytesPerRow", "temp", "topOffset", "bottomOffset", "makeInternal", "addCompIdsToTags", "GameObjRawPrototype", "attachAppToGameObjRaw", "tagList", "compId", "make", "KeepFlags", "COMP_DESC", "COMP_EVENTS", "oldTransform", "newTransform", "prefabAsset", "deserializedCompList", "children", "compIdAreTags", "checkTagsOrComps", "recurse", "isChild", "hierarchy", "include", "distanceOp", "sdist", "maskFunc", "addCompIdAsTag", "prop", "func", "originalCompId", "dep", "compList", "op", "ctrl", "appEvs", "boom", "addKaboom", "kaboom", "ka", "addLevel", "Collision", "_Collision", "source", "resolved", "setLayers", "layerNames", "defaultLayer", "defaultLayerIndex", "getLayers", "getDefaultLayer", "layers", "updateViewport", "pixelDensity", "desiredWidth", "desiredHeight", "drawingBufferWidth", "drawingBufferHeight", "canvasWidth", "canvasHeight", "viewportWidth", "viewportHeight", "canvasAspectRatio", "disairedAspectRatio", "scaledWidth", "scaledHeight", "viewportToCanvas", "canvasToViewport", "initAppEvents", "fixedSize", "scene", "go", "pushScene", "popScene", "sceneData", "onSceneLeave", "getSceneName", "setBackground", "getBackground", "makeCanvas", "fb", "drawCurve", "segments", "drawBezier", "drawCanvas", "drawSprite", "drawTriangle", "DecisionNode", "attribute", "ValueDecisionNode", "predicate", "PredicateDecisionNode", "weight", "WeightDecisionNode", "answers", "dice", "values", "distinct", "entropy", "outcomes", "positive", "outcome", "negative", "gain", "splitByAttribute", "DecisionTree", "_DecisionTree", "indexOfAttributeToSplitOn", "gains", "maxGain", "createBranches", "attributeColumn", "column", "tree", "Rule", "salience", "ActionRule", "AssertRule", "fact", "grade", "RetractRule", "RuleSystem", "rule", "facts", "State", "callbacks", "StateMachine", "states", "oldStateName", "calculateSupport", "shapeA", "shapeB", "oppositeDirection", "supportA", "supportB", "addSupport", "support", "tripleProduct", "evolveSimplex", "simplex", "colliderA", "colliderB", "a0", "tp", "c0", "bc", "ca", "bcNorm", "caNorm", "gjkIntersects", "findClosestEdge", "minDistance", "minNormal", "minIndex", "norm", "getIntersection", "e0", "gjkIntersection", "gjkShapeIntersects", "gjkShapeIntersection", "NavEdge", "NavPolygon", "centerX", "centerY", "cross", "NavMesh", "pairEdge", "pairPolygon", "indexA", "indexB", "type", "startPolygon", "goalPolygon", "insertionSort", "cmp", "swap", "plug", "plugin", "funcs", "funcsObj", "quit", "game", "app", "numTextureUnits", "onCleanup", "createContext", "plugins", "exportToGlobal", "audio", "debug", "add", "addPrefab", "readd", "destroyAll", "wait", "loop", "query", "tween", "isEqOrIncludes", "listOrSmt", "setHasOrIncludes", "set", "mapAddOrPush", "getButtons", "getButton", "setButton", "binding", "pressButton", "releaseButton", "parseButtonBindings", "appState", "btns", "keyboardBtns", "keyboardCodes", "gamepadBtns", "mouseBtns", "ButtonState", "GamepadState", "FPSCounter", "initAppState", "buttons", "initApp", "fixedDt", "restDt", "isHidden", "fps", "numFrames", "screenshot", "screenshotToBlob", "setCursor", "getCursor", "setCursorLocked", "isCursorLocked", "enterFullscreen", "exitFullscreen", "setFullscreen", "isFullscreen", "isFocused", "ce", "canvasEvents", "de", "docEvents", "we", "winEvents", "resizeObserver", "run", "fixedUpdate", "fixedAccumulatedDt", "accumulatedDt", "frame", "loopTime", "realDt", "desiredDt", "processInput", "resetInput", "isTouchscreen", "mousePos", "mouseDeltaPos", "isMousePressed", "isMouseDown", "isMouseReleased", "isMouseMoved", "isKeyPressed", "isKeyPressedRepeat", "isKeyDown", "isKeyReleased", "isGamepadButtonPressed", "isGamepadButtonDown", "isGamepadButtonReleased", "isButtonPressed", "isButtonDown", "isButtonReleased", "onKeyDown", "onKeyPress", "onKeyPressRepeat", "onKeyRelease", "onMouseDown", "mouse", "onMousePress", "onMouseRelease", "onMouseMove", "onCharInput", "onTouchStart", "onTouchMove", "onTouchEnd", "onScroll", "onHide", "onShow", "onGamepadButtonPress", "gp", "onGamepadButtonDown", "onGamepadButtonRelease", "onGamepadStick", "stick", "onGamepadConnect", "onGamepadDisconnect", "getGamepadStick", "charInputted", "getGamepads", "onButtonPress", "onButtonDown", "onButtonRelease", "getLastInputDeviceType", "processGamepad", "registerGamepad", "browserGamepad", "gamepad", "removeGamepad", "gamepadState", "gamepadBtn", "browserGamepadBtn", "isGamepadButtonBind", "stickName", "cw", "ww", "wh", "rw", "rc", "ratio", "MOUSE_BUTTONS", "PREVENT_DEFAULT_KEYS", "KEY_ALIAS", "code", "touches", "box", "lastMousePos", "kbGamepad", "entry", "createDebug", "gopt", "appGfx", "fr", "debugPaused", "timeScale", "msgs", "createGame", "createCanvas", "initAppGfx", "defShader", "emptyTex", "bgColor", "bgAlpha", "renderer", "bgTex", "transformStack", "drawInspectText", "pad", "ftxt", "bw", "bh", "drawDebug", "inspecting", "flipped", "logs", "log", "prettyDebug", "inside", "seen", "outStr", "transformFrame", "drawFrame", "cam", "drawLoadScreen", "startEngineLoop", "assets", "frameRenderer", "isFirstFrame", "sys", "details", "createFontCache", "fontCacheCanvas", "fontCacheC2d", "createFrameRenderer", "frameStart", "frameEnd", "fixedUpdateFrame", "updateFrame", "createEngine", "canvasContext", "minkowskiRectDifference", "minkowskiRectShapeIntersection", "shape1", "shape2", "s1", "s2", "satShapeIntersection", "sat", "overlap", "axisProj", "min1", "max1", "min2", "max2", "SapEdge", "SweepAndPrune", "shouldIgnore", "bbox", "touching", "createCollisionSystem", "narrow", "narrowPhaseIntersection", "narrowPhase", "col1", "sap", "sapInit", "broadPhase", "obj1", "obj2", "checkFrame", "runned", "kaplay", "ka_default", "boom_default", "burpSnd", "burp_default", "bean_default", "happy_default", "kaplayTypes", "kaplay_default"]
}
